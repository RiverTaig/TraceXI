<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Geocortex.Core</name>
    </assembly>
    <members>
        <member name="T:Geocortex.Core.Atom.AtomCategory">
            <summary>
            Defines the AtomCategory.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomCategory.Term">
            <summary>
            Gets or sets terms.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomCategory.Scheme">
            <summary>
            Gets or sets scheme.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomCategory.Label">
            <summary>
            Gets or sets label.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomCategory.Value">
            <summary>
            Gets or sets value.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Atom.AtomCommonElements">
            <summary>
            This class contains common elements for Feed and Entry object.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Atom.AtomCommonElements.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Atom.AtomCommonElements"/> class.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomCommonElements.Author">
            <summary>
            Gets or sets the Author of the feed.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomCommonElements.Category">
            <summary>
            Gets or sets the category of the feed.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomCommonElements.Contributor">
            <summary>
            Gets or sets  the contributor of the feed.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomCommonElements.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomCommonElements.Links">
            <summary>
            Gets or sets the link.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomCommonElements.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomCommonElements.Updated">
            <summary>
            Gets or sets the last updated date.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Atom.AtomContent">
            <summary>
            Defines the content for Atom response.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Atom.AtomText">
            <summary>
            Defines the text for Atom.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomText.AtomTextType">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomText.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomContent.Source">
            <summary>
            Gets or sets the source.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Atom.AtomEntry">
            <summary>
            Defines the Atom entry.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomEntry.Content">
            <summary>
            Gets or sets the content of the <see cref="T:Geocortex.Core.Atom.AtomEntry"/>
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomEntry.Published">
            <summary>
            Gets or sets the published date.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomEntry.Summary">
            <summary>
            Gets or sets the summary.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomEntry.Thumbnail">
            <summary>
            Gets or sets the thumbnail for the <see cref="T:Geocortex.Core.Atom.AtomEntry"/>.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomEntry.BoundingBox">
            <summary>
            Gets or sets the bounding box.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Atom.AtomFeed">
            <summary>
            Defines the root element for the Atom.
            </summary>    
        </member>
        <member name="M:Geocortex.Core.Atom.AtomFeed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Atom.AtomFeed"/> class.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomFeed.Generator">
            <summary>
            Gets or sets the atom generator.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomFeed.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomFeed.Subtitle">
            <summary>
            Gets or sets the subtitle of the feed.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomFeed.Query">
            <summary>
            Gets or sets the query.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomFeed.TotalResults">
            <summary>
            Gets or sets the total results available
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomFeed.StartIndex">
            <summary>
            Gets or sets the start index of the result page.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomFeed.EndIndex">
            <summary>
            Gets or sets the end index of the result page.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomFeed.ItemsPerPage">
            <summary>
            Gets or sets the number of items per page.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomFeed.BoundingBox">
            <summary>
            Gets or sets the bounding box.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomFeed.Group">
            <summary>
            Gets or sets the group.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomFeed.Entries">
            <summary>
            Gets or sets the search results.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Atom.AtomGenerator">
            <summary>
            Defines the atom generator.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomGenerator.Uri">
            <summary>
            Gets or sets the url of the generator.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomGenerator.Version">
            <summary>
            Gets or sets the version of the generator.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomGenerator.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Atom.AtomLink">
            <summary>
            Defines the resource link for the AtomEntry.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomLink.HRef">
            <summary>
            Gets or sets the Href value for the atom entry.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomLink.Uri">
            <summary>
            Gets the url for the atom entry.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomLink.Rel">
            <summary>
            Gets or sets the <code>Rel</code> for the <see cref="P:Geocortex.Core.Atom.AtomLink.HRef"/>.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomLink.MimeType">
            <summary>
            Gets or sets the Mime Type for the AtomEntry.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomLink.HRefLanguage">
            <summary>
            Gets or sets the language for the <see cref="P:Geocortex.Core.Atom.AtomLink.HRef"/>.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomLink.Title">
            <summary>
            Gets or sets the title for the <see cref="T:Geocortex.Core.Atom.AtomEntry"/>.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomLink.Length">
            <summary>
            Gets or sets the length.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomLink.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Atom.AtomPerson">
            <summary>
            Defines the AtomPerson.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomPerson.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomPerson.Link">
            <summary>
            Gets or sets the link.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomPerson.Email">
            <summary>
            Gets or sets the email.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Atom.AtomSuggestions">
            <summary>
            Defines the auto complete suggestions.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Atom.AtomSuggestions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Atom.AtomSuggestions"/> class.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomSuggestions.Query">
            <summary>
            Gets or sets the search terms.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.AtomSuggestions.Suggestions">
            <summary>
            Gets or sets the suggestion for the <see cref="P:Geocortex.Core.Atom.AtomSuggestions.Query"/>.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Atom.OpenSearchBoundingBox">
            <summary>
            Defines the bounding box for the <see cref="T:Geocortex.Core.Atom.AtomEntry"/>.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.OpenSearchBoundingBox.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Atom.OpenSearchQuery">
            <summary>
            Defines the OpenSearchQuery for Atom response.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.OpenSearchQuery.Role">
            <summary>
            Gets or sets the role.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.OpenSearchQuery.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.OpenSearchQuery.TotalResults">
            <summary>
            Gets or sets the total result
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.OpenSearchQuery.SearchTerms">
            <summary>
            Gets or sets the search term.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.OpenSearchQuery.Count">
            <summary>
            Gets or sets the result count.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.OpenSearchQuery.StartIndex">
            <summary>
            Gets or sets the start index.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.OpenSearchQuery.StartPage">
            <summary>
            Gets or sets the start page.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.OpenSearchQuery.Language">
            <summary>
            Gets or sets the language.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.OpenSearchQuery.InputEncoding">
            <summary>
            Gets or sets the input encoding.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.OpenSearchQuery.OutputEncoding">
            <summary>
            Gets or sets the output encoding.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Atom.OpenSearchThumbnail">
            <summary>
            Defines the OpenSearchThumbnail.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.OpenSearchThumbnail.Uri">
            <summary>
            Gets or sets thumbnail url.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.OpenSearchThumbnail.Width">
            <summary>
            Gets or sets the thumbnail width.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Atom.OpenSearchThumbnail.Height">
            <summary>
            Gets or sets thumbnail height.
            </summary>
        </member>
        <member name="T:Geocortex.Core.CallContext">
            <summary>
            The call context assists in managing contexts.
            </summary>
        </member>
        <member name="M:Geocortex.Core.CallContext.ExecuteOnLeave(System.Action)">
            <summary>
            Executes the given action once the context frame is concluded.
            </summary>
            <param name="action">The action.</param>
            <returns>Returns the disposable which may be used to discard the action.</returns>
        </member>
        <member name="M:Geocortex.Core.CallContext.ExecuteInNewContext(System.Action)">
            <summary>
            Executes the action in a new context.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Geocortex.Core.CallContext.ExecuteInNewContext``1(System.Func{``0})">
            <summary>
            Executes the action in a new context.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="action">The action.</param>
            <returns>Returns the result from the given action.</returns>
        </member>
        <member name="P:Geocortex.Core.CallContext.IsDefault">
            <summary>
            Gets a value indicating whether the call context is the default context.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Collections.FreezableBag`1">
            <summary>
            Base collection for freezable bag sub implementations.
            </summary>
            <typeparam name="TSubClass">The type of the sub class.</typeparam>
        </member>
        <member name="T:Geocortex.Core.Collections.FreezableBag">
            <summary>
            Generic bag of stuff that may be frozen.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Collections.Bag">
            <summary>
            base implementation of a bag.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Collections.IBag">
            <summary>
            Collection interface for "bag of stuff" implementations.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.IBag.Add(System.String,System.Object)">
            <summary>
            Adds the specified key and value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Geocortex.Core.Collections.IBag.Remove(System.String,System.Type)">
            <summary>
            Removes the specified key and value.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <returns>
            Returns true if the value was removed.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.IBag.Contains(System.String,System.Type)">
            <summary>
            Ascertains if the bag contains the value.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <returns>Returns true if the bag contains the value.</returns>
        </member>
        <member name="M:Geocortex.Core.Collections.IBag.TryGetValue(System.String,System.Type,System.Object@)">
            <summary>
            Tries to retrieve a value.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns>Returns true if the value was retrieved.</returns>
        </member>
        <member name="M:Geocortex.Core.Collections.IBag.TryRemove(System.String,System.Type,System.Object@)">
            <summary>
            Tries to remove a value.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns>Returns true if the value was removed.</returns>
        </member>
        <member name="P:Geocortex.Core.Collections.IBag.Item(System.String,System.Type)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <returns>The value.</returns>
        </member>
        <member name="P:Geocortex.Core.Collections.IBag.Item(System.String)">
            <summary>
            Sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Geocortex.Core.Collections.Bag.ShouldAssign(System.String,System.Object)">
            <summary>
            Determines if the key/value should be contributed during deserialization.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>Returns true if the key/value should be assigned.</returns>
        </member>
        <member name="M:Geocortex.Core.Collections.Bag.ShouldOutput(System.String,System.Object)">
            <summary>
            Determines if the key/value should be contributed during serialization.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>Returns true if the key/value should be outputted.</returns>
        </member>
        <member name="M:Geocortex.Core.Collections.Bag.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Geocortex.Core.Collections.Bag.Add(System.String,System.Object)">
            <summary>
            Adds the specified key and value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Geocortex.Core.Collections.Bag.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.Bag.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.Bag.Remove(System.String,System.Type)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <returns>
            Returns true if the key and value were removed.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.Bag.TryRemove(System.String,System.Type,System.Object@)">
            <summary>
            Tries to remove a value.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns>
            Returns true if the value was removed.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.Bag.Contains(System.String,System.Type)">
            <summary>
            Ascertains if the bag contains the value.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <returns>
            Returns true if the bag contains the value.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.Bag.TryGetValue(System.String,System.Type,System.Object@)">
            <summary>
            Tries to retrieve a value.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns>
            Returns true if the value was retrieved.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.Bag.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.Bag.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Geocortex.Core.Collections.Bag.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.Bag.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.Bag.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.Bag.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads the XML.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Geocortex.Core.Collections.Bag.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
        </member>
        <member name="P:Geocortex.Core.Collections.Bag.Source">
            <summary>
            Gets the source.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Collections.Bag.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <member name="P:Geocortex.Core.Collections.Bag.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Geocortex.Core.Collections.Bag.Item(System.String,System.Type)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <returns>The value.</returns>
        </member>
        <member name="P:Geocortex.Core.Collections.Bag.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.FreezableBag"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag.#ctor(Geocortex.Core.Collections.IBag)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.FreezableBag"/> class.
            </summary>
            <param name="other">The other.</param>
            <exception cref="T:System.ArgumentNullException">If other is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds the range of items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.InvalidOperationException">If the this instance is read only.</exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.InvalidOperationException">If the this instance is read only.</exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>Returns true if the item was removed.</returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag.Remove(System.String,System.Type)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <returns>
            Returns true if the value was removed.
            </returns>
            <exception cref="T:System.InvalidOperationException">If the this instance is read only.</exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag.TryRemove(System.String,System.Type,System.Object@)">
            <summary>
            Tries to remove a value.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns>
            Returns true if the value was removed.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag.Freeze">
            <summary>
            Freezes this instance.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Collections.FreezableBag.Item(System.String)">
            <summary>
            Sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <member name="P:Geocortex.Core.Collections.FreezableBag.IsReadOnly">
            <summary>
            Gets a value indicating whether [is read only].
            </summary>
            <value>
              <c>true</c> if [is read only]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.FreezableBag"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag`1.#ctor(Geocortex.Core.Collections.FreezableBag)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.FreezableBag"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag`1.Unfreeze">
            <summary>
            Unfreezes this instance.
            </summary>
            <returns>Returns the unfrozen instance.</returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag`1.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>Returns the session details.</returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag`1.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns>Returns the object serialized.</returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag`1.Save">
            <summary>
            Saves this instance.
            </summary>
            <returns>Returns the date/time the newly saved item.</returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag`1.Save(System.String)">
            <summary>
            Saves the specified file path.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>Returns the date/time of the save.</returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag`1.Deserialize(System.Xml.Linq.XNode)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="node">The node.</param>
            <returns>Return the object.</returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FreezableBag`1.Load(System.String)">
            <summary>
            Loads the specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>
            Returns the object.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Collections.FreezableBag`1.Empty">
            <summary>
            Gets the empty instance.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Collections.FreezableBag`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is the empty instance.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Collections.FreezableBag`1.Source">
            <summary>
            Gets the source.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Collections.FreezableBag`1.BaseUri">
            <summary>
            Gets or sets the base URI.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Collections.XmlSafeCollection`1">
            <summary>
            Implements an XML safe list.
            </summary>
            <typeparam name="T">The item type.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Collections.XmlSafeCollection`1.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.XmlSafeCollection`1.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Geocortex.Core.Collections.XmlSafeCollection`1.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
        </member>
        <member name="T:Geocortex.Core.Collections.XmlSafeNameValueCollection">
            <summary>
            Xml safe name value collection.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.XmlSafeNameValueCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.XmlSafeNameValueCollection"/> class.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains the information required to serialize the new <see cref="T:System.Collections.Specialized.NameValueCollection"/> instance.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains the source and destination of the serialized stream associated with the new <see cref="T:System.Collections.Specialized.NameValueCollection"/> instance.</param>
        </member>
        <member name="M:Geocortex.Core.Collections.XmlSafeNameValueCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.XmlSafeNameValueCollection"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.XmlSafeNameValueCollection.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.XmlSafeNameValueCollection"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Geocortex.Core.Collections.XmlSafeNameValueCollection.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.XmlSafeNameValueCollection.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Geocortex.Core.Collections.XmlSafeNameValueCollection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
        </member>
        <member name="T:Geocortex.Core.Conversion.JsonConverter">
            <summary>
            A utility class for converting objects from one type to another for the purposes of JSON serialization.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Conversion.JsonConverter.ColorToRgba(System.Nullable{System.Drawing.Color})">
            <summary>
            Converts from a Color to an RGBA array.
            </summary>
            <param name="color">The color.</param>
            <returns>An RGBA array where the first byte is Red, the next bye is Green, etc.</returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.JsonConverter.RgbaToColor(System.Byte[])">
            <summary>
            Converts from an RGBA array to a Color object.
            </summary>
            <param name="color">The color as a byte array in the order of RGBA.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.JsonConverter.RgbaToColor(System.Collections.ArrayList)">
            <summary>
            Converts from an RGBA list to a Color object.
            </summary>
            <param name="color">The color as an ArrayList of numbers, in the order of RGBA.</param>
            <returns>The color.</returns>
        </member>
        <member name="T:Geocortex.Core.Extensions.DrawingExtensions">
            <summary>
            Extensions for Drawing.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Extensions.DrawingExtensions.GetBytes(System.Drawing.Image)">
            <summary>
            Gets the data for an image.
            </summary>
            <param name="image">The image.</param>
            <returns>The bytes.</returns>
        </member>
        <member name="T:Geocortex.Core.Extensions.ExceptionExtensions">
            <summary>
            Extension methods for exceptions.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Extensions.ExceptionExtensions.GetRecursiveExceptionMessage(System.Exception,System.Boolean)">
            <summary>
            Builds the recursive exception message that contains the message and (possibly) the
            stack trace of an exception and all its inner exceptions.
            </summary>
            <param name="ex">The exception.</param>
            <param name="includeStackTrace">if set to <c>true</c> include stack trace.</param>
            <returns>The constructed message.</returns>
        </member>
        <member name="T:Geocortex.Core.Extensions.IOUtilities">
            <summary>
            Utility methods for IO.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Extensions.IOUtilities.WaitForFile(System.String,System.IO.FileMode)">
            <summary>
            Waits for a file to become available, in case it is locked. Waits for up to 500ms.
            </summary>
            <param name="fullPath">The full path.</param>
            <param name="mode">The file mode.</param>
            <returns>The file stream.</returns>
        </member>
        <member name="T:Geocortex.Core.Extensions.PrincipalExtensions">
            <summary>
            Extension methods for Principals.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Extensions.PrincipalExtensions.GetClaimValue(System.Security.Principal.IPrincipal,System.String)">
            <summary>
            Gets the claim value for the given claim type.
            </summary>
            <param name="principal">The principal.</param>
            <param name="type">The claim type.</param>
            <returns>The value for the first claim matching the specified claim type.</returns>
        </member>
        <member name="T:Geocortex.Core.IFileLocator">
            <summary>
            Interface for locating files of importance.
            </summary>
        </member>
        <member name="M:Geocortex.Core.IFileLocator.GetFile(System.String,System.String)">
            <summary>
            Locates the file given some constants.
            </summary>
            <param name="hint">The hint.</param>
            <param name="path">The path.</param>
            <returns>Returns the file of interest.</returns>
        </member>
        <member name="T:Geocortex.Core.ILock`1">
            <summary>
            Contains functionality for locking on an entity.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Geocortex.Core.ILock`1.Commit">
            <summary>
            Commits this instance.
            </summary>
            <returns>Returns true if the modified value.</returns>
        </member>
        <member name="P:Geocortex.Core.ILock`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Collections.ActivePriorityCache`1">
            <summary>
            A generic dictionary-like caching object that holds a maximum number of cacheable items of
            type T.  If the cache fills up, the least-accessed objects are dropped first.
            </summary>
            <typeparam name="T">The type of objects to store in the cache.</typeparam>
        </member>
        <member name="T:Geocortex.Core.IDeepCloneable">
            <summary>
            By implementing this interface a type guarantees that its
            <see cref="M:Geocortex.Core.IDeepCloneable.Clone"/> method will perform a deep clone of itself.
            </summary>
        </member>
        <member name="M:Geocortex.Core.IDeepCloneable.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance.
            Deep cloning implies that all object references (and any objects
            they may reference, and so on) will also be deep cloned.
            </summary>
            <returns> 
            A new object that is a deep copy of this instance.
            </returns>
            <remarks>
            Note to implementors: <see cref="T:Geocortex.Core.DeepCloneHelper"/> can be used
            to automatically perform deep clone operations on serializable types.
            </remarks>
        </member>
        <member name="F:Geocortex.Core.Collections.ActivePriorityCache`1._cache">
            <summary>
            Internal storage for cache items
            </summary>
        </member>
        <member name="F:Geocortex.Core.Collections.ActivePriorityCache`1._mru">
            <summary>
            A pointer to the most recently used node in the cache.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Collections.ActivePriorityCache`1._lru">
            <summary>
            A pointer to the least recently used node in the cache.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.ActivePriorityCache`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.ActivePriorityCache`1"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.ActivePriorityCache`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.ActivePriorityCache`1.AddItem(`0,System.String)">
            <summary>
            Adds an item to the cache.  If the cache has reached
            the capacity, the item being added replaces the least recently used/fetched
            item.
            </summary>
            <param name="item">The item.</param>
            <param name="itemId">The item id.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="itemId"/> is null.
            </exception>
            <remarks>
            If the item is already in cache, nothing occurs except the item becomes
            the most recently used.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.Collections.ActivePriorityCache`1.RemoveItem(System.String)">
            <summary>
            Removes the item from the cache.
            </summary>
            <param name="itemId">The item id.</param>
            <returns>The removed item.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="itemId"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.ActivePriorityCache`1.ReplaceItem(`0,System.String)">
            <summary>
            Replaces the item in the cache.  Note that this operation does not affect the
            item's likelihood of being removed from the cache by optimization routines.
            </summary>
            <param name="item">The item.</param>
            <param name="itemId">The item id.</param>
            <returns>The object that was replaced.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="itemId"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.ActivePriorityCache`1.FetchItem(System.String)">
            <summary>
            Fetches an object from the cache.
            </summary>
            <param name="itemId">The item id.</param>
            <returns>
            Returns the found object from the cache, or Null if the item is not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="itemId"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.ActivePriorityCache`1.Poke(System.String)">
            <summary>
            Checks the cache to see if a particular item ID exists.
            </summary>
            <param name="itemId">The item id.</param>
            <returns><c>true</c> if the cache contains the item id.</returns>
        </member>
        <member name="M:Geocortex.Core.Collections.ActivePriorityCache`1.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance.
            Deep cloning implies that all object references (and any objects
            they may reference, and so on) will also be deep cloned.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Collections.ActivePriorityCache`1.MaximumCacheSize">
            <summary>
            Gets or sets the maximum size of the cache.
            </summary>
            <value>The maximum size of the cache.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If setting the property with a value less than or equal to one.
            </exception>
        </member>
        <member name="P:Geocortex.Core.Collections.ActivePriorityCache`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Geocortex.Core.Collections.ActivePriorityCache`1.LinkedListNode`1">
            <summary>
            A very simple linked list implementation for objects
            </summary>
            <typeparam name="TObject">The type of the object in the list.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Collections.ActivePriorityCache`1.LinkedListNode`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the LinkedListNode class.
            </summary>
            <param name="id">The id of the node.</param>
        </member>
        <member name="M:Geocortex.Core.Collections.ActivePriorityCache`1.LinkedListNode`1.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance.
            Deep cloning implies that all object references (and any objects
            they may reference, and so on) will also be deep cloned.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Collections.ActivePriorityCache`1.LinkedListNode`1.ID">
            <summary>
            Gets or sets a string identifying this LinkedListNode
            </summary>
        </member>
        <member name="P:Geocortex.Core.Collections.ActivePriorityCache`1.LinkedListNode`1.Previous">
            <summary>
            Gets or sets the previous element in the linked list
            </summary>
        </member>
        <member name="P:Geocortex.Core.Collections.ActivePriorityCache`1.LinkedListNode`1.Next">
            <summary>
            Gets or sets the next element in the linked list
            </summary>
        </member>
        <member name="P:Geocortex.Core.Collections.ActivePriorityCache`1.LinkedListNode`1.Item">
            <summary>
            Gets or sets a pointer to the Item object that this link holds
            </summary>
        </member>
        <member name="T:Geocortex.Core.Collections.AtomicBag">
            <summary>
            Implementation of a bag that is written to and read from atomically.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.AtomicBag.Update">
            <summary>
            Updates the specified bag.
            </summary>
            <returns>
            Returns a cookie that once disposed will update the underlying object.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.AtomicBag.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Geocortex.Core.Collections.AtomicBag.Add(System.String,System.Object)">
            <summary>
            Adds the specified key and value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Geocortex.Core.Collections.AtomicBag.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.AtomicBag.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.AtomicBag.Remove(System.String,System.Type)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <returns>
            Returns true if the key and value were removed.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.AtomicBag.TryRemove(System.String,System.Type,System.Object@)">
            <summary>
            Tries to remove a value.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns>
            Returns true if the value was removed.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Collections.AtomicBag.Item(System.String)">
            <summary>
            Sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Geocortex.Core.Collections.BagSource">
            <summary>
            Backing collection for bag implementation.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.BagSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.BagSource"/> class.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Collections.CollectionExtensions">
            <summary>
            Extension methods for some collections.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.CollectionExtensions.TryGetValue``1(Geocortex.Core.Collections.IBag,System.String,``0@)">
            <summary>
            Tries to get the value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="data">The data.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            Returns true if the value was able to be fetched.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.CollectionExtensions.TryRemove``1(Geocortex.Core.Collections.IBag,System.String,``0@)">
            <summary>
            Tries to remove the value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="data">The data.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            Returns true if the value was able to be fetched.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.CollectionExtensions.Contains``1(Geocortex.Core.Collections.IBag,System.String)">
            <summary>
            Determines whether the data contains the specified value kind.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="data">The data.</param>
            <param name="key">The key.</param>
            <returns>
            Returns true if the value is present.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.CollectionExtensions.TryGetValue``2(Geocortex.Core.Collections.IBag,System.Func{``0,``1},``1,``0@)">
            <summary>
            Tries to get the value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="bag">The bag.</param>
            <param name="selector">The selector.</param>
            <param name="selectorResult">The selector result.</param>
            <param name="value">The value.</param>
            <returns>
            Returns true if a value was successfully returned.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.CollectionExtensions.TryGetKeyValue``2(Geocortex.Core.Collections.IBag,System.Func{``0,``1},``1,System.Collections.Generic.KeyValuePair{System.String,``0}@)">
            <summary>
            Tries to get the value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="bag">The bag.</param>
            <param name="selector">The selector.</param>
            <param name="selectorResult">The selector result.</param>
            <param name="keyValue">The key value.</param>
            <returns>
            Returns true if a value was successfully returned.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the range of values to the target collection.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="target">The target.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Geocortex.Core.Collections.CollectionExtensions.ValuesOfType``1(Geocortex.Core.Collections.IBag)">
            <summary>
            Yields the key-value pairs that or of a particular type.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="bag">The bag.</param>
            <returns>Returns the key-value pairs.</returns>
        </member>
        <member name="M:Geocortex.Core.Collections.CollectionExtensions.FirstPairWithValueType``1(Geocortex.Core.Collections.IBag)">
            <summary>
            Finds the first key value pair where the value is of a certain type.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="bag">The bag.</param>
            <returns>The first key value pair where the value is of a certain type.</returns>
        </member>
        <member name="M:Geocortex.Core.Collections.CollectionExtensions.OfType``3(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Returns the key-values where the values is of a type.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="T">The current value type.</typeparam>
            <typeparam name="TValue">The type of the value to yield.</typeparam>
            <param name="items">The items.</param>
            <returns>Returns a sequence of the new key-value types.</returns>
        </member>
        <member name="T:Geocortex.Core.Collections.EmptyBag">
            <summary>
            Empty bag implementation.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.EmptyBag.Add(System.String,System.Object)">
            <summary>
            Adds the specified key and value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.InvalidOperationException">Always throws.</exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EmptyBag.Remove(System.String,System.Type)">
            <summary>
            Removes the specified key and value.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <returns>
            Returns true if the value was removed.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.EmptyBag.Contains(System.String,System.Type)">
            <summary>
            Ascertains if the bag contains the value.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <returns>
            Returns true if the bag contains the value.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.EmptyBag.TryGetValue(System.String,System.Type,System.Object@)">
            <summary>
            Tries to retrieve a value.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns>
            Returns true if the value was retrieved.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.EmptyBag.TryRemove(System.String,System.Type,System.Object@)">
            <summary>
            Tries to remove a value.
            </summary>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns>
            Returns true if the value was removed.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.EmptyBag.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.InvalidOperationException">Always throws.</exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EmptyBag.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Always throws.</exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EmptyBag.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.EmptyBag.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Geocortex.Core.Collections.EmptyBag.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.EmptyBag.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Collections.EmptyBag.Default">
            <summary>
            Gets the default.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Collections.EmptyBag.Item(System.String,System.Type)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="key">The key.</param>
            <param name="type">The type.</param>
            <returns>he value.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Always throws.</exception>
        </member>
        <member name="P:Geocortex.Core.Collections.EmptyBag.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="key">The key.</param>
            <returns>The value.</returns>
            <exception cref="T:System.InvalidOperationException">Always throws.</exception>
        </member>
        <member name="P:Geocortex.Core.Collections.EmptyBag.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="P:Geocortex.Core.Collections.EmptyBag.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:Geocortex.Core.Collections.EnhancedCollection`1">
            <summary>
            A versatile collection class that can be easily extended.
            </summary>
            <typeparam name="T">
            The object type that the collection will contain.
            </typeparam>
            <remarks>
            Note to implementors: Override the <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.InsertItem(System.Int32,`0)"/>,
            <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>, <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.RemoveItem(System.Int32)"/>,
            <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.RemoveItems(System.Int32,System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.SetItem(System.Int32,`0)"/> methods to define
            custom behavior to execute when the collection is modified. If you need
            to raise events when the collection is modified, you should extend
            from <see cref="T:Geocortex.Core.Collections.EnhancedObservableCollection`1"/> instead.
            </remarks>
        </member>
        <member name="T:Geocortex.Core.ISettingsDeepCloneable">
            <summary>
            The ISettingsDeepCloneable interface allows classes to implement an
            extensible deep cloning pattern whereby each level in the inheritance
            hierarchy is responsible for cloning only those members that are
            specific to that level. Generally, this means a sub-class would override
            <see cref="M:Geocortex.Core.ISettingsDeepCloneable.CloneSettings(System.Object)"/> to clone only those fields and properties
            that are defined in that sub-class and would call the base class's
            implementation of <see cref="M:Geocortex.Core.ISettingsDeepCloneable.CloneSettings(System.Object)"/> to clone fields and
            properties inherited from the base class. Concrete classes at each level
            of the inheritance hierarchy must override
            <see cref="M:Geocortex.Core.ISettingsDeepCloneable.CreateInstance"/> to correctly instantiate a new instance
            of that class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.ISettingsDeepCloneable.CreateInstance">
            <summary>
            Creates an instance of the current object's
            <see cref="T:System.Type"/> which can then be populated with the
            cloned fields and properties of the current object using the
            <see cref="M:Geocortex.Core.ISettingsDeepCloneable.CloneSettings(System.Object)"/> method.
            </summary>
            <returns>
            An instance of the current object's <see cref="T:System.Type"/>.
            </returns>
            <remarks>
            Note to implementors: Generally, this method should do nothing more
            than construct a new instance of the current object's
            <see cref="T:System.Type"/> but not fill in any of the fields or
            properties; setting the fields and properties is the responsibility
            of the <see cref="M:Geocortex.Core.ISettingsDeepCloneable.CloneSettings(System.Object)"/> method.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.ISettingsDeepCloneable.CloneSettings(System.Object)">
            <summary>
            Deep clones the fields and properties of the current object and
            assigns them to the given <paramref name="clone"/> object.
            </summary>
            <param name="clone">The clone object.</param>
            <remarks>
            A note to implementors: Generally, the first call in a sub-class's
            implementation of this method should be to the base class's
            implementation of this method to have the base class fill in any
            fields or properties that are inherited from that class.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.EnhancedCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.EnhancedCollection`1"/>
            class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">
            The collection whose elements are copied to the new collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="collection"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.EnhancedCollection`1"/>
            class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The initial capacity of the new collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="capacity"/> is less than zero.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index
            of the first occurrence within the entire collection.
            </summary>
            <param name="item">
            The item to locate in the collection. The value can be null for reference
            types.
            </param>
            <returns>
            The zero-based index of the first occurrence of
            <paramref name="item"/> if found in the collection; otherwise, -1.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index
            of the first occurrence within the range of elements in the collection
            that extends from the specified index to the last element.
            </summary>
            <param name="item">
            The item to locate in the collection. The value can be null for reference
            types.
            </param>
            <param name="index">
            The zero-based starting index of the search.
            </param>
            <returns>
            The zero-based index of the first occurrence of
            <paramref name="item"/> within the range of elements in the collection
            that extends from index to the last element, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index"/> is outside the range of valid indexes
            for the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index
            of the first occurrence within the range of elements in the collection
            that starts at the specified index and contains the specified number
            of elements.
            </summary>
            <param name="item">
            The item to locate in the collection. The value can be null for reference
            types.
            </param>
            <param name="index">
            The zero-based starting index of the search.
            </param>
            <param name="count">
            The number of elements in the section to search.
            </param>
            <returns>
            The zero-based index of the first occurrence of
            <paramref name="item"/> within the range of elements in the collection
            that starts at index and contains <paramref name="count"/> number of
            elements, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is outside the range of valid indexes for
            the collection.
            -or-
            <paramref name="count"/> is less than 0.
            -or-
            <paramref name="index"/> and <paramref name="count"/> do not specify
            a valid range in the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be
            inserted.
            </param>
            <param name="item">
            The object to insert into the collection. The value can be null for
            reference types.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Geocortex.Core.Collections.EnhancedCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Geocortex.Core.Collections.EnhancedCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.Add(`0)">
            <summary>
            Adds an item to the end of the collection.
            </summary>
            <param name="item">
            The object to add to the collection. The value can be null for reference types.
            </param>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.Contains(`0)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">
            The object to locate in the collection.
            </param>
            <returns>
            true if <paramref name="item"/> is found in the collection; otherwise,
            false.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array,
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of
            the elements copied from the collection. The Array must have zero-based
            indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying
            begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="arrayIndex"/> is equal to or greater than the length
            of array.
            -or-
            The number of elements in the source collection is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the
            destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.CopyTo(`0[])">
            <summary>
            Copies the entire collection to a compatible one-dimensional array,
            starting at the beginning of the target array.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of
            the elements copied from the collection. The Array must have zero-based
            indexing.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source collection is greater than the number
            of elements that the destination <paramref name="array"/> can
            contain.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the collection to a compatible one-
            dimensional array, starting at the specified index of the target
            array.
            </summary>
            <param name="index">
            The zero-based index in the source collection at which copying begins.
            </param>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of
            the elements copied from the collection. The Array must have zero-based
            indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying
            begins.
            </param>
            <param name="count">The number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="arrayIndex"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> is equal to or greater than the
            <see cref="P:Geocortex.Core.Collections.EnhancedCollection`1.Count"/> of the source collection.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length
            of <paramref name="array"/>.
            -or-
            The number of elements from <paramref name="index"/> to the end of
            the source collection is greater than the available space from
            <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">
            The object to remove from the collection. The value can be null for
            reference types.
            </param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the
            collection; otherwise, false. This method also returns false if
            <paramref name="item"/> is not found in the collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can
            be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be
            used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the
            collection.
            </summary>
            <param name="collection">
            The collection whose elements should be added to the end of the
            collection. The collection itself cannot be null, but it can contain
            elements that are null, if type <typeparamref name="T"/> is a reference
            type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.AsReadOnly">
            <summary>
            Returns a read-only collection wrapper for the current collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>
            that acts as a read-only wrapper around the current collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.BinarySearch(`0)">
            <summary>
            Searches the entire sorted collection for an element using the default
            comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">
            The object to locate. The value can be null for reference types.
            </param>
            <returns>
            The zero-based index of <paramref name="item"/> in the sorted collection,
            if <paramref name="item"/> is found; otherwise, a negative number
            that is the bitwise complement of the index of the next element that
            is larger than <paramref name="item"/> or, if there is no larger
            element, the bitwise complement of <see cref="P:Geocortex.Core.Collections.EnhancedCollection`1.Count"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            cannot find an implementation of the
            <see cref="T:System.IComparable`1"/> generic interface or the
            <see cref="T:System.IComparable"/> interface for type
            <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted collection for an element using the specified
            comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">
            The object to locate. The value can be null for reference types.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/>
            implementation to use when comparing elements.
            -or-
            null to use the default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <returns>
            The zero-based index of <paramref name="item"/> in the sorted collection,
            if <paramref name="item"/> is found; otherwise, a negative number
            that is the bitwise complement of the index of the next element that
            is larger than <paramref name="item"/> or, if there is no larger
            element, the bitwise complement of <see cref="P:Geocortex.Core.Collections.EnhancedCollection`1.Count"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is null, and the default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            cannot find an implementation of the
            <see cref="T:System.IComparable`1"/> generic interface or the
            <see cref="T:System.IComparable"/> interface for type
            <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches a range of elements in the sorted collection for an element
            using the specified comparer and returns the zero-based index of the
            element.
            </summary>
            <param name="index">
            The zero-based starting index of the range to search.
            </param>
            <param name="count">The length of the range to search.</param>
            <param name="item">
            The object to locate. The value can be null for reference types.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/>
            implementation to use when comparing elements.
            -or-
            null to use the default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <returns>
            The zero-based index of <paramref name="item"/> in the sorted collection,
            if <paramref name="item"/> is found; otherwise, a negative number
            that is the bitwise complement of the index of the next element that
            is larger than <paramref name="item"/> or, if there is no larger
            element, the bitwise complement of <see cref="P:Geocortex.Core.Collections.EnhancedCollection`1.Count"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote
            a valid range in the collection.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is null, and the default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            cannot find an implementation of the
            <see cref="T:System.IComparable`1"/> generic interface or the
            <see cref="T:System.IComparable"/> interface for type
            <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts the elements in the current collection to another type, and
            returns a collection containing the converted elements.
            </summary>
            <typeparam name="TOutput">
            The type of the elements of the target collection.
            </typeparam>
            <param name="converter">
            A <see cref="T:System.Converter`2"/> delegate that converts each
            element from one type to another type.
            </param>
            <returns>
            A <see cref="T:Geocortex.Core.Collections.EnhancedCollection`1"/> of the target type containing
            the converted elements from the current collection.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="converter"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the collection contains elements that match the
            conditions defined by the specified predicate.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            true if the collection contains one or more elements that match the
            conditions defined by the specified predicate; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the first occurrence within the
            entire collection.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            The first element that matches the conditions defined by the
            specified predicate, if found; otherwise, the default value for type
            <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the
            specified predicate.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            A <see cref="T:Geocortex.Core.Collections.EnhancedCollection`1"/> containing all the elements
            that match the conditions defined by the specified predicate, if
            found; otherwise, an empty <see cref="T:Geocortex.Core.Collections.EnhancedCollection`1"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the zero-based index of the first
            occurrence within the entire collection.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            The zero-based index of the first occurrence of an element that
            matches the conditions defined by <paramref name="match"/>, if
            found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the zero-based index of the first
            occurrence within the range of elements in the collection that extends
            from the specified index to the last element.
            </summary>
            <param name="startIndex">
            The zero-based starting index of the search.
            </param>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            The zero-based index of the first occurrence of an element that
            matches the conditions defined by <paramref name="match"/>, if
            found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is outside the range of valid indexes
            for the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the zero-based index of the first
            occurrence within the range of elements in the collection that starts at
            the specified index and contains the specified number of elements.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            The zero-based index of the first occurrence of an element that
            matches the conditions defined by <paramref name="match"/>, if
            found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is outside the range of valid indexes
            for the collection.
            -or-
            <paramref name="count"/> is less than 0.
            -or-
            <paramref name="startIndex"/> and count do not specify a valid
            section in the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the last occurrence within the
            entire collection.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            The last element that matches the conditions defined by the
            specified predicate, if found; otherwise, the default value for
            type <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified
            predicate, and returns the zero-based index of the last occurrence within
            the entire collection.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            The zero-based index of the last occurrence of an element that matches the
            conditions defined by <paramref name="match"/>, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified
            predicate, and returns the zero-based index of the last occurrence within
            the range of elements in the collection that extends from the first
            element to the specified index.
            </summary>
            <param name="startIndex">
            The zero-based starting index of the backward search.
            </param>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            The zero-based index of the last occurrence of an element that matches the
            conditions defined by <paramref name="match"/>, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is outside the range of valid indexes for the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified
            predicate, and returns the zero-based index of the last occurrence within
            the range of elements in the collection that contains the specified number
            of elements and ends at the specified index.
            </summary>
            <param name="startIndex">
            The zero-based starting index of the backward search.
            </param>
            <param name="count">
            The number of elements in the section to search.
            </param>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            The zero-based index of the last occurrence of an element that matches the
            conditions defined by <paramref name="match"/>, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is outside the range of valid indexes
            for the collection.
            -or-
            <paramref name="count"/> is less than 0.
            -or-
            <paramref name="startIndex"/> and <paramref name="count"/> do not
            specify a valid section in the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the collection.
            </summary>
            <param name="action">
            The <see cref="T:System.Action`1"/> delegate to perform on each
            element of the collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source collection.
            </summary>
            <param name="index">
            The zero-based index at which the range starts.
            </param>
            <param name="count">The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the source collection.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote
            a valid range of elements in the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the collection at the specified
            index.
            </summary>
            <param name="index">
            The zero-based index at which the new elements should be inserted.
            </param>
            <param name="collection">
            The collection whose elements should be inserted into the collection. The
            collection itself cannot be null, but it can contain elements that
            are null, if type <typeparamref name="T"/> is a reference type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Geocortex.Core.Collections.EnhancedCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index
            of the last occurrence within the entire collection.
            </summary>
            <param name="item">
            The object to locate in the collection. The value can be null for
            reference types.
            </param>
            <returns>
            The zero-based index of the last occurrence of item within the
            entire collection, if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            last occurrence within the range of elements in the collection that
            extends from the first element to the specified index.
            </summary>
            <param name="item">
            The object to locate in the collection. The value can be null for
            reference types.
            </param>
            <param name="index">
            The zero-based starting index of the backward search.
            </param>
            <returns>
            The zero-based index of the last occurrence of item within the range of elements
            in the collection that extends from the first element to index, if found;
            otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is outside the range of valid indexes for
            the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            last occurrence within the range of elements in the collection that
            contains the specified number of elements and ends at the specified
            index.
            </summary>
            <param name="item">
            The object to locate in the collection. The value can be null for
            reference types.
            </param>
            <param name="index">
            The zero-based starting index of the backward search.
            </param>
            <param name="count">
            The number of elements in the section to search.
            </param>
            <returns>
            The zero-based index of the last occurrence of item within the range of elements
            in the collection that extends from the first element to index, if found;
            otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is outside the range of valid indexes for the collection.
            -or-
            <paramref name="count"/> is less than 0.
            -or-
            <paramref name="index"/> and <paramref name="count"/> do not specify
            a valid section in the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the elements that match the conditions defined by the
            specified predicate.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to remove.
            </param>
            <returns>The number of elements removed from the collection.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the collection.
            </summary>
            <param name="index">
            The zero-based starting index of the range of elements to remove.
            </param>
            <param name="count">
            The number of elements to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote
            a valid range of elements in the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire collection.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">
            The zero-based starting index of the range to reverse.
            </param>
            <param name="count">
            The number of elements in the range to reverse.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote
            a valid range of elements in the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.Sort">
            <summary>
            Sorts the elements in the entire collection using the default comparer.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            cannot find an implementation of the
            <see cref="T:System.IComparable`1"/> generic interface or the
            <see cref="T:System.IComparable"/> interface for type
            <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire collection using the specified comparer.
            </summary>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/>
            implementation to use when comparing elements.
            -or-
            null to use the default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is null, and the default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            cannot find an implementation of the
            <see cref="T:System.IComparable`1"/> generic interface or the
            <see cref="T:System.IComparable"/> interface for type
            <typeparamref name="T"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The implementation of <paramref name="comparer"/> caused an error
            during the sort. For example, <paramref name="comparer"/> might not
            return 0 when comparing an item with itself.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire collection using the specified
            <see cref="T:System.Comparison`1"/>.
            </summary>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> to use when comparing
            elements.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparison"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The implementation of <paramref name="comparison"/> caused an error
            during the sort. For example, <paramref name="comparison"/> might not
            return 0 when comparing an item with itself.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in collection using the
            specified comparer.
            </summary>
            <param name="index">
            The zero-based starting index of the range to sort.
            </param>
            <param name="count">
            The length of the range to sort.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/>
            implementation to use when comparing elements.
            -or-
            null to use the default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote
            a valid range of elements in the collection.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is null, and the default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            cannot find an implementation of the
            <see cref="T:System.IComparable`1"/> generic interface or the
            <see cref="T:System.IComparable"/> interface for type
            <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.ToArray">
            <summary>
            Copies the elements of the collection to a new array.
            </summary>
            <returns>
            An array containing copies of the elements of the collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the collection, if
            that number is less than a threshold value.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines whether every element in the collection matches the conditions
            defined by the specified predicate.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions to check against the elements.
            </param>
            <returns>
            true if every element in the collection matches the conditions defined by
            the specified predicate; otherwise, false. If the collection has no
            elements, the return value is true.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.Clone">
            <summary>
            Creates a deep clone of the current collection. This method will clone
            each individual item in the collection as long as all items in the collection
            are serializable or, alternately, all items implement
            <see cref="T:System.ICloneable"/>.
            </summary>
            <returns>
            A deep clone of the current collection.
            </returns>
            <remarks>
            The collection returned by this method will be of the same
            <see cref="T:System.Type"/> as the original collection.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.CloneSettings(System.Object)">
            <summary>
            Clones the fields and properties of the current object and assigns
            them to the given <paramref name="clone"/> object.
            </summary>
            <param name="clone">The clone object.</param>
            <remarks>
            A note to implementors: Generally, the first call in a sub-class's
            implementation of this method should be to the base class's
            implementation of this method to have the base class fill in any
            fields or properties that are inherited from that class.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="clone"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.Geocortex#Core#ISettingsDeepCloneable#CloneSettings(System.Object)">
            <summary>
            Clones the fields and properties of the current object and assigns
            them to the given <paramref name="clone"/> object.
            </summary>
            <param name="clone">The clone object.</param>
            <remarks>
            A note to implementors: Generally, the first call in a sub-class's
            implementation of this method should be to the base class's
            implementation of this method to have the base class fill in any
            fields or properties that are inherited from that class.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.CreateInstance">
            <summary>
            Creates a new instance of the current collection's
            <see cref="T:System.Type"/>. This method is used by the
            <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.Clone"/> method to create a new collection instance of the
            same <see cref="T:System.Type"/>.
            </summary>
            <returns>
            A new instance of the same <see cref="T:System.Type"/> as the
            current collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.Geocortex#Core#ISettingsDeepCloneable#CreateInstance">
            <summary>
            Creates an instance of the current object's
            <see cref="T:System.Type"/> which can then be populated with the
            cloned fields and properties of the current object using the
            <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.CloneSettings(System.Object)"/> method.
            </summary>
            <returns>
            An instance of the current object's <see cref="T:System.Type"/>.
            </returns>
            <remarks>
            Note to implementors: Generally, this method should do nothing more
            than construct a new instance of the current object's
            <see cref="T:System.Type"/> but not fill in any of the fields or
            properties; setting the fields and properties is the responsibility
            of the <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.CloneSettings(System.Object)"/> method.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.System#Collections#IList#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the collection; otherwise, -1.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional.
            -or-
            <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts the given element into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which to insert the item.
            </param>
            <param name="item">
            The item to insert. This can be null for reference types.
            </param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>, <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.RemoveItem(System.Int32)"/>,
            <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.RemoveItems(System.Int32,System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.SetItem(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Geocortex.Core.Collections.EnhancedCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the collection at the specified
            index.
            </summary>
            <param name="index">
            The zero-based index at which the new elements should be inserted.
            </param>
            <param name="collection">
            The collection whose elements should be inserted into the collection. The
            collection itself cannot be null, but it can contain elements that
            are null, if type <typeparamref name="T"/> is a reference type.
            </param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.InsertItem(System.Int32,`0)"/>, <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.RemoveItem(System.Int32)"/>,
            <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.RemoveItems(System.Int32,System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.SetItem(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Geocortex.Core.Collections.EnhancedCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.InsertItem(System.Int32,`0)"/>, <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>,
            <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.RemoveItems(System.Int32,System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.SetItem(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Geocortex.Core.Collections.EnhancedCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.RemoveItems(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the collection.
            </summary>
            <param name="index">
            The zero-based starting index of the range of elements to remove.
            </param>
            <param name="count">
            The number of elements to remove.
            </param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.InsertItem(System.Int32,`0)"/>, <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>,
            <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.RemoveItem(System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.SetItem(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote
            a valid range of elements in the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which to put the item.
            </param>
            <param name="item">
            The item to put at the specified index. This value may be null for
            reference types.
            </param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.InsertItem(System.Int32,`0)"/>, <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>,
            <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.RemoveItem(System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.EnhancedCollection`1.RemoveItems(System.Int32,System.Int32)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index"/> is less than 0 or greater than or equal
            to <see cref="P:Geocortex.Core.Collections.EnhancedCollection`1.Count"/>.
            </exception>
        </member>
        <member name="P:Geocortex.Core.Collections.EnhancedCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the item to return.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index"/> is less than 0 or greater than or equal
            to <see cref="P:Geocortex.Core.Collections.EnhancedCollection`1.Count"/>.
            </exception>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Geocortex.Core.Collections.EnhancedCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <param name="index">The index of the object to return.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index"/> is less than 0 or greater than or equal
            to <see cref="P:Geocortex.Core.Collections.EnhancedCollection`1.Count"/>.
            </exception>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Geocortex.Core.Collections.EnhancedCollection`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data
            structure can hold without resizing.
            </summary>
            <value>The collection capacity.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If setting this property to a value that is less than
            <see cref="P:Geocortex.Core.Collections.EnhancedCollection`1.Count"/>.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            If setting this property to a value that consumes more than the
            available amount of memory on the system.
            </exception>
        </member>
        <member name="P:Geocortex.Core.Collections.EnhancedCollection`1.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value></value>
            <returns>The number of elements contained in the collection.</returns>
        </member>
        <member name="P:Geocortex.Core.Collections.EnhancedCollection`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value></value>
            <returns>true if the collection has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Collections.EnhancedCollection`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the
            <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <value></value>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> has a fixed
            size; otherwise, false.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Collections.EnhancedCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value></value>
            <returns>
            true if the collection is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Collections.EnhancedCollection`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether the
            <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/>
            is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Collections.EnhancedCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the
            <see cref="T:System.Collections.Generic.ICollection`1"/> is
            read-only.
            </summary>
            <value>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/>
            is read-only; otherwise, false.
            </value>
        </member>
        <member name="P:Geocortex.Core.Collections.EnhancedCollection`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread safe).
            </summary>
            <value></value>
            <returns>
            true if access to the collection is synchronized (thread safe); otherwise,
            false.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Collections.EnhancedCollection`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the
            <see cref="T:System.Collections.ICollection"/> is synchronized
            (thread safe).
            </summary>
            <value>
            true if access to the <see cref="T:System.Collections.ICollection"/>
            is synchronized (thread safe); otherwise, false.
            </value>
        </member>
        <member name="P:Geocortex.Core.Collections.EnhancedCollection`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
            <value>
            An object that can be used to synchronize access to the collection.
            </value>
        </member>
        <member name="P:Geocortex.Core.Collections.EnhancedCollection`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the
            <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="T:Geocortex.Core.Collections.EnhancedObservableCollection`1">
            <summary>
            A versatile collection class that is easily extended and provides
            events that notify subscribers when the collection is modified.
            </summary>
            <typeparam name="T">
            The object type that the collection will contain.
            </typeparam>
            <remarks>
            Note to implementors: Override the <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.InsertItem(System.Int32,`0)"/>,
            <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>, <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.RemoveItem(System.Int32)"/>,
            <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.RemoveItems(System.Int32,System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.SetItem(System.Int32,`0)"/> methods to define
            custom behavior to execute when the collection is modified. If there
            is no need to receive event notifications when the collection is
            modified, consider using a <see cref="T:Geocortex.Core.Collections.EnhancedCollection`1"/> instead.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.EnhancedObservableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.EnhancedObservableCollection`1"/>
            class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">
            The collection whose elements are copied to the new collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="collection"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.EnhancedObservableCollection`1"/>
            class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The initial capacity of the new collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="capacity"/> is less than zero.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts the given element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which to insert the item.</param>
            <param name="item">The item to insert. This can be null for reference types.</param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>, <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.RemoveItem(System.Int32)"/>,
            <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.RemoveItems(System.Int32,System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.SetItem(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Geocortex.Core.Collections.EnhancedCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the collection at the specified
            index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the collection. The
            collection itself cannot be null, but it can contain elements that
            are null, if type <typeparamref name="T"/> is a reference type.</param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.InsertItem(System.Int32,`0)"/>, <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.RemoveItem(System.Int32)"/>,
            <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.RemoveItems(System.Int32,System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.SetItem(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Geocortex.Core.Collections.EnhancedCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.InsertItem(System.Int32,`0)"/>, <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>,
            <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.RemoveItems(System.Int32,System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.SetItem(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Geocortex.Core.Collections.EnhancedCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.RemoveItems(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the collection.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.InsertItem(System.Int32,`0)"/>, <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>,
            <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.RemoveItem(System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.SetItem(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote
            a valid range of elements in the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index at which to put the item.</param>
            <param name="item">The item to put at the specified index. This value may be null for
            reference types.</param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.InsertItem(System.Int32,`0)"/>, <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>,
            <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.RemoveItem(System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.RemoveItems(System.Int32,System.Int32)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index"/> is less than 0 or greater than or equal
            to <see cref="P:Geocortex.Core.Collections.EnhancedCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CollectionChanging"/> event.
            </summary>
            <param name="e">
            The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/>
            instance containing the event data.
            </param>
        </member>
        <member name="M:Geocortex.Core.Collections.EnhancedObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CollectionChanged"/> event.
            </summary>
            <param name="e">
            The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/>
            instance containing the event data.
            </param>
        </member>
        <member name="E:Geocortex.Core.Collections.EnhancedObservableCollection`1.CollectionChanging">
            <summary>
            The event that occurs before one or more items are added, inserted,
            removed or replace in the collection.
            </summary>
        </member>
        <member name="E:Geocortex.Core.Collections.EnhancedObservableCollection`1.CollectionChanged">
            <summary>
            The event that occurs after one or more items are added, inserted,
            removed or replaced in the collection.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Collections.FilterableCollection`1">
            <summary>
            A versatile collection class that supports filtering of the underlying data elements.
            </summary>
            <typeparam name="T">The object type that the collection will contain.</typeparam>
            <remarks>
            Note to implementors: Override the <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.InsertItem(System.Int32,`0)"/>,
            <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>, <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.RemoveItem(System.Int32)"/>,
            <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.RemoveItems(System.Int32,System.Int32)"/>, <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/> and <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.SetItem(System.Int32,`0)"/> methods
            to define custom behavior to execute when the collection is modified.
            If you need to raise events when the collection is modified, you should extend
            from <see cref="T:Geocortex.Core.Collections.FilterableObservableCollection`1"/> instead.
            </remarks>
        </member>
        <member name="T:Geocortex.Core.Collections.IFilterableCollection`1">
            <summary>
            Defines the properties and methods common to collections that support filtering for their underlying data elements.
            </summary>
            <typeparam name="T">The object type that the collection will contain.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Collections.IFilterableCollection`1.PassesFilter(`0)">
            <summary>
            Returns a value that indicates whether the specified item in
            the underlying collection belongs to the view.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            <c>true</c> if the specified item belongs to the view or 
            if there is not filter set on the collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.IFilterableCollection`1.PerformFiltering">
            <summary>
            Performs the filtering operation.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Collections.IFilterableCollection`1.CanFilter">
            <summary>
            Gets a value indicating whether this instance can filter.
            </summary>
            <value>
            <c>true</c> if this instance can filter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Geocortex.Core.Collections.IFilterableCollection`1.Filter">
            <summary>
            Gets or sets a method (in the form of a <see cref="T:System.Predicate`1"/>)
            that is used to determine whether an item is suitable for inclusion in 
            the collection view.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.FilterableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.FilterableCollection`1"/>
            class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">
            The collection whose elements are copied to the new collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="collection"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.FilterableCollection`1"/>
            class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The initial capacity of the new collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="capacity"/> is less than zero.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.PassesFilter(`0)">
            <summary>
            Returns a value that indicates whether the specified item in
            the underlying collection belongs to the view.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            <c>true</c> if the specified item belongs to the view or 
            if there is not filter set on the collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index
            of the first occurrence within the entire collection.
            </summary>
            <param name="item">
            The item to locate in the collection. The value can be null for reference
            types.
            </param>
            <returns>
            The zero-based index of the first occurrence of
            <paramref name="item"/> if found in the collection; otherwise, -1.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index
            of the first occurrence within the range of elements in the collection
            that extends from the specified index to the last element.
            </summary>
            <param name="item">
            The item to locate in the collection. The value can be null for reference
            types.
            </param>
            <param name="index">
            The zero-based starting index of the search.
            </param>
            <returns>
            The zero-based index of the first occurrence of
            <paramref name="item"/> within the range of elements in the collection
            that extends from index to the last element, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index"/> is outside the range of valid indexes
            for the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index
            of the first occurrence within the range of elements in the collection
            that starts at the specified index and contains the specified number
            of elements.
            </summary>
            <param name="item">
            The item to locate in the collection. The value can be null for reference
            types.
            </param>
            <param name="index">
            The zero-based starting index of the search.
            </param>
            <param name="count">
            The number of elements in the section to search.
            </param>
            <returns>
            The zero-based index of the first occurrence of
            <paramref name="item"/> within the range of elements in the collection
            that starts at index and contains <paramref name="count"/> number of
            elements, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is outside the range of valid indexes for
            the collection.
            -or-
            <paramref name="count"/> is less than 0.
            -or-
            <paramref name="index"/> and <paramref name="count"/> do not specify
            a valid range in the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which <paramref name="item"/> should be
            inserted.
            </param>
            <param name="item">
            The object to insert into the collection. The value can be null for
            reference types.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.Add(`0)">
            <summary>
            Adds an item to the end of the collection.
            </summary>
            <param name="item">
            The object to add to the collection. The value can be null for reference types.
            </param>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.Contains(`0)">
            <summary>
            Determines whether an element is in the collection.
            </summary>
            <param name="item">
            The object to locate in the collection.
            </param>
            <returns>
            true if <paramref name="item"/> is found in the collection; otherwise,
            false.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array,
            starting at the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of
            the elements copied from the collection. The Array must have zero-based
            indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying
            begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="arrayIndex"/> is equal to or greater than the length
            of array.
            -or-
            The number of elements in the source collection is greater than the
            available space from <paramref name="arrayIndex"/> to the end of the
            destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.CopyTo(`0[])">
            <summary>
            Copies the entire collection to a compatible one-dimensional array,
            starting at the beginning of the target array.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of
            the elements copied from the collection. The Array must have zero-based
            indexing.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source collection is greater than the number
            of elements that the destination <paramref name="array"/> can
            contain.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the collection to a compatible one-
            dimensional array, starting at the specified index of the target
            array.
            </summary>
            <param name="index">
            The zero-based index in the source collection at which copying begins.
            </param>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of
            the elements copied from the collection. The Array must have zero-based
            indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying
            begins.
            </param>
            <param name="count">The number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="arrayIndex"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> is equal to or greater than the
            <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/> of the source collection.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length
            of <paramref name="array"/>.
            -or-
            The number of elements from <paramref name="index"/> to the end of
            the source collection is greater than the available space from
            <paramref name="arrayIndex"/> to the end of the destination
            <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">
            The object to remove from the collection. The value can be null for
            reference types.
            </param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the
            collection; otherwise, false. This method also returns false if
            <paramref name="item"/> is not found in the collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can
            be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be
            used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the
            collection.
            </summary>
            <param name="collection">
            The collection whose elements should be added to the end of the
            collection. The collection itself cannot be null, but it can contain
            elements that are null, if type <typeparamref name="T"/> is a reference
            type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.AsReadOnly">
            <summary>
            Returns a read-only collection wrapper for the current collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>
            that acts as a read-only wrapper around the current collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.BinarySearch(`0)">
            <summary>
            Searches the entire sorted collection for an element using the default
            comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">
            The object to locate. The value can be null for reference types.
            </param>
            <returns>
            The zero-based index of <paramref name="item"/> in the sorted collection,
            if <paramref name="item"/> is found; otherwise, a negative number
            that is the bitwise complement of the index of the next element that
            is larger than <paramref name="item"/> or, if there is no larger
            element, the bitwise complement of <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            cannot find an implementation of the
            <see cref="T:System.IComparable`1"/> generic interface or the
            <see cref="T:System.IComparable"/> interface for type
            <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted collection for an element using the specified
            comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">
            The object to locate. The value can be null for reference types.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/>
            implementation to use when comparing elements.
            -or-
            null to use the default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <returns>
            The zero-based index of <paramref name="item"/> in the sorted collection,
            if <paramref name="item"/> is found; otherwise, a negative number
            that is the bitwise complement of the index of the next element that
            is larger than <paramref name="item"/> or, if there is no larger
            element, the bitwise complement of <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is null, and the default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            cannot find an implementation of the
            <see cref="T:System.IComparable`1"/> generic interface or the
            <see cref="T:System.IComparable"/> interface for type
            <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches a range of elements in the sorted collection for an element
            using the specified comparer and returns the zero-based index of the
            element.
            </summary>
            <param name="index">
            The zero-based starting index of the range to search.
            </param>
            <param name="count">The length of the range to search.</param>
            <param name="item">
            The object to locate. The value can be null for reference types.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/>
            implementation to use when comparing elements.
            -or-
            null to use the default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <returns>
            The zero-based index of <paramref name="item"/> in the sorted collection,
            if <paramref name="item"/> is found; otherwise, a negative number
            that is the bitwise complement of the index of the next element that
            is larger than <paramref name="item"/> or, if there is no larger
            element, the bitwise complement of <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote
            a valid range in the collection.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is null, and the default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            cannot find an implementation of the
            <see cref="T:System.IComparable`1"/> generic interface or the
            <see cref="T:System.IComparable"/> interface for type
            <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts the elements in the current collection to another type, and
            returns a collection containing the converted elements.
            </summary>
            <typeparam name="TOutput">
            The type of the elements of the target collection.
            </typeparam>
            <param name="converter">
            A <see cref="T:System.Converter`2"/> delegate that converts each
            element from one type to another type.
            </param>
            <returns>
            A <see cref="T:Geocortex.Core.Collections.EnhancedCollection`1"/> of the target type containing
            the converted elements from the current collection.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="converter"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the collection contains elements that match the
            conditions defined by the specified predicate.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            true if the collection contains one or more elements that match the
            conditions defined by the specified predicate; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the first occurrence within the
            entire collection.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            The first element that matches the conditions defined by the
            specified predicate, if found; otherwise, the default value for type
            <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the
            specified predicate.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            A <see cref="T:Geocortex.Core.Collections.EnhancedCollection`1"/> containing all the elements
            that match the conditions defined by the specified predicate, if
            found; otherwise, an empty <see cref="T:Geocortex.Core.Collections.EnhancedCollection`1"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the zero-based index of the first
            occurrence within the entire collection.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            The zero-based index of the first occurrence of an element that
            matches the conditions defined by <paramref name="match"/>, if
            found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the zero-based index of the first
            occurrence within the range of elements in the collection that extends
            from the specified index to the last element.
            </summary>
            <param name="startIndex">
            The zero-based starting index of the search.
            </param>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            The zero-based index of the first occurrence of an element that
            matches the conditions defined by <paramref name="match"/>, if
            found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is outside the range of valid indexes
            for the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the zero-based index of the first
            occurrence within the range of elements in the collection that starts at
            the specified index and contains the specified number of elements.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            The zero-based index of the first occurrence of an element that
            matches the conditions defined by <paramref name="match"/>, if
            found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is outside the range of valid indexes
            for the collection.
            -or-
            <paramref name="count"/> is less than 0.
            -or-
            <paramref name="startIndex"/> and count do not specify a valid
            section in the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the last occurrence within the
            entire collection.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            The last element that matches the conditions defined by the
            specified predicate, if found; otherwise, the default value for
            type <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified
            predicate, and returns the zero-based index of the last occurrence within
            the entire collection.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            The zero-based index of the last occurrence of an element that matches the
            conditions defined by <paramref name="match"/>, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified
            predicate, and returns the zero-based index of the last occurrence within
            the range of elements in the collection that extends from the first
            element to the specified index.
            </summary>
            <param name="startIndex">
            The zero-based starting index of the backward search.
            </param>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            The zero-based index of the last occurrence of an element that matches the
            conditions defined by <paramref name="match"/>, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is outside the range of valid indexes for the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified
            predicate, and returns the zero-based index of the last occurrence within
            the range of elements in the collection that contains the specified number
            of elements and ends at the specified index.
            </summary>
            <param name="startIndex">
            The zero-based starting index of the backward search.
            </param>
            <param name="count">
            The number of elements in the section to search.
            </param>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to search for.
            </param>
            <returns>
            The zero-based index of the last occurrence of an element that matches the
            conditions defined by <paramref name="match"/>, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is outside the range of valid indexes
            for the collection.
            -or-
            <paramref name="count"/> is less than 0.
            -or-
            <paramref name="startIndex"/> and <paramref name="count"/> do not
            specify a valid section in the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the collection.
            </summary>
            <param name="action">
            The <see cref="T:System.Action`1"/> delegate to perform on each
            element of the collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="action"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source collection.
            </summary>
            <param name="index">
            The zero-based index at which the range starts.
            </param>
            <param name="count">The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the source collection.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote
            a valid range of elements in the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the collection at the specified
            index.
            </summary>
            <param name="index">
            The zero-based index at which the new elements should be inserted.
            </param>
            <param name="collection">
            The collection whose elements should be inserted into the collection. The
            collection itself cannot be null, but it can contain elements that
            are null, if type <typeparamref name="T"/> is a reference type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index
            of the last occurrence within the entire collection.
            </summary>
            <param name="item">
            The object to locate in the collection. The value can be null for
            reference types.
            </param>
            <returns>
            The zero-based index of the last occurrence of item within the
            entire collection, if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            last occurrence within the range of elements in the collection that
            extends from the first element to the specified index.
            </summary>
            <param name="item">
            The object to locate in the collection. The value can be null for
            reference types.
            </param>
            <param name="index">
            The zero-based starting index of the backward search.
            </param>
            <returns>
            The zero-based index of the last occurrence of item within the range of elements
            in the collection that extends from the first element to index, if found;
            otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is outside the range of valid indexes for
            the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            last occurrence within the range of elements in the collection that
            contains the specified number of elements and ends at the specified
            index.
            </summary>
            <param name="item">
            The object to locate in the collection. The value can be null for
            reference types.
            </param>
            <param name="index">
            The zero-based starting index of the backward search.
            </param>
            <param name="count">
            The number of elements in the section to search.
            </param>
            <returns>
            The zero-based index of the last occurrence of item within the range of elements
            in the collection that extends from the first element to index, if found;
            otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is outside the range of valid indexes for the collection.
            -or-
            <paramref name="count"/> is less than 0.
            -or-
            <paramref name="index"/> and <paramref name="count"/> do not specify
            a valid section in the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the elements that match the conditions defined by the
            specified predicate.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions of the elements to remove.
            </param>
            <returns>The number of elements removed from the collection.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the collection.
            </summary>
            <param name="index">
            The zero-based starting index of the range of elements to remove.
            </param>
            <param name="count">
            The number of elements to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote
            a valid range of elements in the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire collection. This implementation always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range. This implementation always throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="index">
            The zero-based starting index of the range to reverse.
            </param>
            <param name="count">
            The number of elements in the range to reverse.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote
            a valid range of elements in the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.Sort">
            <summary>
            Sorts the elements in the entire collection using the default comparer.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            cannot find an implementation of the
            <see cref="T:System.IComparable`1"/> generic interface or the
            <see cref="T:System.IComparable"/> interface for type
            <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire collection using the specified comparer.
            </summary>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/>
            implementation to use when comparing elements.
            -or-
            null to use the default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is null, and the default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            cannot find an implementation of the
            <see cref="T:System.IComparable`1"/> generic interface or the
            <see cref="T:System.IComparable"/> interface for type
            <typeparamref name="T"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The implementation of <paramref name="comparer"/> caused an error
            during the sort. For example, <paramref name="comparer"/> might not
            return 0 when comparing an item with itself.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire collection using the specified
            <see cref="T:System.Comparison`1"/>.
            </summary>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> to use when comparing
            elements.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="comparison"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The implementation of <paramref name="comparison"/> caused an error
            during the sort. For example, <paramref name="comparison"/> might not
            return 0 when comparing an item with itself.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in collection using the
            specified comparer.
            </summary>
            <param name="index">
            The zero-based starting index of the range to sort.
            </param>
            <param name="count">
            The length of the range to sort.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/>
            implementation to use when comparing elements.
            -or-
            null to use the default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote
            a valid range of elements in the collection.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is null, and the default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            cannot find an implementation of the
            <see cref="T:System.IComparable`1"/> generic interface or the
            <see cref="T:System.IComparable"/> interface for type
            <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.ToArray">
            <summary>
            Copies the elements of the collection to a new array.
            </summary>
            <returns>
            An array containing copies of the elements of the collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the collection, if
            that number is less than a threshold value.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines whether every element in the collection matches the conditions
            defined by the specified predicate.
            </summary>
            <param name="match">
            The <see cref="T:System.Predicate`1"/> delegate that defines the
            conditions to check against the elements.
            </param>
            <returns>
            true if every element in the collection matches the conditions defined by
            the specified predicate; otherwise, false. If the collection has no
            elements, the return value is true.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.Clone">
            <summary>
            Creates a deep clone of the current collection. This method will clone
            each individual item in the collection as long as all items in the collection
            are serializable or, alternately, all items implement
            <see cref="T:System.ICloneable"/>.
            </summary>
            <returns>
            A deep clone of the current collection.
            </returns>
            <remarks>
            The collection returned by this method will be of the same
            <see cref="T:System.Type"/> as the original collection.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.CloneSettings(System.Object)">
            <summary>
            Clones the fields and properties of the current object and assigns
            them to the given <paramref name="clone"/> object.
            </summary>
            <param name="clone">The clone object.</param>
            <remarks>
            A note to implementors: Generally, the first call in a sub-class's
            implementation of this method should be to the base class's
            implementation of this method to have the base class fill in any
            fields or properties that are inherited from that class.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="clone"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.Geocortex#Core#ISettingsDeepCloneable#CloneSettings(System.Object)">
            <summary>
            Clones the fields and properties of the current object and assigns
            them to the given <paramref name="clone"/> object.
            </summary>
            <param name="clone">The clone object.</param>
            <remarks>
            A note to implementors: Generally, the first call in a sub-class's
            implementation of this method should be to the base class's
            implementation of this method to have the base class fill in any
            fields or properties that are inherited from that class.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.CreateInstance">
            <summary>
            Creates a new instance of the current collection's
            <see cref="T:System.Type"/>. This method is used by the
            <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.Clone"/> method to create a new collection instance of the
            same <see cref="T:System.Type"/>.
            </summary>
            <returns>
            A new instance of the same <see cref="T:System.Type"/> as the
            current collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.Geocortex#Core#ISettingsDeepCloneable#CreateInstance">
            <summary>
            Creates an instance of the current object's
            <see cref="T:System.Type"/> which can then be populated with the
            cloned fields and properties of the current object using the
            <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.CloneSettings(System.Object)"/> method.
            </summary>
            <returns>
            An instance of the current object's <see cref="T:System.Type"/>.
            </returns>
            <remarks>
            Note to implementors: Generally, this method should do nothing more
            than construct a new instance of the current object's
            <see cref="T:System.Type"/> but not fill in any of the fields or
            properties; setting the fields and properties is the responsibility
            of the <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.CloneSettings(System.Object)"/> method.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.System#Collections#IList#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the collection; otherwise, -1.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional.
            -or-
            <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts the given element into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which to insert the item.
            </param>
            <param name="item">
            The item to insert. This can be null for reference types.
            </param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>, <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.RemoveItem(System.Int32)"/>,
            <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.RemoveItems(System.Int32,System.Int32)"/>, <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.SetItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/> and <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.SetItem(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the collection at the specified
            index.
            </summary>
            <param name="index">
            The zero-based index at which the new elements should be inserted.
            </param>
            <param name="collection">
            The collection whose elements should be inserted into the collection. The
            collection itself cannot be null, but it can contain elements that
            are null, if type <typeparamref name="T"/> is a reference type.
            </param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.InsertItem(System.Int32,`0)"/>, <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.RemoveItem(System.Int32)"/>,
            <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.RemoveItems(System.Int32,System.Int32)"/>, <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.SetItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/> and <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.SetItem(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.InsertItem(System.Int32,`0)"/>, <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>,
            <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.RemoveItems(System.Int32,System.Int32)"/>, <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.SetItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/> and <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.SetItem(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is equal or greater than <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.RemoveItems(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the collection.
            </summary>
            <param name="index">
            The zero-based starting index of the range of elements to remove.
            </param>
            <param name="count">
            The number of elements to remove.
            </param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.InsertItem(System.Int32,`0)"/>, <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>,
            <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.RemoveItem(System.Int32)"/>, <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.SetItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/> and <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.SetItem(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote
            a valid range of elements in the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.GetItemAt(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The zero-based index at which to put the item.</param>
            <returns>
            The element at the specified index. This value may be null for
            reference types.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which to put the item.
            </param>
            <param name="item">
            The item to put at the specified index. This value may be null for
            reference types.
            </param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.InsertItem(System.Int32,`0)"/>, <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>,
            <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.RemoveItem(System.Int32)"/>, <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.RemoveItems(System.Int32,System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.SetItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index"/> is less than 0 or greater than or equal
            to <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.SetItems(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces a range of elements of the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based starting index at which the new elements should replace existing ones.
            </param>
            <param name="collection">
            The new items that are replacing the original items. The
            collection itself cannot be null, but it can contain elements that
            are null, if type <typeparamref name="T"/> is a reference type.
            </param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.InsertItem(System.Int32,`0)"/>, <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.RemoveItem(System.Int32)"/>,
            <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.RemoveItems(System.Int32,System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.FilterableCollection`1.SetItem(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is equal or greater than <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.PerformFiltering">
            <summary>
            Performs the filtering operation.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.PerformFiltering(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0},System.Predicate{`0})">
            <summary>
            Performs the filtering.
            </summary>
            <param name="input">The input list.</param>
            <param name="output">The output (filtered) list.</param>
            <param name="match">The filter to apply.</param>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.InvalidateCache">
            <summary>
            Invalidates the cache.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.DisableCacheReload">
            <summary>
            Disables the cache reload operation.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.EnableCacheReload">
            <summary>
            Enables the cache reload operation.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.ReloadCache">
            <summary>
            Reloads the cache.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.Refresh">
            <summary>
            Refreshes the filterable collection.  If the original collection is updated, then call this
            method so that the changes are propagated through to this collection.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.GetIndexAtSource(System.Int32)">
            <summary>
            Gets the element index on the source collection.
            </summary>
            <param name="index">The element index.</param>
            <returns>
            The element index on the source collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.GetRangeCountAtSource(System.Int32,System.Int32)">
            <summary>
            Gets the element count on the source collection.
            </summary>
            <param name="index">The element index.</param>
            <param name="count">The element count.</param>
            <returns>
            The element count on the source collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.GetIndexAtSource(System.Int32,System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
            <summary>
            Gets the element index on the source collection.
            </summary>
            <param name="index">The element index.</param>
            <param name="sourceList">The source list.</param>
            <param name="cachedList">The cached list.</param>
            <returns>
            The element index on the source collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableCollection`1.GetRangeCountAtSource(System.Int32,System.Int32,System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
            <summary>
            Gets the element count on the source collection.
            </summary>
            <param name="index">The element index.</param>
            <param name="count">The element count.</param>
            <param name="sourceList">The source list.</param>
            <param name="cachedList">The cached list.</param>
            <returns>
            The element count on the source collection.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.CollectionView">
            <summary>
            Gets the list of items that passed the filter.
            If you need to manipulate the underlying data, you should use 
            the <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Items"/> property instead.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.Items">
            <summary>
            Gets the underlying data elements.
            </summary>
            <value>The source items.</value>
            <remarks>
            Notes to Inheritors: This property is provided to allow direct access to 
            members of the <see cref="T:System.Collections.IList"/> that the <see cref="T:Geocortex.Core.Collections.FilterableCollection`1"/> hides.
            </remarks>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.CollectionViewInternal">
            <summary>
            Gets the list of items that passed the filter.
            If you need to manipulate the underlying data, you should use 
            the <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Items"/> property instead.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.ItemsInternal">
            <summary>
            Gets the underlying data elements.
            </summary>
            <value>The source.</value>
            <remarks>
            Notes to Inheritors: This property is provided to allow direct access to 
            members of the <see cref="T:System.Collections.IList"/> that the <see cref="T:Geocortex.Core.Collections.FilterableCollection`1"/> hides.
            </remarks>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.Filter">
            <summary>
            Gets or sets a method (in the form of a <see cref="T:System.Predicate`1"/>)
            that is used to determine whether an item is suitable for inclusion in 
            the collection view.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.CanFilter">
            <summary>
            Gets a value indicating whether this instance can filter.
            </summary>
            <value>
            <c>true</c> if this instance can filter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the item to return.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index"/> is less than 0 or greater than or equal
            to <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </exception>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <param name="index">The index of the object to return.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index"/> is less than 0 or greater than or equal
            to <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </exception>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data
            structure can hold without resizing.
            </summary>
            <value>The collection capacity.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If setting this property to a value that is less than
            <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            If setting this property to a value that consumes more than the
            available amount of memory on the system.
            </exception>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
            <value></value>
            <returns>The number of elements contained in the collection.</returns>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value></value>
            <returns>true if the collection has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the
            <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <value></value>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> has a fixed
            size; otherwise, false.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value></value>
            <returns>
            true if the collection is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether the
            <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/>
            is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the
            <see cref="T:System.Collections.Generic.ICollection`1"/> is
            read-only.
            </summary>
            <value>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/>
            is read-only; otherwise, false.
            </value>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized
            (thread safe).
            </summary>
            <value></value>
            <returns>
            true if access to the collection is synchronized (thread safe); otherwise,
            false.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the
            <see cref="T:System.Collections.ICollection"/> is synchronized
            (thread safe).
            </summary>
            <value>
            true if access to the <see cref="T:System.Collections.ICollection"/>
            is synchronized (thread safe); otherwise, false.
            </value>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
            <value>
            An object that can be used to synchronize access to the collection.
            </value>
        </member>
        <member name="P:Geocortex.Core.Collections.FilterableCollection`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the
            <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the
            <see cref="T:System.Collections.ICollection"/>.
            </value>
        </member>
        <member name="T:Geocortex.Core.Collections.FilterableObservableCollection`1">
            <summary>
            A versatile collection class that supports filtering of the underlying data elements
            and provides events that notify subscribers when the collection is modified.
            </summary>
            <typeparam name="T">
            The object type that the collection will contain.
            </typeparam>
            <remarks>
            Note to implementors: Override the <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.InsertItem(System.Int32,`0)"/>,
            <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>, <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.RemoveItem(System.Int32)"/>,
            <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.RemoveItems(System.Int32,System.Int32)"/>, <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/> and <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.SetItem(System.Int32,`0)"/> methods 
            to define custom behavior to execute when the collection is modified. 
            If there is no need to receive event notifications when the collection is
            modified, consider using a <see cref="T:Geocortex.Core.Collections.EnhancedCollection`1"/> instead.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.EnhancedObservableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.EnhancedObservableCollection`1"/>
            class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">
            The collection whose elements are copied to the new collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="collection"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableObservableCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Collections.EnhancedObservableCollection`1"/>
            class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The initial capacity of the new collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="capacity"/> is less than zero.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts the given element into the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which to insert the item.
            </param>
            <param name="item">
            The item to insert. This can be null for reference types.
            </param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>, <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.RemoveItem(System.Int32)"/>,
            <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.RemoveItems(System.Int32,System.Int32)"/>, <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.SetItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/> and <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.SetItem(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableObservableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the collection at the specified
            index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the collection. The
            collection itself cannot be null, but it can contain elements that
            are null, if type <typeparamref name="T"/> is a reference type.</param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.InsertItem(System.Int32,`0)"/>, <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.RemoveItem(System.Int32)"/>,
            <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.RemoveItems(System.Int32,System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.SetItem(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableObservableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.InsertItem(System.Int32,`0)"/>, <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>,
            <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.RemoveItems(System.Int32,System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.SetItem(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableObservableCollection`1.RemoveItems(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the collection.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.InsertItem(System.Int32,`0)"/>, <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>,
            <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.RemoveItem(System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.SetItem(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote
            a valid range of elements in the collection.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index at which to put the item.</param>
            <param name="item">The item to put at the specified index. This value may be null for
            reference types.</param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.InsertItem(System.Int32,`0)"/>, <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>,
            <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.RemoveItem(System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.RemoveItems(System.Int32,System.Int32)"/>.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index"/> is less than 0 or greater than or equal
            to <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableObservableCollection`1.SetItems(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces a range of elements of the collection at the specified index.
            </summary>
            <param name="index">
            The zero-based starting index at which the new elements should replace existing ones.
            </param>
            <param name="collection">
            The new items that are replacing the original items. The
            collection itself cannot be null, but it can contain elements that
            are null, if type <typeparamref name="T"/> is a reference type.
            </param>
            <remarks>
            Note to implementors: If you override this method, you should also
            override <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.InsertItem(System.Int32,`0)"/>, <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.RemoveItem(System.Int32)"/>,
            <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.RemoveItems(System.Int32,System.Int32)"/> and <see cref="M:Geocortex.Core.Collections.FilterableObservableCollection`1.SetItem(System.Int32,`0)"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is equal or greater than <see cref="P:Geocortex.Core.Collections.FilterableCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableObservableCollection`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CollectionChanging"/> event.
            </summary>
            <param name="e">
            The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/>
            instance containing the event data.
            </param>
        </member>
        <member name="M:Geocortex.Core.Collections.FilterableObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CollectionChanged"/> event.
            </summary>
            <param name="e">
            The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/>
            instance containing the event data.
            </param>
        </member>
        <member name="E:Geocortex.Core.Collections.FilterableObservableCollection`1.CollectionChanging">
            <summary>
            The event that occurs before one or more items are added, inserted,
            removed or replace in the collection.
            </summary>
        </member>
        <member name="E:Geocortex.Core.Collections.FilterableObservableCollection`1.CollectionChanged">
            <summary>
            The event that occurs after one or more items are added, inserted,
            removed or replaced in the collection.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Collections.ReadOnlyFilterableCollection`1">
            <summary>
            A read-only collection class that supports filtering of the underlying data elements.
            </summary>
            <typeparam name="T">The object type that the collection will contain.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Collections.ReadOnlyFilterableCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Geocortex.Core.Collections.ReadOnlyFilterableCollection`1"/> class.
            </summary>
            <param name="list">The list to wrap.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="list"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Collections.ReadOnlyFilterableCollection`1.WrapInFilterableCollection(System.Collections.Generic.IList{`0})">
            <summary>
            Wraps the original list in a filterable collection.
            </summary>
            <param name="list">The original list.</param>
            <returns>The filterable collection</returns>
        </member>
        <member name="M:Geocortex.Core.Collections.ReadOnlyFilterableCollection`1.PassesFilter(`0)">
            <summary>
            Returns a value that indicates whether the specified item in
            the underlying collection belongs to the view.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            <c>true</c> if the specified item belongs to the view or 
            if there is not filter set on the collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Collections.ReadOnlyFilterableCollection`1.PerformFiltering">
            <summary>
            Performs the filtering operation.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.ReadOnlyFilterableCollection`1.Refresh">
            <summary>
            Refreshes this collection.  If the underlying source collection is updated, this collection
            will not be automatically updated.  It is necessary to call this method after updating
            the underlying source collection, so that the changes will be propagated through to this collection.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Collections.ReadOnlyFilterableCollection`1.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance.
            Deep cloning implies that all object references (and any objects
            they may reference, and so on) will also be deep cloned.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Collections.ReadOnlyFilterableCollection`1.CanFilter">
            <summary>
            Gets a value indicating whether this instance can filter.
            </summary>
            <value>
            <c>true</c> if this instance can filter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Geocortex.Core.Collections.ReadOnlyFilterableCollection`1.Filter">
            <summary>
            Gets or sets a method (in the form of a <see cref="T:System.Predicate`1"/>)
            that is used to determine whether an item is suitable for inclusion in 
            the collection view.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="T:Geocortex.Core.ColorStringConverter">
            <summary>
            A converter which converts the string representation of a color (a well-known color name or hex
            value) to a color, and a <see cref="T:System.Drawing.Color"/> to a string (well-known color name if
            available, or the hex value).
            </summary>
        </member>
        <member name="T:Geocortex.Core.IObjectFormatConverter`2">
            <summary>
            Defines an interface that a class may implement to facilitate conversion
            between two different formats of the same object structure.
            </summary>
            <typeparam name="T1">The type of the first format.</typeparam>
            <typeparam name="T2">The type of the second format.</typeparam>
        </member>
        <member name="M:Geocortex.Core.IObjectFormatConverter`2.Convert(`1)">
            <summary>
            Converts the given <paramref name="input"/> to the target format.
            </summary>
            <param name="input">
            The input object in the original format.
            </param>
            <returns>
            A representation of <paramref name="input"/> in the target format.
            </returns>
        </member>
        <member name="M:Geocortex.Core.IObjectFormatConverter`2.Convert(`0)">
            <summary>
            Converts the given <paramref name="input"/> to the target format.
            </summary>
            <param name="input">
            The input object in the original format.
            </param>
            <returns>
            A representation of <paramref name="input"/> in the target format.
            </returns>
        </member>
        <member name="M:Geocortex.Core.ColorStringConverter.Convert(System.String)">
            <summary>
            Converts the given <paramref name="input"/> to the target format.  The input
            can be a well-known color name (see <see cref="T:System.Drawing.KnownColor"/>) or a
            hex value representing a color.  If this is a hex value, it must be prefixed with a
            "#" character.
            </summary>
            <param name="input">The input object in the original format.</param>
            <returns>
            A representation of <paramref name="input"/> in the target format.
            </returns>
            <exception cref="T:System.FormatException">
            If <paramref name="input"/> does not represent a valid
            <see cref="T:System.Drawing.Color"/>.
            </exception>
        </member>
        <member name="M:Geocortex.Core.ColorStringConverter.Convert(System.Drawing.Color)">
            <summary>
            Converts the given <paramref name="input"/> <see cref="T:System.Drawing.Color"/> to a string.
            If the color is represented by a well-known color name, then the string returned is the 
            color name (see <see cref="T:System.Drawing.KnownColor"/>).  Otherwise, the string returned is
            the hex value of the color, prefixed with a "#" character.
            </summary>
            <param name="input">The input object in the original format.</param>
            <returns>
            A representation of <paramref name="input"/> in the target format.
            </returns>
        </member>
        <member name="M:Geocortex.Core.ColorStringConverter.Convert(System.Drawing.Color,System.Boolean)">
            <summary>
            Converts the given <paramref name="input"/> <see cref="T:System.Drawing.Color"/> to a string.
            If the color is represented by a well-known color name, and <paramref name="forceHex"/> is false
            then the string returned is the color name (see <see cref="T:System.Drawing.KnownColor"/>).  Otherwise,
            the string returned is the hex value of the color, prefixed with a "#" character.
            </summary>
            <param name="input">The input object in the original format.</param>
            <param name="forceHex">if set to <c>true</c> the string returned will be a hex value even if
            it is converted from a well-known color name.</param>
            <returns>
            A representation of <paramref name="input"/> in the target format.
            </returns>
        </member>
        <member name="M:Geocortex.Core.ColorStringConverter.Convert(System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Converts the given <paramref name="input"/> <see cref="T:System.Drawing.Color"/> to a string.
            If the color is represented by a well-known color name, and <paramref name="forceHex"/> is false
            then the string returned is the color name (see <see cref="T:System.Drawing.KnownColor"/>).  Otherwise,
            the string returned is the hex value of the color, prefixed with a "#" character.
            </summary>
            <param name="input">The input object in the original format.</param>
            <param name="forceHex">if set to <c>true</c> the string returned will be a hex value even if
            it is converted from a well-known color name.</param>
            <param name="includeAlpha">if set to <c>true</c> the string will be a hex value, and it will include the alpha 
            component as the first two characters in the hex number.</param>
            <returns>
            A representation of <paramref name="input"/> in the target format.
            </returns>
        </member>
        <member name="T:Geocortex.Core.Extensions.DbCommandExtensions">
            <summary>
            Extension methods for DbCommands.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Extensions.DbCommandExtensions.ApplyDefaultSettings(System.Data.Common.DbCommand,System.String)">
            <summary>
            Applies default settings to the command.
            </summary>
            <param name="command">The command.</param>
            <param name="providerInvariantName">The invariant name of the provider for the given command.</param>
            <remarks>
            This method uses the "gcx.dbCommand.BindByName" app setting which holds a comma 
            delimited list of database provider invariant names. If the provided name matches 
            one of the configured names this method sets the <c>BindByName</c> property of the
            command to <c>true</c>.
            </remarks>
        </member>
        <member name="T:Geocortex.Core.Extensions.HttpExtensions">
            <summary>
            Extension methods for Http related objects.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Extensions.HttpExtensions.GetBase(System.Web.HttpContext)">
            <summary>
            Gets an HttpContextBase from an HttpContext.
            </summary>
            <param name="context">The context.</param>
            <returns>The HttpContextBase.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.HttpExtensions.GetBase(System.Web.HttpRequest)">
            <summary>
            Gets an HttpRequestBase from an HttpRequest.
            </summary>
            <param name="request">The request.</param>
            <returns>The HttpRequestBase.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.HttpExtensions.GetBase(System.Web.HttpResponse)">
            <summary>
            Gets a HttpResponseBase from an HttpResponse.
            </summary>
            <param name="response">The response.</param>
            <returns>The HttpResponseBase.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.HttpExtensions.GetBase(System.Web.SessionState.HttpSessionState)">
            <summary>
            Gets an HttpSessionStateBase from an HttpSessionState.
            </summary>
            <param name="session">The session.</param>
            <returns>The HttpSessionStateBase.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.HttpExtensions.GetApplicationUri(System.Web.HttpRequest)">
            <summary>
            Gets the application context URI, not including the current path and
            query string.
            (e.g., http://server:8101/Geocortex/Essentials).
            </summary>
            <param name="request">The HTTP request.</param>
            <returns>The application's URI.</returns>
            <remarks>
            This method uses server variables; thus, it respects port forwarding
            or reverse proxy servers which may have been configured for the
            requesting client.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="request"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Extensions.HttpExtensions.GetApplicationUri(System.Web.HttpRequestBase)">
            <summary>
            Gets the application context URI, not including the current path and
            query string.
            (e.g., http://server:8101/Geocortex/Essentials).
            </summary>
            <param name="request">The HTTP request.</param>
            <returns>The application's URI.</returns>
            <remarks>
            This method uses server variables; thus, it respects port forwarding
            or reverse proxy servers which may have been configured for the
            requesting client.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="request"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Extensions.HttpExtensions.GetApplicationUri(System.Web.HttpRequest,System.Boolean)">
            <summary>
            Gets the application context URI, not including the current path and
            query string.
            (e.g., http://server:8101/Geocortex/Essentials).
            </summary>
            <param name="request">The HTTP request.</param>
            <param name="useInternalUri">
            If set to <c>true</c> return the internal host and scheme; otherwise the
            external host and scheme are returned.
            </param>
            <returns>The application's URI.</returns>
            <remarks>
            This method uses server variables; thus, it respects port forwarding
            or reverse proxy servers which may have been configured for the
            requesting client.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="request"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Extensions.HttpExtensions.GetApplicationUri(System.Web.HttpRequestBase,System.Boolean)">
            <summary>
            Gets the application context URI, not including the current path and
            query string.
            (e.g., http://server:8101/Geocortex/Essentials).
            </summary>
            <param name="request">The HTTP request.</param>
            <param name="useInternalUri">
            If set to <c>true</c> return the internal host and scheme; otherwise the
            external host and scheme are returned.
            </param>
            <returns>The application's URI.</returns>
            <remarks>
            This method uses server variables; thus, it respects port forwarding
            or reverse proxy servers which may have been configured for the
            requesting client.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="request"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Extensions.HttpExtensions.GetUri(System.Web.HttpRequest,System.Boolean)">
            <summary>
            Gets the request URI.
            </summary>
            <param name="request">The request.</param>
            <param name="useInternalUri">
            If set to <c>true</c> return the internal host and scheme; otherwise the
            external host and scheme are returned.
            </param>
            <returns>The request URI.</returns>
            <remarks>
            This method uses server variables; thus, it respects port forwarding
            or reverse proxy servers which may have been configured for the
            requesting client.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="request"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Extensions.HttpExtensions.GetUri(System.Web.HttpRequestBase,System.Boolean)">
            <summary>
            Gets the request URI.
            </summary>
            <param name="request">The request.</param>
            <param name="useInternalUri">
            If set to <c>true</c> return the internal host and scheme; otherwise the
            external host and scheme are returned.
            </param>
            <returns>The request URI.</returns>
            <remarks>
            This method uses server variables; thus, it respects port forwarding
            or reverse proxy servers which may have been configured for the
            requesting client.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="request"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Extensions.HttpExtensions.GetUriScheme(System.Web.HttpRequest,System.Boolean)">
            <summary>
            Gets the request URI scheme.
            </summary>
            <param name="request">The HTTP request.</param>
            <param name="useInternalScheme">
            If set to <c>true</c> return the internal scheme; otherwise the external scheme is
            returned.
            </param>
            <returns>The request URI scheme.</returns>
            <remarks>
            This method uses server variables; thus, it respects port forwarding
            or reverse proxy servers which may have been configured for the
            requesting client.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="request"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Extensions.HttpExtensions.GetUriScheme(System.Web.HttpRequestBase,System.Boolean)">
            <summary>
            Gets the request URI scheme.
            </summary>
            <param name="request">The HTTP request.</param>
            <param name="useInternalScheme">
            If set to <c>true</c> return the internal scheme; otherwise the external scheme is
            returned.
            </param>
            <returns>The request URI scheme.</returns>
            <remarks>
            This method uses server variables; thus, it respects port forwarding
            or reverse proxy servers which may have been configured for the
            requesting client.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="request"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Extensions.HttpExtensions.GetUriHost(System.Web.HttpRequest,System.Boolean)">
            <summary>
            Gets the host from the current request, unless explicitly specified via
            application settings (web.config) variables.
            A "host" without any trailing port information implies the default port for
            the service requested; otherwise the host will contain a domain name or IP
            address followed by a ":" and the port.
            </summary>
            <param name="request">The HTTP request.</param>
            <param name="useInternalHost">
            If set to <c>true</c> return the internal host; otherwise the external host is
            returned.
            </param>
            <returns>
            The host, or null if the host can not be determined.
            </returns>
            <remarks>
            This method uses server variables; thus, it respects port forwarding,
            url rewriting or reverse proxy environments which may have been
            configured.
            The internal host and external host will be set to the values provided in
            the application variables "InternalHost" and "ExternalHost" respectively
            if explicitly defined in the web.config.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="request"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Extensions.HttpExtensions.GetUriHost(System.Web.HttpRequestBase,System.Boolean)">
            <summary>
            Gets the host from the current request, unless explicitly specified via
            application settings (web.config) variables.
            A "host" without any trailing port information implies the default port for
            the service requested; otherwise the host will contain a domain name or IP
            address followed by a ":" and the port.
            </summary>
            <param name="request">The HTTP request.</param>
            <param name="useInternalHost">
            If set to <c>true</c> return the internal host; otherwise the external host is
            returned.
            </param>
            <returns>
            The host, or null if the host can not be determined.
            </returns>
            <remarks>
            This method uses server variables; thus, it respects port forwarding,
            url rewriting or reverse proxy environments which may have been
            configured.
            The internal host and external host will be set to the values provided in
            the application variables "InternalHost" and "ExternalHost" respectively
            if explicitly defined in the web.config.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="request"/> is null.
            </exception>
        </member>
        <member name="T:Geocortex.Core.Extensions.UriExtensions">
            <summary>
            Extension helper methods for dealing with Uris.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Extensions.UriExtensions.AddPath(System.Uri,System.String)">
            <summary>
            Adds a path onto an existing URI.
            </summary>
            <param name="uri">The URI.</param>
            <param name="path">The path.</param>
            <returns>The new URI with the path added onto it.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.UriExtensions.GetScheme(System.String)">
            <summary>
            Gets the scheme for a URL.
            </summary>
            <param name="url">The URL.</param>
            <returns>The scheme of the URL.</returns>
        </member>
        <member name="T:Geocortex.Core.Reactive.ReactiveExtensions">
            <summary>
            Contains extension methods for observable sequences.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Reactive.ReactiveExtensions.SubscribeOnDefault``1(System.IObservable{``0})">
            <summary>
            Observes the on the default scheduler.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <returns>Returns an observable.</returns>
        </member>
        <member name="M:Geocortex.Core.Reactive.ReactiveExtensions.Take``1(System.IObservable{``0},System.Int32,System.TimeSpan)">
            <summary>
            Takes the given count first, and then however many after until the given delay.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="count">The count.</param>
            <param name="delay">The delay.</param>
            <returns>Returns the new observable sequence.</returns>
        </member>
        <member name="T:Geocortex.Core.Repositories.CacheBasedRepository`1">
            <summary>
            Cache based implementation of a repository.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="T:Geocortex.Core.IRepository`1">
            <summary>
            Generalization for retrieving and storing information.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Geocortex.Core.IRepository`1.Fetch(System.String)">
            <summary>
            Fetches the entity given the key.
            </summary>
            <param name="key">The key.</param>
            <returns>Returns the entity.</returns>
        </member>
        <member name="M:Geocortex.Core.IRepository`1.Store(System.String,`0)">
            <summary>
            Stores the specified entity.
            </summary>
            <param name="key">The key.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Geocortex.Core.IRepository`1.TryFetch(System.String,`0@)">
            <summary>
            Tries to get the entity.
            </summary>
            <param name="key">The key.</param>
            <param name="entity">The entity.</param>
            <returns>Returns true if the entity was returned.</returns>
        </member>
        <member name="M:Geocortex.Core.IRepository`1.Exists(System.String)">
            <summary>
            Tests if the entity exists indicated by the given key.
            </summary>
            <param name="key">The key.</param>
            <returns>Returns true if the entity exists.</returns>
        </member>
        <member name="M:Geocortex.Core.IRepository`1.Remove(System.String)">
            <summary>
            Deletes the entity with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>Returns true if the entity was removed.</returns>
        </member>
        <member name="M:Geocortex.Core.IRepository`1.Update``1(System.String)">
            <summary>
            Updates the specified value.
            </summary>
            <typeparam name="TMutable">The type of the mutable.</typeparam>
            <param name="key">The key.</param>
            <returns>
            Returns the disposable commit cookie.
            </returns>
        </member>
        <member name="M:Geocortex.Core.IRepository`1.TryUpdate``1(System.String,Geocortex.Core.ILock{``0}@)">
            <summary>
            Updates the specified value.
            </summary>
            <typeparam name="TMutable">The type of the mutable.</typeparam>
            <param name="key">The key.</param>
            <param name="entity">The entity.</param>
            <returns>
            Returns the disposable commit cookie.
            </returns>
        </member>
        <member name="M:Geocortex.Core.IRepository`1.Search``1(System.Object[])">
            <summary>
            Searches the repository given the arguments.
            </summary>
            <typeparam name="TMeta">The type of the meta.</typeparam>
            <param name="args">The arguments.</param>
            <returns>Returns the meta data.</returns>
        </member>
        <member name="T:Geocortex.Core.Repositories.IEntityCache">
            <summary>
            Interface for integrating entity caching.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Repositories.IEntityCache.Clear(System.String)">
            <summary>
            Clears the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>Returns true if the key was removed.</returns>
        </member>
        <member name="M:Geocortex.Core.Repositories.IEntityCache.Fetch(System.String)">
            <summary>
            Fetches the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>Returns the entity as a string.</returns>
        </member>
        <member name="M:Geocortex.Core.Repositories.IEntityCache.Fetch(System.String,System.String@)">
            <summary>
            Tries to fetch the value for the given key.
            </summary>
            <param name="key">The key.</param>
            <param name="tag">The tag.</param>
            <returns>
            Returns the entity as a string.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Repositories.IEntityCache.Store(System.String,System.String,System.DateTime)">
            <summary>
            Stores the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="entity">The entity.</param>
            <param name="expiry">The expiry.</param>
        </member>
        <member name="M:Geocortex.Core.Repositories.IEntityCache.GetTag(System.String)">
            <summary>
            Gets the tag.
            </summary>
            <param name="key">The key.</param>
            <returns>Returns the tag.</returns>
        </member>
        <member name="M:Geocortex.Core.Repositories.CacheBasedRepository`1.GetFile(System.String)">
            <summary>
            Gets the file.
            </summary>
            <param name="key">The key.</param>
            <returns>Returns the file.</returns>
        </member>
        <member name="M:Geocortex.Core.Repositories.CacheBasedRepository`1.Fetch(System.String)">
            <summary>
            Fetches the specified entity.
            </summary>
            <param name="key">The key.</param>
            <returns>Returns the entity.</returns>
        </member>
        <member name="M:Geocortex.Core.Repositories.CacheBasedRepository`1.Store(System.String,`0)">
            <summary>
            Stores the specified entity.
            </summary>
            <param name="key">The key.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Geocortex.Core.Repositories.CacheBasedRepository`1.TryFetch(System.String,`0@)">
            <summary>
            Attempts to fetch the entity given the key.
            </summary>
            <param name="key">The key.</param>
            <param name="entity">The entity.</param>
            <returns>Returns true if the entity was fetched.</returns>
        </member>
        <member name="M:Geocortex.Core.Repositories.CacheBasedRepository`1.Exists(System.String)">
            <summary>
            Determines if the entity exists given its key.
            </summary>
            <param name="key">The key.</param>
            <returns>Returns true if the entity exists.</returns>
        </member>
        <member name="M:Geocortex.Core.Repositories.CacheBasedRepository`1.Remove(System.String)">
            <summary>
            Removes the specified entity given its key.
            </summary>
            <param name="key">The key.</param>
            <returns>Returns true if the entity was removed.</returns>
        </member>
        <member name="M:Geocortex.Core.Repositories.CacheBasedRepository`1.Update``1(System.String)">
            <summary>
            Updates the specified key.
            </summary>
            <typeparam name="TMutable">The type of the mutable.</typeparam>
            <param name="key">The key.</param>
            <returns>Return the lock.</returns>
        </member>
        <member name="M:Geocortex.Core.Repositories.CacheBasedRepository`1.TryUpdate``1(System.String,Geocortex.Core.ILock{``0}@)">
            <summary>
            Tries the update.
            </summary>
            <typeparam name="TMutable">The type of the mutable.</typeparam>
            <param name="key">The key.</param>
            <param name="entity">The entity.</param>
            <returns>Return true if the update was successfully initiated.</returns>
        </member>
        <member name="M:Geocortex.Core.Repositories.CacheBasedRepository`1.Search``1(System.Object[])">
            <summary>
            Searches the specified arguments.
            </summary>
            <typeparam name="TMeta">The type of the meta.</typeparam>
            <param name="args">The arguments.</param>
            <returns>Return an observable sequence of search results.</returns>
        </member>
        <member name="P:Geocortex.Core.Repositories.CacheBasedRepository`1.Cache">
            <summary>
            Gets the cache.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Repositories.IExpires">
            <summary>
            Interface implemented by object wishing to indicate expiry.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Repositories.IExpires.Expiry">
            <summary>
            Gets the expiry.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Repositories.Pool`2">
            <summary>
            Collection that discards infrequently used values.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Repositories.Pool`2.SetLimit(System.Int32)">
            <summary>
            Sets the limit.
            </summary>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:Geocortex.Core.Repositories.Pool`2.TryFetch(`0,`1@)">
            <summary>
            Attempts to get the value given the key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>Returns true if the value was returned.</returns>
        </member>
        <member name="M:Geocortex.Core.Repositories.Pool`2.Store(`0,`1)">
            <summary>
            Stores the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Geocortex.Core.Repositories.Pool`2.Validate">
            <summary>
            Validates the pool.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Repositories.Pool`2.Limit">
            <summary>
            Gets the limit.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Repositories.WeakPool`1">
            <summary>
            Pool of weakly held items.
            </summary>
            <typeparam name="T">The type of item.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Repositories.WeakPool`1.#ctor(System.Func{`0},System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Repositories.WeakPool`1"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="maxAge">The maximum age.</param>
        </member>
        <member name="M:Geocortex.Core.Repositories.WeakPool`1.Fetch">
            <summary>
            Fetches an item.
            </summary>
            <returns>Returns the item.</returns>
        </member>
        <member name="M:Geocortex.Core.Repositories.WeakPool`1.Store(`0)">
            <summary>
            Stores the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:Geocortex.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Resources.CodedValueSchemaTweaker_CodeFieldAlias_Adorner">
            <summary>
              Looks up a localized string similar to (Code).
            </summary>
        </member>
        <member name="T:Geocortex.Core.IMutableComposite`1">
            <summary>
            Extends IComposite by allowing the children to be updated.
            </summary>
            <typeparam name="T">The type of children.</typeparam>
        </member>
        <member name="T:Geocortex.Core.IComposite`1">
            <summary>
            Provides a standardized means of accessing the children of a branch node in a tree like data structure.
            This is useful in conjunction with the extension methods that go along with this method.  Basically,
            by implementing this interface you get free functionality provided by the extension methods to do things
            like flatten a tree.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="P:Geocortex.Core.IComposite`1.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="M:Geocortex.Core.IMutableComposite`1.SetChildren(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the children.
            </summary>
            <param name="children">The children.</param>
        </member>
        <member name="T:Geocortex.Core.MutableCompositeExtensions">
            <summary>
            Extension methods for mutable composites.
            </summary>
        </member>
        <member name="M:Geocortex.Core.MutableCompositeExtensions.Filter``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Filters the composite - children are updated through the SetChildren method of IMutableComposite.
            </summary>
            <typeparam name="T">The type of children.</typeparam>
            <param name="items">The items.</param>
            <param name="filterFunction">The filter function.</param>
            <returns>The filtered hierarchal collection (tree).</returns>
        </member>
        <member name="M:Geocortex.Core.MutableCompositeExtensions.Filter``1(Geocortex.Core.IMutableComposite{``0},System.Predicate{``0})">
            <summary>
            Filters the composite - children are updated through the SetChildren method of IMutableComposite.
            </summary>
            <typeparam name="T">The type of children.</typeparam>
            <param name="item">The item.</param>
            <param name="filterFunction">The filter function.</param>
            <returns>
            The filtered hierarchal collection (tree).
            </returns>
        </member>
        <member name="T:Geocortex.Core.Serialization.TypeResolver">
            <summary>
            Data contract resolver for serializing discoverable types.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.TypeResolver.GetQualifiedName(System.Type)">
            <summary>
            Gets the name of the qualified.
            </summary>
            <param name="type">The type.</param>
            <returns>Returns the qualified name.</returns>
        </member>
        <member name="M:Geocortex.Core.Serialization.TypeResolver.GetSerializer(System.Xml.XmlReader)">
            <summary>
            Gets the serializer for the given type.
            </summary>
            <param name="reader">The reader.</param>
            <returns>Returns the serializer.</returns>
        </member>
        <member name="M:Geocortex.Core.Serialization.TypeResolver.GetSerializer(System.Type)">
            <summary>
            Gets the serializer for the given type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            Returns the serializer.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Serialization.TypeResolver.WriteObject(System.Xml.Serialization.XmlSerializer,System.IO.Stream,System.Object)">
            <summary>
            Gets the serializer for the given type.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="stream">The stream.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Geocortex.Core.Serialization.TypeResolver.WriteObject(System.Xml.Serialization.XmlSerializer,System.IO.TextWriter,System.Object)">
            <summary>
            Gets the serializer for the given type.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="writer">The writer.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Geocortex.Core.Serialization.TypeResolver.WriteObject(System.Xml.Serialization.XmlSerializer,System.Xml.XmlWriter,System.Object)">
            <summary>
            Gets the serializer for the given type.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="writer">The writer.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:Geocortex.Core.Serialization.XmlObject`1">
            <summary>
            Base functionality for objects source from XML.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Serialization.XmlObject`1.GetDefault(System.String)">
            <summary>
            Gets the default.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>Returns the default.</returns>
        </member>
        <member name="M:Geocortex.Core.Serialization.XmlObject`1.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns>Returns the object serialized.</returns>
        </member>
        <member name="M:Geocortex.Core.Serialization.XmlObject`1.Save(System.String)">
            <summary>
            Saves the specified file path.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>Returns the date/time of the save.</returns>
        </member>
        <member name="M:Geocortex.Core.Serialization.XmlObject`1.Deserialize(System.Xml.Linq.XNode)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="node">The node.</param>
            <returns>Return the object.</returns>
        </member>
        <member name="M:Geocortex.Core.Serialization.XmlObject`1.Load(System.String)">
            <summary>
            Loads the specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>
            Returns the object.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Serialization.XmlObject`1.BaseUri">
            <summary>
            Gets the base URI.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Tasks.AsyncProperty`1">
            <summary>
            Contains a value which may trigger asynchronous actions if changed.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Tasks.AsyncProperty`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Tasks.AsyncProperty`1"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Tasks.AsyncProperty`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Tasks.AsyncProperty`1"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
        </member>
        <member name="M:Geocortex.Core.Tasks.AsyncProperty`1.Pulse">
            <summary>
            Pulses this instance.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Tasks.AsyncProperty`1.WaitUnless``1(System.Func{`0,``0},System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Waits the unless.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="selector">The selector.</param>
            <param name="predicate">The predicate.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Returns a task which will yield the current value.</returns>
        </member>
        <member name="P:Geocortex.Core.Tasks.AsyncProperty`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:Geocortex.Core.UserProfiles.FileSystemProfilesStore">
            <summary>
             Acts as a file system user profile storage gateway whcih takes care of file system based user profile read and update
            </summary>
        </member>
        <member name="F:Geocortex.Core.UserProfiles.FileSystemProfilesStore.NameIdentifierClaimType">
            <summary>
            The claim type for name identifier
            </summary>
        </member>
        <member name="F:Geocortex.Core.UserProfiles.FileSystemProfilesStore.UserFileName">
            <summary>
            The user file name
            </summary>
        </member>
        <member name="M:Geocortex.Core.UserProfiles.FileSystemProfilesStore.UpdateProfile(System.String,System.String,System.IO.Stream)">
            <summary>
            Updates the profile using a stream.
            </summary>
            <param name="profileName">Name of the profile.</param>
            <param name="key">The key.</param>
            <param name="valueStream">The value stream.</param>
        </member>
        <member name="M:Geocortex.Core.UserProfiles.FileSystemProfilesStore.UpdateProfile(System.String,System.String,System.String)">
            <summary>
            Updates the profile.
            </summary>
            <param name="profileName">Name of the profile.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.Security.SecurityException">No user information can be collected.</exception>
        </member>
        <member name="M:Geocortex.Core.UserProfiles.FileSystemProfilesStore.GetUserFolderNameFromClaim(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets the user folder name from claim.
            </summary>
            <param name="principal">The principal.</param>
            <returns>The user folder name</returns>
        </member>
        <member name="M:Geocortex.Core.UserProfiles.FileSystemProfilesStore.GetUserProfile(System.String)">
            <summary>
            Gets the user profile.
            </summary>
            <param name="profileName">Name of the profile.</param>
            <returns>The user's profile</returns>
            <exception cref="T:System.Security.SecurityException">No user information can be collected.</exception>
        </member>
        <member name="M:Geocortex.Core.UserProfiles.FileSystemProfilesStore.GetProfileValue(System.String,System.String)">
            <summary>
            Gets the value of a user profile setting for a given key.
            </summary>
            <param name="profileName">Name of the profile.</param>
            <param name="key">The key.</param>
            <returns>The user profile value for the corresponding key.</returns>
        </member>
        <member name="M:Geocortex.Core.UserProfiles.FileSystemProfilesStore.GetProfileValueStream(System.String,System.String)">
            <summary>
            Gets the value, as a stream, of a user profile setting for a given key.
            </summary>
            <param name="profileName">Name of the profile.</param>
            <param name="key">The key.</param>
            <returns>The user profile value for the corresponding key.</returns>
        </member>
        <member name="P:Geocortex.Core.UserProfiles.FileSystemProfilesStore.RootFolder">
            <summary>
            Gets or sets the root folder.
            </summary>
            <value>
            The root folder.
            </value>
        </member>
        <member name="T:Geocortex.Core.Utilities.IOUtilities">
            <summary>
            Utility methods for IO.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Utilities.IOUtilities.TryDelete(System.String)">
            <summary>
            Tries to delete the file. Returns true if successful (or if the file does not exist), or false otherwise.
            </summary>
            <param name="file">The file to delete.</param>
            <returns>Returns true if successful (or if the file does not exist), or false otherwise</returns>
        </member>
        <member name="T:Geocortex.Core.WeakEntity`1">
            <summary>
            Maintains a weak reference to a well-known entity.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="M:Geocortex.Core.WeakEntity`1.Realize(System.Object,System.Func{`0})">
            <summary>
            Realizes the entity and returns the value.
            </summary>
            <param name="key">The key.</param>
            <param name="valueFactory">The value factory.</param>
            <returns>Returns the entity.</returns>
        </member>
        <member name="T:Geocortex.Core.Composition.CommonExtensions">
            <summary>
            Provides extension method for <see cref="T:Geocortex.Core.Composition.IConfigManager"/>.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Composition.CommonExtensions.Save``1(Geocortex.Core.Composition.IConfigManager,System.Object,``0[])">
            <summary>
            Saves the <paramref name="items"/> to <paramref name="configManager"/>.
            </summary>
            <typeparam name="TEntity">Type of <paramref name="items"/>.</typeparam>
            <param name="configManager">The config manager.</param>
            <param name="id">An id to be assigned while saving <paramref name="items"/> in <paramref name="configManager"/>.</param>
            <param name="items">Items that need be saved</param>
        </member>
        <member name="T:Geocortex.Core.Composition.GlobalPartAttribute">
            <summary>
            Defines the global part attributes.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Composition.IConfigLookup">
            <summary>
            Contains functionality for looking up configuration.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Composition.IConfigLookup.Load``1(System.Object)">
            <summary>
            Loads (or finds) the entity by the ID.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="id">The ID of said entity.</param>
            <returns>Returns the entity list.</returns>
        </member>
        <member name="T:Geocortex.Core.Composition.IConfigHelper">
            <summary>
            Allows modules to integrate with configuration.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Composition.IConfigHelper.LoadFromCache``1(System.Object)">
            <summary>
            Loads from cache.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="id">The id.</param>
            <returns>Return the loaded entities as IEnumerable of <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:Geocortex.Core.Composition.IConfigHelper.Load``1(System.Object)">
            <summary>
            Loads the configurations.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="id">The id.</param>
            <returns>Returns the loaded entities.</returns>
        </member>
        <member name="M:Geocortex.Core.Composition.IConfigHelper.Save``1(System.Object,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Saves the specified entities.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="id">The id.</param>
            <param name="items">The items.</param>
            <returns>Return the unsaved entities.</returns>
        </member>
        <member name="T:Geocortex.Core.Composition.LazyCollection`2">
            <summary>
            A collection of  collections.
            </summary>
            <typeparam name="T">The type of the family.</typeparam>
            <typeparam name="TMetadata">The type of the metadata.</typeparam>
        </member>
        <member name="T:Geocortex.Core.Composition.LazyFamily`2">
            <summary>
            A collection of  collections.
            </summary>
            <typeparam name="T">The type of the family.</typeparam>
            <typeparam name="TMetadata">The type of the metadata.</typeparam>
        </member>
        <member name="T:Geocortex.Core.Composition.DefaultCompositionService">
            <summary>
            Implements the IConfigManager interface.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Composition.IConfigManager">
            <summary>
            Contains functionality for exercising configuration.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Composition.IConfigManager.Load``1(System.Object)">
            <summary>
            Loads the configurations.
            </summary>
            <typeparam name="TEntity">The type of the entity to retrieve.</typeparam>
            <param name="id">The ID of said entity.</param>
            <returns>Returns all the matching items.</returns>
        </member>
        <member name="M:Geocortex.Core.Composition.IConfigManager.Save``1(System.Object,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Saves the configurations by name.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="id">The id.</param>
            <param name="items">The items.</param>
            <returns>
            Returns the configurations that were not stored.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Composition.IConfigManager.Validate">
            <summary>
            Updates the associated lookup.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Composition.DefaultCompositionService.Helpers">
            <summary>
            Gets the stores.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Composition.ExportForAttribute">
            <summary>
            Attributes a property for export.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Composition.ExportForAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Composition.ExportForAttribute"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Composition.ExportForAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Composition.ExportForAttribute"/> class.
            </summary>
            <param name="contractName">Name of the contract.</param>
        </member>
        <member name="M:Geocortex.Core.Composition.ExportForAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Composition.ExportForAttribute"/> class.
            </summary>
            <param name="contractType">Type of the contract.</param>
        </member>
        <member name="M:Geocortex.Core.Composition.ExportForAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Composition.ExportForAttribute"/> class.
            </summary>
            <param name="contractName">Name of the contract.</param>
            <param name="contractType">Type of the contract.</param>
        </member>
        <member name="P:Geocortex.Core.Composition.ExportForAttribute.ForType">
            <summary>
            Gets or sets which type this export is for.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Composition.ExtensibleComponent`1">
            <summary>
            An abstract class that provides an extensible base.
            </summary>
            <typeparam name="T">The type of extension.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Composition.ExtensibleComponent`1.OnImportsSatisfied">
            <summary>
            Called when a part's imports have been satisfied and it is safe to use.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Composition.ExtensibleComponent`1.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Composition.ExtensibleComponent`1.Extensions">
            <summary>
            Gets the extensions.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Composition.ExtensionCollection`1">
            <summary>
            Collection of extensions.
            </summary>
            <typeparam name="T">The type of associated object.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Composition.ExtensionCollection`1.Activate(`0)">
            <summary>
            Activates the extensions held by this collection.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:Geocortex.Core.Composition.IExtension`1">
            <summary>
            Implemented by components which should apply themselves to an extensible entity.
            </summary>
            <typeparam name="T">The type of the associated object.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Composition.IExtension`1.ApplyTo(`0)">
            <summary>
            Applies the extension to the entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:Geocortex.Core.Composition.IForTypeMetadata">
            <summary>
            Allows access to metadata for particular exports.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Composition.IForTypeMetadata.ForType">
            <summary>
            Gets the value indicating which type this export is for.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Composition.LazyCollection`1">
            <summary>
            A collection of  collections.
            </summary>
            <typeparam name="T">The type of the family.</typeparam>
        </member>
        <member name="T:Geocortex.Core.Composition.LazyFamily`1">
            <summary>
            A collection of  collections.
            </summary>
            <typeparam name="T">The type of the family.</typeparam>
        </member>
        <member name="T:Geocortex.Core.Composition.ModuleCatalog">
            <summary>
            Module catalog for composition.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Composition.ModuleCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
            <summary>
            Gets a collection of exports that match the conditions specified by the import definition.
            </summary>
            <param name="definition">Conditions that specify which exports to match.</param>
            <returns>
            A collection of exports that match the conditions specified by <paramref name="definition" />.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Composition.ModuleCatalog.GetCatalog">
            <summary>
            Gets the catalog.
            </summary>
            <returns>Returns the module default catalog.</returns>
        </member>
        <member name="M:Geocortex.Core.Composition.ModuleCatalog.GetCatalog(System.String)">
            <summary>
            Gets the catalog for the specified profile.
            </summary>
            <param name="profile">The profile.</param>
            <returns>Returns the module catalog.</returns>
        </member>
        <member name="M:Geocortex.Core.Composition.ModuleCatalog.GetGlobalExports">
            <summary>
            Gets the global exports.
            </summary>
            <returns>Returns the export provider for the global exports.</returns>
        </member>
        <member name="P:Geocortex.Core.Composition.ModuleCatalog.Parts">
            <summary>
            Gets the part definitions that are contained in the catalog.
            </summary>
            <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> objects that are contained in the <see cref="T:System.ComponentModel.Composition.Hosting.TypeCatalog" /> object.</returns>
        </member>
        <member name="P:Geocortex.Core.Composition.ModuleCatalog.Configs">
            <summary>
            Gets the config lookup.
            </summary>
            <returns>Returns the lookup for mapping types to configuration values.</returns>
        </member>
        <member name="T:Geocortex.Core.Composition.ModuleConfigImporter">
            <summary>
            Imports configuration and with recomposition allowed.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Composition.ModuleConfigImporter.OnImportsSatisfied(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Called when a part's imports have been satisfied and it is safe to use.
            </summary>
            <param name="configs">The configs.</param>
        </member>
        <member name="P:Geocortex.Core.Composition.ModuleConfigImporter.Lookup">
            <summary>
            Gets the config lookup.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Composition.ModuleContainer">
            <summary>
            Composition container for modules.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Composition.ModuleContainer.#cctor">
            <summary>
            Initializes the <see cref="T:Geocortex.Core.Composition.ModuleContainer"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Composition.ModuleContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Composition.ModuleContainer"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Composition.ModuleContainer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Composition.ModuleContainer"/> class.
            </summary>
            <param name="profile">The profile.</param>
        </member>
        <member name="M:Geocortex.Core.Composition.ModuleContainer.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Composition.ModuleContainer"/> class.
            </summary>
            <param name="profile">The profile.</param>
            <param name="isThreadSafe">if set to <c>true</c> [is thread safe].</param>
        </member>
        <member name="P:Geocortex.Core.Composition.ModuleContainer.Default">
            <summary>
            Gets the container.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Composition.ModuleNamespaceAttribute">
            <summary>
            Applied to assemblies which offer modules given a particular namespace.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Composition.ModuleNamespaceAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Composition.ModuleNamespaceAttribute"/> class.
            </summary>
            <param name="clrNamespace">The CLRNS.</param>
            <param name="xmlNamespace">The XMLNS.</param>
        </member>
        <member name="P:Geocortex.Core.Composition.ModuleNamespaceAttribute.ClrNamespace">
            <summary>
            Gets the CLR namespace.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Composition.ModuleNamespaceAttribute.XmlNamespace">
            <summary>
            Gets the XML namespace.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Composition.StandaloneCompositionBasedComponent`1">
            <summary>
            Component base implementation that requires composition.
            </summary>
            <typeparam name="T">The type of the extension.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Composition.StandaloneCompositionBasedComponent`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Geocortex.Core.Composition.StandaloneCompositionBasedComponent`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Composition.StandaloneCompositionBasedComponent`1"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Composition.StandaloneCompositionBasedComponent`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Composition.StandaloneCompositionBasedComponent`1"/> class.
            </summary>
            <param name="profile">The profile.</param>
        </member>
        <member name="M:Geocortex.Core.Composition.StandaloneCompositionBasedComponent`1.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Composition.StandaloneCompositionBasedComponent`1"/> class.
            </summary>
            <param name="profile">The profile.</param>
            <param name="isThreadSafe">if set to <c>true</c> [is thread safe].</param>
        </member>
        <member name="M:Geocortex.Core.Composition.StandaloneCompositionBasedComponent`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Composition.StandaloneCompositionBasedComponent`1.Container">
            <summary>
            Gets the composition  container.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Conversion.CommonExtensions">
            <summary>
            Basic tools for formatting using the conversion specified.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Conversion.CommonExtensions.ConvertTo(Geocortex.Core.Conversion.ITypeConverterProvider,System.Object,System.Type)">
            <summary>
            Converts the specified value to the indicated type.
            </summary>
            <param name="conversion">The conversion.</param>
            <param name="value">The value.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>Returns the converted value.</returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.CommonExtensions.ConvertToInvariant(Geocortex.Core.Conversion.ITypeConverterProvider,System.Object,System.Type)">
            <summary>
            Converts the specified value to the indicated type.
            </summary>
            <param name="conversion">The conversion.</param>
            <param name="value">The value.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>Returns the converted value.</returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.CommonExtensions.ConvertTo``1(Geocortex.Core.Conversion.ITypeConverterProvider,System.Object)">
            <summary>
            Converts the specified value to the given type.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="conversion">The conversion.</param>
            <param name="value">The value.</param>
            <returns>Returns the target value.</returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.CommonExtensions.ConvertToInvariant``1(Geocortex.Core.Conversion.ITypeConverterProvider,System.Object)">
            <summary>
            Converts the specified value to the given type.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="conversion">The conversion.</param>
            <param name="value">The value.</param>
            <returns>Returns the target value.</returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.CommonExtensions.Format(Geocortex.Core.Conversion.ITypeConverterProvider,System.Object)">
            <summary>
            Formats the specified value using the conversion.
            </summary>
            <param name="conversion">The conversion.</param>
            <param name="value">The value.</param>
            <returns>Returns the formatted value.</returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.CommonExtensions.FormatInvariant(Geocortex.Core.Conversion.ITypeConverterProvider,System.Object)">
            <summary>
            Formats the specified value using the conversion.
            </summary>
            <param name="conversion">The conversion.</param>
            <param name="value">The value.</param>
            <returns>Returns the formatted value.</returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.CommonExtensions.Format(Geocortex.Core.Conversion.ITypeConverterProvider,System.Object,System.Type)">
            <summary>
            Converts the value to the specified type and then formats the converted value.
            </summary>
            <param name="conversion">The conversion.</param>
            <param name="value">The value.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>Returns the formatted value.</returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.CommonExtensions.FormatInvariant(Geocortex.Core.Conversion.ITypeConverterProvider,System.Object,System.Type)">
            <summary>
            Converts the value to the specified type and then formats the converted value.
            </summary>
            <param name="conversion">The conversion.</param>
            <param name="value">The value.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>Returns the formatted value.</returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.CommonExtensions.Format``1(Geocortex.Core.Conversion.ITypeConverterProvider,System.Object)">
            <summary>
            Converts the value to the specified type and then formats the converted value.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="conversion">The conversion.</param>
            <param name="value">The value.</param>
            <returns>Returns the formatted value.</returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.CommonExtensions.FormatInvariant``1(Geocortex.Core.Conversion.ITypeConverterProvider,System.Object)">
            <summary>
            Converts the value to the specified type and then formats the converted value.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="conversion">The conversion.</param>
            <param name="value">The value.</param>
            <returns>Returns the formatted value.</returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.CommonExtensions.GetStandardForm(System.TimeZoneInfo)">
            <summary>
            Gets the standard form.
            </summary>
            <param name="tz">The time zone.</param>
            <returns>Returns the new time zone.</returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.CommonExtensions.GetDaylightForm(System.TimeZoneInfo)">
            <summary>
            Gets the daylight form.
            </summary>
            <param name="tz">The time zone.</param>
            <returns>Returns the new time zone.</returns>
        </member>
        <member name="T:Geocortex.Core.Conversion.StandardConversion">
            <summary>
            Implements standard conversion for rendering data based on various ISO standards.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Conversion.ITypeConverterProvider">
            <summary>
            Interface that provides support for converting values.
            </summary>
            <remarks>
            Implemented by a conversion strategy for values. 
            </remarks>
        </member>
        <member name="M:Geocortex.Core.Conversion.ITypeConverterProvider.GetConverter(System.Object)">
            <summary>
            Gets the converter for a specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            Returns the TypeConverter.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.ITypeConverterProvider.GetConverter(System.Type)">
            <summary>
            Gets the converter for a specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            Returns the TypeConverter.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.StandardConversion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Conversion.StandardConversion"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Conversion.StandardConversion.#ctor(System.Globalization.CultureInfo,System.TimeZoneInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Conversion.StandardConversion"/> class.
            </summary>
            <param name="culture">The culture.</param>
            <param name="timeZone">The time zone.</param>
        </member>
        <member name="M:Geocortex.Core.Conversion.StandardConversion.GetConverter(System.Object)">
            <summary>
            Gets the converter for a specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            Returns the TypeConverter.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.StandardConversion.GetConverter(System.Type)">
            <summary>
            Gets the converter for a specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            Returns the TypeConverter.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.StandardConversion.GetFormat(System.Type)">
            <summary>
            Returns an object that provides formatting services for the specified type.
            </summary>
            <param name="formatType">An object that specifies the type of format object to return.</param>
            <returns>
            An instance of the object specified by <paramref name="formatType" />, if the <see cref="T:System.IFormatProvider" /> implementation can supply that type of object; otherwise, null.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Conversion.StandardConversion.Default">
            <summary>
            Gets the default standard conversion.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Conversion.StandardConversion.TimeZoneLookup">
            <summary>
            Gets the time zone lookup.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Conversion.StandardConversion.Epoch">
            <summary>
            Gets or sets the "standard" EPOCH.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Conversion.StandardConversion.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Conversion.StandardConversion.TimeZone">
            <summary>
            Gets or sets the time zone.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Email.Mailer">
            <summary>
            The base class for a mailer.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Email.Mailer.Send">
            <summary>
            Sends the message.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Email.Mailer.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance.
            Deep cloning implies that all object references (and any objects
            they may reference, and so on) will also be deep cloned.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Email.Mailer.Subject">
            <summary>
            Gets or sets the message subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="P:Geocortex.Core.Email.Mailer.FromAddress">
            <summary>
            Gets or sets the From address.
            </summary>
            <value>From address.</value>
        </member>
        <member name="P:Geocortex.Core.Email.Mailer.ToAddress">
            <summary>
            Gets or sets the To address.
            </summary>
            <value>To address.</value>
        </member>
        <member name="P:Geocortex.Core.Email.Mailer.Message">
            <summary>
            Gets or sets the message content.
            </summary>
            <value>The message content.</value>
        </member>
        <member name="T:Geocortex.Core.Email.SmtpMailer">
            <summary>
            SmtpMailer sends an email message via the configured SMTP server.
            If the supplied host is null or empty, this class attempts to used the defaults configured in 
            web.config.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Email.SmtpMailer.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Constructs an SmtpMailer using the given parameters.
            </summary>
            <param name="host">The SMTP server host.</param>
            <param name="port">The SMTP server port.</param>
            <param name="username">The SMTP server user name.</param>
            <param name="password">The SMTP server password.</param>
        </member>
        <member name="M:Geocortex.Core.Email.SmtpMailer.#ctor(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Constructs an SmtpMailer using the given parameters.
            </summary>
            <param name="host">The SMTP server host.</param>
            <param name="port">The SMTP server port.</param>
            <param name="username">The SMTP server user name.</param>
            <param name="password">The SMTP server password.</param>
            <param name="enableSsl">Indicator for enabling SSL.</param>
        </member>
        <member name="M:Geocortex.Core.Email.SmtpMailer.Send">
            <summary>
            Send an email message.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Email.SmtpMailer.SendCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Handles the complete event from sending the email. If there's a failure, attempts to send one more time and gives up.
            </summary>
            <param name="sender">The SmtpClient that generated this event.</param>
            <param name="args">An AsyncCompletedEventArgs instance.</param>
        </member>
        <member name="T:Geocortex.Core.Email.SmtpSettings">
            <summary>
            Contains settings for an SMTP server.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Email.SmtpSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Email.SmtpSettings"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Email.SmtpSettings.GetMailer">
            <summary>
            Gets the mailer based on the SMTP settings.
            </summary>
            <returns>A <see cref="T:Geocortex.Core.Email.Mailer"/>.</returns>
        </member>
        <member name="M:Geocortex.Core.Email.SmtpSettings.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance.
            Deep cloning implies that all object references (and any objects
            they may reference, and so on) will also be deep cloned.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Email.SmtpSettings.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:Geocortex.Core.Email.SmtpSettings.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:Geocortex.Core.Email.SmtpSettings.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:Geocortex.Core.Email.SmtpSettings.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:Geocortex.Core.Email.SmtpSettings.UseSsl">
            <summary>
            Gets or sets a value indicating whether or not to use SSL.
            </summary>
            <value>True or False.</value>
        </member>
        <member name="T:Geocortex.Core.Encryption">
            <summary>
            Utility methods for performing encryption.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Encryption.AesEncrypt(System.String)">
            <summary>
            Encrypts using the Advanced Encryption Standard (AES) algorithm and encodes the result using base64 encoding.
            </summary>
            <param name="plainText">The plain text to encrypt.</param>
            <returns>Base 64 encoded cipher bytes.</returns>
        </member>
        <member name="M:Geocortex.Core.Encryption.RijndaelEncrypt(System.String)">
            <summary>
            Encrypts using the Rijndael algorithm and encodes the result using base64 encoding.
            </summary>
            <param name="plainText">The plain text to encrypt.</param>
            <returns>Base 64 encoded cipher bytes.</returns>
            <exception cref="T:System.InvalidOperationException">
            If the Windows security policy setting for Federal Information Processing Standards (FIPS)-compliant algorithms is enabled.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Encryption.AesDecrypt(System.String)">
            <summary>
            Decrypts using the Advanced Encryption Standard (AES) algorithm.
            </summary>
            <param name="cipherText">The cipher text, AES encrypted bytes encoded in base 64.</param>
            <returns>The original string.</returns>
        </member>
        <member name="M:Geocortex.Core.Encryption.RijndaelDecrypt(System.String)">
            <summary>
            Decrypts using the Rijndael algorithm.
            </summary>
            <param name="cipherText">The cipher text, Rijndael encrypted bytes encoded in base 64.</param>
            <returns>The original string.</returns>
            <exception cref="T:System.InvalidOperationException">
            If the Windows security policy setting for Federal Information Processing Standards (FIPS)-compliant algorithms is enabled.
            </exception>
        </member>
        <member name="T:Geocortex.Core.Extensions.CollectionExtensions">
            <summary>
            Extension methods for collections.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Extensions.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a range of items to a collection.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="source">The source.</param>
            <param name="itemsToAdd">The items to add.</param>
        </member>
        <member name="M:Geocortex.Core.Extensions.CollectionExtensions.TryGetValue(System.Collections.Specialized.NameValueCollection,System.String,System.String@)">
            <summary>
            Tries to get the value from a NameValueCollection and returns true or false if successful.
            </summary>
            <param name="collection">The collection.</param>
            <param name="key">The key.</param>
            <param name="val">The value.</param>
            <returns><c>true</c> if the item was retrieved from the collection; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.CollectionExtensions.ParseQueryString(System.String)">
            <summary>
            Parses a string in query string format into a NameValueCollection.
            </summary>
            <param name="queryString">The query string. e.g. "key1=value1&amp;key2=value2&amp;key3=value3".</param>
            <returns>The resulting NameValueCollection.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.CollectionExtensions.ToQueryString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Encodes a NameValueCollection into query string format.
            </summary>
            <param name="collection">The collection.</param>
            <returns>The query string encoded result. e.g. "key1=value1&amp;key2=value2&amp;key3=value3".</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.CollectionExtensions.GetSequenceKey``1(System.Collections.Generic.IEnumerable{``0},System.Object)">
            <summary>
            Gets sequence key by applying an accumulator over a sequence, the specified seed value is used as the initialize accumulator value.
            </summary>
            <typeparam name="T">Type of the sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="seed">The seed value.</param>
            <returns>A sequence key.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.CollectionExtensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Converts a NameValueCollection to a dictionary.
            </summary>
            <param name="collection">The collection.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.CollectionExtensions.GetValueIgnoreCase(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Gets the value of the first item in the collection that matches the key, irrespective 
            of the case in the key.
            </summary>
            <param name="collection">The collection.</param>
            <param name="key">The key.</param>
            <returns>The key (with the actual case of the item in the collection) and the value of the first match.</returns>
        </member>
        <member name="T:Geocortex.Core.Extensions.DateTimeExtensions">
            <summary>
            Extension methods for the DateTime class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Extensions.DateTimeExtensions.FromEpochTicks(System.Int64)">
            <summary>
            Creates a DateTime from the epoch ticks.
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>The DateTime.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.DateTimeExtensions.FromEpochMilliseconds(System.Int64)">
            <summary>
            Creates a DateTime from the epoch milliseconds.
            </summary>
            <param name="milliseconds">The milliseconds.</param>
            <returns>The DateTime.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.DateTimeExtensions.ToEpochTicks(System.DateTime)">
            <summary>
            Converts the DateTime to ticks since the epoch.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>The number of ticks since the epoch.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.DateTimeExtensions.ToEpochMilliseconds(System.DateTime)">
            <summary>
            Converts the DateTime to milliseconds since the epoch.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>The number of milliseconds since the epoch.</returns>
        </member>
        <member name="T:Geocortex.Core.DeepCloneHelper">
            <summary>
            A helper class for performing a deep clone of an object.
            </summary>
        </member>
        <member name="M:Geocortex.Core.DeepCloneHelper.Clone``1(``0)">
            <summary>
            Deep clones the specified source object by serializing it to memory
            then deserializing it back into an object of the same type.
            </summary>
            <typeparam name="T">
            The type of object that is to be cloned.
            </typeparam>
            <param name="source">The object to clone.</param>
            <returns>A deep clone of the source object.</returns>
            <remarks>
            Because this method uses serialization to create clones, the source
            object and all objects it references (directly or indirectly) must
            be serializable.  A type can be made serializable either by marking
            it with the <see cref="T:System.SerializableAttribute"/> attribute
            or by explicitly implementing
            <see cref="T:System.Runtime.Serialization.ISerializable"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            If <paramref name="source"/> or one of its references is not
            serializable.
            </exception>
        </member>
        <member name="M:Geocortex.Core.DeepCloneHelper.Clone``1(``0,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Deep clones the specified source object by serializing it to memory
            then deserializing it back into an object of the same type.
            </summary>
            <typeparam name="T">
            The type of object that is to be cloned.
            </typeparam>
            <param name="source">The object to clone.</param>
            <param name="surrogateSelector">
            A custom serialization
            <see cref="T:System.Runtime.Serialization.SurrogateSelector"/>
            that defines the
            <see cref="T:System.Runtime.Serialization.ISerializationSurrogate"/>s
            that should be used to serialize types that are not serializable.
            </param>
            <returns>A deep clone of the source object.</returns>
            <remarks>
            Because this method uses serialization to create clones, the source
            object and all objects it references (directly or indirectly) must
            be serializable.  A type can be made serializable by marking it with
            the <see cref="T:System.SerializableAttribute"/> attribute,
            explicitly implementing
            <see cref="T:System.Runtime.Serialization.ISerializable"/> or by
            creating an
            <see cref="T:System.Runtime.Serialization.ISerializationSurrogate"/>
            and adding it to the <paramref name="surrogateSelector"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            If <paramref name="source"/> or one of its references is not
            serializable.
            </exception>
        </member>
        <member name="M:Geocortex.Core.DeepCloneHelper.Clone(System.Object,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Deep clones the specified source object by serializing it to memory
            then deserializing it back into an object of the same type.
            </summary>
            <param name="source">The object to clone.</param>
            <param name="surrogateSelector">
            A custom serialization
            <see cref="T:System.Runtime.Serialization.SurrogateSelector"/>
            that defines the
            <see cref="T:System.Runtime.Serialization.ISerializationSurrogate"/>s
            that should be used to serialize types that are not serializable.
            </param>
            <returns>A deep clone of the source object.</returns>
            <remarks>
            Because this method uses serialization to create clones, the source
            object and all objects it references (directly or indirectly) must
            be serializable.  A type can be made serializable by marking it with
            the <see cref="T:System.SerializableAttribute"/> attribute,
            explicitly implementing
            <see cref="T:System.Runtime.Serialization.ISerializable"/> or by
            creating an
            <see cref="T:System.Runtime.Serialization.ISerializationSurrogate"/>
            and adding it to the <paramref name="surrogateSelector"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            If <paramref name="source"/> or one of its references is not
            serializable.
            </exception>
        </member>
        <member name="M:Geocortex.Core.DeepCloneHelper.Clone``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Clones a collection of items.
            </summary>
            <typeparam name="T">The type of item.</typeparam>
            <param name="items">The items.</param>
            <returns>The cloned items.</returns>
        </member>
        <member name="M:Geocortex.Core.DeepCloneHelper.GetDefaultSurrogateSelector">
            <summary>
            Creates a surrogate selector that defines the default serialization
            surrogates that will be used to serialize types that are not
            serializable.
            </summary>
            <returns>
            A SurrogateSelector that specifies the serialization surrogates for
            known non-serializable types.
            </returns>
        </member>
        <member name="T:Geocortex.Core.Extensions.DictionaryExtensions">
            <summary>
            Extension methods for dictionaries.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Extensions.DictionaryExtensions.RemoveAll``2(System.Collections.Generic.IDictionary{``0,``1},System.Predicate{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Removes all items that match a predicate.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to remove from.</param>
            <param name="match">The match predicate to use to evaluate whether an item should be removed.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.DictionaryExtensions.ToNameValueCollection``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts to the name value collection.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <returns>The <see cref="T:System.Collections.Specialized.NameValueCollection"/> representation of <paramref name="dictionary"/>.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.DictionaryExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Adds the range.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="otherDictionary">The other dictionary.</param>
            <returns>Returns a new dictionary.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.DictionaryExtensions.SafeGet``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets a value from a dictionary without throwing an exception.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns>The value, or default(TValue) if the key is not in the dictionary.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.DictionaryExtensions.GetAndConvert``1(System.Collections.IDictionary,System.Object)">
            <summary>
            Gets the value from the dictionary and converts to TValue.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns>The value with the specified key, converting to the specified type, or default(TValue) if the key is not in the dictionary.</returns>
        </member>
        <member name="T:Geocortex.Core.Extensions.EnumerableExtensions">
            <summary>
            Extension methods for IEnumerable.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumerableExtensions.StringCombine(System.Collections.IEnumerable)">
            <summary>
            Combines a string into a comma separated list of values, with no quotes
            around each item.  For example:
            (new int[] {1,2,3}).StringCombine(); // Yields the string: "1,2,3"
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>The comma separated list of values.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumerableExtensions.StringCombine(System.Collections.IEnumerable,System.String)">
            <summary>
            Combines a string into a delimiter separated list of values, with no quotes
            around each item.  For example:/// (new int[] {1,2,3}).StringCombine("; "); // Yields the string: "1; 2; 3"
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="delimiter">The delimiter.</param>
            <returns>The delimiter separated list of values.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumerableExtensions.StringCombine(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Combines a string into a delimiter separated list of values, with the specified quote
            symbol around each item.  For example:
            (new int[] {1,2,3}).StringCombine("; ", "'"); // Yields the string: "'1'; '2'; '3'"
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="delimiter">The delimiter.</param>
            <param name="quoteSymbol">The quote symbol.</param>
            <returns>The delimiter separated list of values with quotes.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts a collection to a HashSet.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="items">The items.</param>
            <returns>The HashSet.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumerableExtensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Converts a set of items to a hash set with a converter to change the type to a different type.
            </summary>
            <typeparam name="T">The type of items in the original collection.</typeparam>
            <typeparam name="TTarget">The type of items in the output HashSet.</typeparam>
            <param name="items">The items to convert.</param>
            <param name="converter">The converter, which takes an item from the original collection and transforms
            it into an item for the resultant HashSet.</param>
            <returns>The resultant HashSet.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumerableExtensions.Any``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if there are any items in the collection that are also in another collection.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="items">The items.</param>
            <param name="comparableItems">The items to compare to.</param>
            <returns>
                <c>True</c> if there are intersecting items; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumerableExtensions.UnionCollections``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Unions a collection of collections into a single collection.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="enumerables">The collection of collections to union.</param>
            <returns>The unioned collection.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumerableExtensions.In``1(``0,``0[])">
            <summary>
            Equivalent to the SQL in operator, which determines whether or not an item is contained
            by another collection.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="item">The item.</param>
            <param name="items">The items.</param>
            <returns>
                <c>true</c> if the item is contained by the collection; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumerableExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Equivalent to the SQL in operator, which determines whether or not an item is contained
            by another collection.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="item">The item.</param>
            <param name="items">The items.</param>
            <returns>
                <c>true</c> if the item is contained by the collection; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a collection is null or empty.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="items">The items.</param>
            <returns>
                <c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumerableExtensions.EmptyIfNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an empty collection if the collection is null.  Otherwise the collection itself is returned.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="items">The items.</param>
            <returns>An empty collection if the collection is null; otherwise the collection itself.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumerableExtensions.Contains(System.Collections.Generic.IEnumerable{System.String},System.String,System.StringComparison)">
            <summary>
            Determines whether a collection of strings contains a certain value, with the ability
            to use a case insensitive comparison.
            </summary>
            <param name="items">The items.</param>
            <param name="item">The item.</param>
            <param name="stringComparison">The string comparison.</param>
            <returns>
              <c>true</c> if the collection contains the item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumerableExtensions.LogicalEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if two collections are equal based on an item by item comparison.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="a">The first collection.</param>
            <param name="b">The second collection.</param>
            <returns><c>true</c> if equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Geocortex.Core.Extensions.EnumExtensions">
            <summary>
            Provides extension methods for Enum.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumExtensions.ToEnum``1(System.String,System.Boolean)">
            <summary>
            Converts the string in the Enum value
            </summary>
            <typeparam name="T">Type of Enum</typeparam>
            <param name="value">String representation of the Enum</param>
            <param name="ignoreCase">A value indicating if case are ignored</param>
            <returns>Enum value that is represented by the <paramref name="value"/> in Enum T format</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            Gets the description attribute text for an enum value.
            </summary>
            <param name="currentEnum">The current enum.</param>
            <returns>The text of the description attribute if it exists, otherwise the enum text.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumExtensions.GetValueFromDescription(System.Enum,System.String)">
            <summary>
            Tries to return the enum based on a description attribute value.
            </summary>
            <param name="theEnum">The enum.</param>
            <param name="description">The description.</param>
            <returns>The description value.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumExtensions.GetValues(System.Enum)">
            <summary>
            Gets the flag values of a flag enumeration.
            </summary>
            <param name="enumValue">The flag enum value.</param>
            <returns>The flag values.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumExtensions.GetValuesAsStrings(System.Enum)">
            <summary>
            Gets the flag values as strings.
            </summary>
            <param name="enumValue">The flag enum value.</param>
            <returns>The flag values as strings.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.EnumExtensions.Parse``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Parses a collection of flags (as strings) into a single flag enum.
            </summary>
            <typeparam name="T">The type of the flag enum.</typeparam>
            <param name="values">The flags.</param>
            <returns>The flag enum.</returns>
        </member>
        <member name="T:Geocortex.Core.Extensions.ListExtensions">
            <summary>
            Extension methods for lists.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Extensions.ListExtensions.RemoveAt``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Removes all the elements with the specified indices.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="items">The items.</param>
            <param name="indexes">The indexes.</param>
        </member>
        <member name="M:Geocortex.Core.Extensions.ListExtensions.RemoveLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Removes the last element in the list.
            </summary>
            <typeparam name="T">Type of the items in the collection.</typeparam>
            <param name="items">The list.</param>
        </member>
        <member name="M:Geocortex.Core.Extensions.ListExtensions.Remove``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes all the specified items, and returns this as a new IList. 
            The original collection is not modified.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="items">The items.</param>
            <param name="itemsToRemove">The items to remove.</param>
            <returns>A new collection with the specified items not in the collection.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.ListExtensions.Replace``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            Replaces an item in the list with another item.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
            <param name="items">The items.</param>
            <param name="item">The item to be replaced.</param>
            <param name="replacement">The replacement.</param>
            <returns><c>true</c> if the item was found and replaced; <c>false</c> if the item was not found,
            and therefore no replacement was performed.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.ListExtensions.AddIf``1(System.Collections.Generic.IList{``0},``0,System.Predicate{``0})">
            <summary>
            Add an item to the list.
            </summary>
            <typeparam name="T">The type of items.</typeparam>
            <param name="items">The items.</param>
            <param name="item">The item that need to be added in <paramref name="items"/>.</param>
            <param name="condition">The delegate that defines the condition to add an item.</param>
        </member>
        <member name="M:Geocortex.Core.Extensions.ListExtensions.AddIfNotNull``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Add an item to the list, if item is non-null.
            </summary>
            <typeparam name="T">The type of items.</typeparam>
            <param name="items">The items.</param>
            <param name="item">The item that need to be added in <paramref name="items"/>.</param>
        </member>
        <member name="T:Geocortex.Core.Extensions.ObserverExtensions">
            <summary>
            Provides extension methods for <c>System.IObserver</c>.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Extensions.ObserverExtensions.OnNextIfNotNull``1(System.IObserver{``0},``0)">
            <summary>
            Provides the observer with new data only if data is not null. 
            </summary>
            <typeparam name="T">Type of data</typeparam>
            <param name="observer"><c>System.IObserver</c> that is being used to provide the data to observer</param>
            <param name="item">The data</param>
        </member>
        <member name="M:Geocortex.Core.Extensions.ObserverExtensions.TryOnNextIfnotNull``1(System.IObserver{``0},``0)">
            <summary>
            Provides the observer with new data only if data is not null. The return value indicates if the operation succeeded.
            </summary>
            <typeparam name="T">Type of data.</typeparam>
            <param name="observer"><c>System.IObserver</c> that is being used to provide the data to observer.</param>
            <param name="item">The data.</param>
            <returns><c>True</c> if operation was successful, otherwise false.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.ObserverExtensions.OnNextIfNotNullOrEmpty(System.IObserver{System.String},System.String)">
            <summary>
            Provides the observer with new string only if string is neither null nor empty. 
            </summary>
            <param name="observer"><c>System.IObserver</c> that is being used to provide the data to observer</param>
            <param name="item">The data</param>
        </member>
        <member name="T:Geocortex.Core.Extensions.SetExtensions">
            <summary>
            Extension methods for sets.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Extensions.SetExtensions.AddRange``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds an entire collection of items to the set.
            </summary>
            <typeparam name="T">The type of items in the set.</typeparam>
            <param name="set">The set.</param>
            <param name="items">The items to add.</param>
        </member>
        <member name="T:Geocortex.Core.Extensions.SystemExtensions">
            <summary>
            Extension methods for classes in the System namespace.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Extensions.SystemExtensions.Between``1(``0,``0,``0)">
            <summary>
            Determines if a given value is between two other values, using a range inclusive test.
            </summary>
            <typeparam name="T">The type, which must be an IComparable.</typeparam>
            <param name="comparable">The value to compare.</param>
            <param name="a">The first value in the range.</param>
            <param name="b">The second value in the range.</param>
            <returns>True if the value is between a and b, inclusive.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.SystemExtensions.IsDoubleInvariant(System.String)">
            <summary>
            Determines whether a string is a double according to the invariant culture.
            </summary>
            <param name="value">The value to test.</param>
            <returns>
            <c>true</c> if the value is a double; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.SystemExtensions.SafeEquals``1(``0,``0)">
            <summary>
            Determines if two objects are equal without having to worry about null reference exceptions.
            This method allows for either of the two comparison values to be null.
            </summary>
            <typeparam name="T">The type of the objects to compare.</typeparam>
            <param name="a">The first object.</param>
            <param name="b">The second object.</param>
            <returns><c>true</c> if equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Geocortex.Core.Extensions.SystemExtensions.SafeEquals(System.String,System.String,System.StringComparison)">
            <summary>
            Determines if two strings are equal without having to worry about null reference exceptions.
            </summary>
            <param name="a">The first string</param>
            <param name="b">The second string</param>
            <param name="comparison"><see cref="T:System.StringComparison"/> to be used while comparing the strings.</param>
            <returns><c>true</c> if equal; otherwise false.</returns>
        </member>
        <member name="T:Geocortex.GisProxy.AuthorizationRequest`1">
            <summary>
            Holds the authorization request to an IAuthorizationProvider for a specific GIS resource (layer, field, map service, etc).
            </summary>
            <typeparam name="T">An <see cref="T:Geocortex.Core.IIdentifiableResource"/>.</typeparam>
        </member>
        <member name="M:Geocortex.GisProxy.AuthorizationRequest`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.GisProxy.AuthorizationRequest`1"/> class.
            </summary>
            <param name="resourceToAuthorize">The resource to authorize.</param>
        </member>
        <member name="P:Geocortex.GisProxy.AuthorizationRequest`1.ResourceID">
            <summary>
            Gets the ID of the resource (e.g a layer) to authorize.
            </summary>
            <value>The resource ID.</value>
        </member>
        <member name="P:Geocortex.GisProxy.AuthorizationRequest`1.ResourceName">
            <summary>
            Gets the name of the resource (e.g a layer) to authorize.
            </summary>
            <value>The resource name.</value>
        </member>
        <member name="P:Geocortex.GisProxy.AuthorizationRequest`1.BusinessObject">
            <summary>
            Gets the business object.
            </summary>
            <value>The business object.</value>
        </member>
        <member name="T:Geocortex.GisProxy.IProxyConfig">
            <summary>
            An interface that defines GIS proxy configurations.
            </summary>
        </member>
        <member name="P:Geocortex.GisProxy.IProxyConfig.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:Geocortex.GisProxy.IProxyConfig.ID">
            <summary>
            Gets or sets the ID.
            </summary>
            <value>
            The ID.
            </value>
        </member>
        <member name="P:Geocortex.GisProxy.IProxyConfig.FailSilently">
            <summary>
            Gets or sets a value indicating whether to fail silently.
            </summary>
            <value>
              <c>true</c> if the GIS Proxy should fail silently for unauthorized requests; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Geocortex.GisProxy.IProxyConfig.ProxyType">
            <summary>
            Gets or sets the type of the GIS proxy.
            </summary>
            <value>
            The type of the GIS proxy.
            </value>
        </member>
        <member name="P:Geocortex.GisProxy.IProxyConfig.ServerUrl">
            <summary>
            Gets or sets the protected server URL.
            </summary>
            <value>
            The protected server URL.
            </value>
        </member>
        <member name="P:Geocortex.GisProxy.IProxyConfig.RequiresHttpAuthentication">
            <summary>
            Gets or sets a value indicating whether outgoing web requests require HTTP authentication.
            </summary>
            <value>
            <c>true</c> if outgoing web requests require HTTP authentication; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Geocortex.GisProxy.IProxyConfig.Scheme">
            <summary>
            Gets or sets the authentication scheme.
            </summary>
            <value>
            The authentication scheme.
            </value>
        </member>
        <member name="P:Geocortex.GisProxy.IProxyConfig.HttpUsername">
            <summary>
            Gets or sets the HTTP username.
            </summary>
            <value>
            The HTTP username.
            </value>
        </member>
        <member name="P:Geocortex.GisProxy.IProxyConfig.HttpPassword">
            <summary>
            Gets or sets the HTTP password.
            </summary>
            <value>
            The HTTP password.
            </value>
        </member>
        <member name="T:Geocortex.Core.CompositeExtensions">
            <summary>
            Extension methods for the IComposite&lt;T> interface.
            </summary>
        </member>
        <member name="M:Geocortex.Core.CompositeExtensions.Flatten``1(Geocortex.Core.IComposite{``0},System.Predicate{``0},Geocortex.Core.TraversalOrder,System.Predicate{``0})">
            <summary>
            Transforms a tree into a flat list. In order for the tree to be recursable, a branch node
            must implement IComposite&lt;T&gt;.
            </summary>
            <typeparam name="T">The type of the items in the tree.</typeparam>
            <param name="parent">The root node.</param>
            <param name="condition">The optional predicate which items must satisfy to be included in the final list. If no condition is
            specified, then all items are added to the result.</param>
            <param name="traversalOrder">The traversal order to use when flattening the tree. This will impact the order
            of the items in the returned list.</param>
            <param name="childrenEvaluationCondition">A condition for evaluation of children nodes.</param>
            <returns>
            A list with all items in the tree added to it, in an order commensurate with the specified traversal order.
            </returns>
        </member>
        <member name="M:Geocortex.Core.CompositeExtensions.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},Geocortex.Core.TraversalOrder,System.Predicate{``0})">
            <summary>
            Transforms a tree into a flat list. In order for the tree to be recursable, a branch node
            must implement IComposite&lt;T&gt;.
            </summary>
            <typeparam name="T">The type of the items in the tree.</typeparam>
            <param name="items">The tree.</param>
            <param name="condition">The optional predicate which items must satisfy to be included in the final list.  If no condition is
            specified, then all items are added to the result.</param>
            <param name="traversalOrder">The traversal order to use when flattening the tree.  This will impact the order 
            of the items in the returned list.</param>
            <param name="childrenEvaluationCondition">A condition for evaluation of children nodes.</param>
            <returns>
            A list with all items in the tree added to it, in an order commensurate with the specified traversal order.
            </returns>
        </member>
        <member name="T:Geocortex.Core.TraversalOrder">
            <summary>
            Defines the order in which nodes are visited while traversing a tree.
            </summary>
        </member>
        <member name="F:Geocortex.Core.TraversalOrder.BreadthFirst">
            <summary>
            Breadth first traversal is where the higher nodes in a tree are visited before
            the lower nodes.
            </summary>
        </member>
        <member name="F:Geocortex.Core.TraversalOrder.Preorder">
            <summary>
            A flavor of depth-first traversal where the parent nodes are visited before the 
            child nodes, and the left nodes are visited before the right nodes.
            </summary>
        </member>
        <member name="T:Geocortex.Core.IIdentifiableResource">
            <summary>
            Describes objects that are uniquely identifiable.
            </summary>
        </member>
        <member name="P:Geocortex.Core.IIdentifiableResource.ID">
            <summary>
            Gets the ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="T:Geocortex.Core.Imaging.BitmapUtilities">
            <summary>
            Utility methods for working with WPF Bitmaps.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Imaging.BitmapUtilities.WriteToDisk(System.Windows.Media.Imaging.BitmapSource,System.String)">
            <summary>
            Writes the given map image to a PNG on the disk at the specified path.
            </summary>
            <param name="bmp">The BMP.</param>
            <param name="filePath">The path at which to save the image.</param>
        </member>
        <member name="T:Geocortex.Core.Imaging.ImageFormatWrapper">
            <summary>
            Wraps the original ImageFormat object inside another object, while preserving the original value.
            The use case for this is that sometimes the user may configure a value like image/jpeg, and we transform
            that into a value of ImageFormat.Jpg, but it is useful to preserve the original value.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Imaging.ImageFormatWrapper.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Imaging.ImageFormatWrapper"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Geocortex.Core.Imaging.ImageFormatWrapper.#ctor(Geocortex.Core.Imaging.ImageFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Imaging.ImageFormatWrapper"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Geocortex.Core.Imaging.ImageFormatWrapper.OriginalValue">
            <summary>
            Gets the original value that this ImageFormat was parsed from.
            </summary>
            <value>The original value.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.ImageFormatWrapper.ImageFormat">
            <summary>
            Gets the image format that this class wraps.
            </summary>
            <value>The image format.</value>
        </member>
        <member name="T:Geocortex.Core.Imaging.Position">
            <summary>
            Represents a position on a horizontal plane.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Imaging.Position.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Imaging.Position"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Imaging.Position.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Imaging.Position"/> class.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="M:Geocortex.Core.Imaging.Position.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance.
            Deep cloning implies that all object references (and any objects
            they may reference, and so on) will also be deep cloned.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Imaging.Position.X">
            <summary>
            Gets or sets the X coordinate.
            </summary>
            <value>The X coordinate.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.Position.Y">
            <summary>
            Gets or sets the Y coordinate.
            </summary>
            <value>The Y coordinate.</value>
        </member>
        <member name="T:Geocortex.Core.Imaging.RasterMosaicRule">
            <summary>
            Specifies the mosaic rules that define how individual images from a raster dataset should be
            mosaicked.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Imaging.RasterMosaicRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Imaging.RasterMosaicRule"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Imaging.RasterMosaicRule.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance.
            Deep cloning implies that all object references (and any objects
            they may reference, and so on) will also be deep cloned.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterMosaicRule.Ascending">
            <summary>
            Gets or sets a value indicating whether the images are sorted in ascending order.
            </summary>
            <value>
            <c>true</c> if images are sorted in ascending order; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterMosaicRule.MosaicMethod">
            <summary>
            Gets or sets the method that determines the order of rasters.
            </summary>
            <value>The mosaic method.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterMosaicRule.MosaicOperation">
            <summary>
            Gets or sets the operation that is used to resolve overlapping pixels at the same
            location.
            </summary>
            <value>The mosaic operation.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterMosaicRule.SortFieldName">
            <summary>
            Gets or sets the name of the field to sort on.
            </summary>
            <value>The name of the field to sort on.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterMosaicRule.SortValue">
            <summary>
            Gets or sets the value to sort by.
            </summary>
            <value>The value to sort by.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterMosaicRule.Viewpoint">
            <summary>
            Gets or sets the viewpoint.
            </summary>
            <value>The viewpoint.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterMosaicRule.WhereClause">
            <summary>
            Gets or sets the where clause that determines which images will be included.
            </summary>
            <value>The where clause.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterMosaicRule.LockRasterIDs">
            <summary>
            Gets the collection of raster IDs that will be locked.
            </summary>
            <value>The raster IDs that will be locked.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterMosaicRule.ObjectIDs">
            <summary>
            Gets the collection of object IDs.
            </summary>
            <value>The object IDs.</value>
        </member>
        <member name="T:Geocortex.Core.Imaging.RasterRenderingRule">
            <summary>
            Provides a set of predefined raster functions to dynamically change the display of raster
            data.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Imaging.RasterRenderingRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Imaging.RasterRenderingRule"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Imaging.RasterRenderingRule.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance.
            Deep cloning implies that all object references (and any objects
            they may reference, and so on) will also be deep cloned.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterRenderingRule.FunctionName">
            <summary>
            Gets or sets the raster function.
            </summary>
            <value>The raster function.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterRenderingRule.FunctionArguments">
            <summary>
            Gets the raster function arguments.
            </summary>
            <value>The raster function arguments.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterRenderingRule.VariableName">
            <summary>
            Gets or sets the name of the variable.
            </summary>
            <value>The name of the variable.</value>
        </member>
        <member name="T:Geocortex.Core.Imaging.RasterOptions">
            <summary>
            The display options that are specific to a raster dataset.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Imaging.RasterOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Imaging.RasterOptions"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Imaging.RasterOptions.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance.
            Deep cloning implies that all object references (and any objects
            they may reference, and so on) will also be deep cloned.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterOptions.Interpolation">
            <summary>
            Gets or sets the resampling process of interpolating pixel values while transforming a
            raster dataset when it undergoes warping or when it changes coordinate space. Applies
            only to image services.
            </summary>
            <value>The raster interpolation style.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterOptions.CompressionQuality">
            <summary>
            Gets or sets the compression quality of the image when the image format is a lossy
            format, such as JPG. Values must be from 0 through 100. The default is 75.
            </summary>
            <value>The image compression quality.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterOptions.MosaicRule">
            <summary>
            Gets or sets the mosaic rules that define how individual images from a raster dataset
            should be mosaicked. Applies only to image services.
            </summary>
            <value>The raster mosaic rules.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterOptions.RenderingRule">
            <summary>
            Gets or sets the rendering rule, which can dynamically change the display of raster
            data.
            </summary>
            <value>The rendering rule.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterOptions.BandIDs">
            <summary>
            Gets the collection of visible band IDs. If there are multiple bands, use this property
            to display a single band or change the band combination (red, green, blue) by changing
            the order of band IDs.
            </summary>
            <value>The visible band IDs.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterOptions.NoDataValue">
            <summary>
            Gets or sets the pixel value representing no information. The default is zero.
            </summary>
            <value>The value representing no information.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.RasterOptions.PixelType">
            <summary>
            Gets or sets the data type of the pixel.
            </summary>
            <value>The data type of the pixel.</value>
        </member>
        <member name="T:Geocortex.Core.Imaging.DisplaySettings">
            <summary>
            Defines the display settings for an image component.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Imaging.DisplaySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Imaging.DisplaySettings"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Imaging.DisplaySettings.#ctor(Geocortex.Core.Imaging.ImageDescriptor,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Imaging.DisplaySettings"/> class.
            </summary>
            <param name="imageDescriptor">The image descriptor.</param>
            <param name="transparency">The transparency.</param>
            <param name="visible">if set to <c>true</c> [visible].</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="imageDescriptor"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Imaging.DisplaySettings.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance.
            Deep cloning implies that all object references (and any objects
            they may reference, and so on) will also be deep cloned.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Imaging.DisplaySettings.ImageDescriptor">
            <summary>
            Gets or sets the image descriptor.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If setting this property with a null value.
            </exception>
        </member>
        <member name="P:Geocortex.Core.Imaging.DisplaySettings.Transparency">
            <summary>
            Gets or sets the percentage transparency for the component when overlaid on components.
            </summary>
            <remarks>This is a value between 0 (no transparency, the default) and 100
            (completely transparent, i.e., no visibility). Setting a value above 0 causes the 
            image to be partially transparent, so that the map resource underneath the current 
            resource is partially visible across the map. If only one resource occurs in the map, 
            this property should not be set above the default value of zero (0).</remarks>
        </member>
        <member name="P:Geocortex.Core.Imaging.DisplaySettings.Visible">
            <summary>
            Gets or sets a value indicating whether to display the data source on the map.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Imaging.DisplaySettings.RasterOptions">
            <summary>
            Gets or sets the display options that are specific to a raster dataset.
            </summary>
            <value>The raster options.</value>
        </member>
        <member name="T:Geocortex.Core.Imaging.ImageDescriptor">
            <summary>
            Describes an image's dimensions.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Imaging.ImageDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Imaging.ImageDescriptor"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Imaging.ImageDescriptor.#ctor(System.Int32,System.Int32,System.Int32,Geocortex.Core.Imaging.ImageFormat,System.Boolean,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Imaging.ImageDescriptor"/> class.
            </summary>
            <param name="dpi">The image's resolution in dots per inch.</param>
            <param name="width">The width in pixels.</param>
            <param name="height">The height in pixels.</param>
            <param name="imageFormat">The image format.</param>
            <param name="transparentBackground">
            Whether the image's background is transparent.
            </param>
            <param name="transparentColor">
            If <paramref name="transparentBackground"/> is true, this specifies
            the color to make transparent.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="dpi"/>, <paramref name="width"/> or
            <paramref name="height"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Imaging.ImageDescriptor.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.Boolean,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Imaging.ImageDescriptor"/> class.
            </summary>
            <param name="dpi">The image's resolution in dots per inch.</param>
            <param name="width">The width in pixels.</param>
            <param name="height">The height in pixels.</param>
            <param name="imageFormat">The image format.</param>
            <param name="transparentBackground">Whether the image's background is transparent.</param>
            <param name="transparentColor">If <paramref name="transparentBackground"/> is true, this specifies
            the color to make transparent.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="dpi"/>, <paramref name="width"/> or
            <paramref name="height"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Imaging.ImageDescriptor.#ctor(System.Int32,System.Double,System.Double,Geocortex.Core.Imaging.ImageFormat,System.Boolean,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Imaging.ImageDescriptor"/> class.
            </summary>
            <param name="dpi">The image's resolution in dots per inch.</param>
            <param name="widthInches">The width in inches.</param>
            <param name="heightInches">The height in inches.</param>
            <param name="imageFormat">The image format.</param>
            <param name="transparentBackground">Whether the image's background is transparent.</param>
            <param name="transparentColor">If <paramref name="transparentBackground"/> is true, this specifies
            the color to make transparent.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="dpi"/>, <paramref name="widthInches"/> or
            <paramref name="heightInches"/> are less than or equal to zero.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Imaging.ImageDescriptor.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance.
            Deep cloning implies that all object references (and any objects
            they may reference, and so on) will also be deep cloned.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Imaging.ImageDescriptor.Dpi">
            <summary>
            Gets or sets the resolution of the image in dots per inch (DPI).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If setting this property and the value is less than or equal to zero.
            </exception>
        </member>
        <member name="P:Geocortex.Core.Imaging.ImageDescriptor.Height">
            <summary>
            Gets or sets the height of the image in pixels.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If setting this property and the value is less than or equal to zero.
            </exception>
        </member>
        <member name="P:Geocortex.Core.Imaging.ImageDescriptor.Width">
            <summary>
            Gets or sets the width of the image in pixels.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If setting this property and the value is less than or equal to zero.
            </exception>
        </member>
        <member name="P:Geocortex.Core.Imaging.ImageDescriptor.Size">
            <summary>
            Gets the image size.
            </summary>
            <value>The image size.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.ImageDescriptor.HeightInches">
            <summary>
            Gets or sets the height of the image in inches.
            </summary>
            <value>The height in inches.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.ImageDescriptor.WidthInches">
            <summary>
            Gets or sets the width of the image in inches.
            </summary>
            <value>The width in inches.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.ImageDescriptor.ImageFormat">
            <summary>
            Gets or sets the format of the image requested from the map service.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Imaging.ImageDescriptor.ImageFormatWrapper">
            <summary>
            Gets or sets the image format wrapper.
            </summary>
            <value>The image format wrapper.</value>
        </member>
        <member name="P:Geocortex.Core.Imaging.ImageDescriptor.TransparentBackground">
            <summary>
            Gets or sets a value indicating whether the background of the image should be transparent.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Imaging.ImageDescriptor.TransparentColor">
            <summary>
            Gets or sets the color to be rendered as transparent.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Imaging.ImageFormat">
            <summary>
            Image format.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Imaging.ImageFormat.None">
            <summary>
            No image format specified.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Imaging.ImageFormat.Bmp">
            <summary>
            Bitmap image format.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Imaging.ImageFormat.Gif">
            <summary>
            GIF image format.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Imaging.ImageFormat.Jpg">
            <summary>
            JPEG image format.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Imaging.ImageFormat.Png8">
            <summary>
            PNG8 image format.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Imaging.ImageFormat.Png24">
            <summary>
            PNG24 image format.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Imaging.ImageFormat.Png32">
            <summary>
            PNG32 image format.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Imaging.ImageFormat.Svg">
            <summary>
            Scalable Vector Graphics image format.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Imaging.ImageFormat.Pdf">
            <summary>
            PDF image format.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Imaging.ImageFormat.Tiff">
            <summary>
            TIFF image format.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Imaging.ImageFormat.JpgPng">
            <summary>
            Either JPEG or PNG format. JPEG is used in cases where there are no
            transparent pixels in the image; otherwise, PNG is used.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Imaging.ImageFormatExtensions">
            <summary>
            Extension methods for ImageFormat.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Imaging.ImageFormatExtensions.ToMimeType(Geocortex.Core.Imaging.ImageFormat)">
            <summary>
            Converts the image format to a MIME type.
            </summary>
            <param name="imageFormat">The image format.</param>
            <returns>The mime type.</returns>
        </member>
        <member name="T:Geocortex.Core.Imaging.ImageTypeConverter">
            <summary>
            Performs conversion between WPF Imaging <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>s
            and GDI+ <see cref="T:System.Drawing.Image"/>s.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Imaging.ImageTypeConverter.ToGdiBitmap(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Converts the given WPF Imaging <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> to a GDI+
            <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="wpfBitmapSource">
            The WPF Imaging <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>.
            </param>
            <returns>A GDI+ <see cref="T:System.Drawing.Bitmap"/></returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="wpfBitmapSource"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Imaging.ImageTypeConverter.ToWpfBitmapSource(System.Drawing.Image)">
            <summary>
            Converts the given GDI+ <see cref="T:System.Drawing.Image"/> to a WPF Imaging
            <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>.
            </summary>
            <param name="gdiImage">The GDI+ <see cref="T:System.Drawing.Image"/>.</param>
            <returns>A WPF Imaging <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="gdiImage"/> is null.
            </exception>
        </member>
        <member name="T:Geocortex.Core.IO.Archive">
            <summary>
            Archive is a convenience class that represents a collection of files
            </summary>
        </member>
        <member name="M:Geocortex.Core.IO.Archive.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.IO.Archive"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.IO.Archive.Zip(System.IO.Stream)">
            <summary>
            Zips the archive and writes it to the specified output stream.
            </summary>
            <param name="outputStream">The output stream.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="outputStream"/> is null.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:Geocortex.Core.IO.Archive.Zip">
            <summary>
            Zips the archive.
            </summary>
            <returns>The bytes of the zipped archive.</returns>
        </member>
        <member name="M:Geocortex.Core.IO.Archive.Unzip(System.IO.Stream)">
            <summary>
            Unzips the specified input stream.
            </summary>
            <param name="inputStream">The input stream.</param>
            <returns>An archive containing the contents of the zip.</returns>
            <exception cref="T:System.ArgumentNullException">If inputStream is null.</exception>
        </member>
        <member name="M:Geocortex.Core.IO.Archive.Unzip(System.IO.Stream,System.String)">
            <summary>
            Unzips the specified input stream.
            </summary>
            <param name="inputStream">The input stream.</param>
            <param name="password">The password.</param>
            <returns>
            An archive containing the contents of the zip.
            </returns>
            <exception cref="T:System.ArgumentNullException">If inputStream is null.</exception>
            <exception cref="T:System.ApplicationException">If the password is invalid.</exception>
        </member>
        <member name="M:Geocortex.Core.IO.Archive.ZipDirectory(System.String,System.String,Geocortex.Core.IO.Zip64Option,System.String,System.Boolean,System.String)">
            <summary>
            Creates a zip archive from a directory of source files.
            </summary>
            <param name="zipFilePath">The path of the zip file to create.</param>
            <param name="sourceDirectory">The source directory containing the items to zip.</param>
            <param name="zip64Option">Whether to use ZIP64 extensions when saving the zip archive.</param>
            <param name="password">A password for the zip archive.</param>
            <param name="includeSubdirectories">Whether to include subdirectories.</param>
            <param name="fileFilter">The regular expression file filter to apply. For example: "\.txt$" for only files ending in ".txt".</param>
        </member>
        <member name="M:Geocortex.Core.IO.Archive.ToUseZip64(Geocortex.Core.IO.Zip64Option)">
            <summary>
            Converts a Zip64Option enum to a UseZip64 enum used by the ICSharpCode.SharpZipLib library.
            </summary>
            <param name="zip64Option">The zip64 option.</param>
            <returns>The UseZip64 value.</returns>
        </member>
        <member name="M:Geocortex.Core.IO.Archive.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance.
            Deep cloning implies that all object references (and any objects
            they may reference, and so on) will also be deep cloned.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
        </member>
        <member name="P:Geocortex.Core.IO.Archive.Entries">
            <summary>
            Gets the entries.
            </summary>
            <value>The entries.</value>
        </member>
        <member name="P:Geocortex.Core.IO.Archive.UseZip64">
            <summary>
            Gets or sets whether to use ZIP64 extensions when saving the zip archive.
            </summary>
            <value>
            The Zip64Option.
            </value>
        </member>
        <member name="P:Geocortex.Core.IO.Archive.Password">
            <summary>
            Gets or sets the password of the archive.
            </summary>
        </member>
        <member name="T:Geocortex.Core.IO.Zip64Option">
            <summary>
            Options for using ZIP64 extensions when saving zip archives.
            </summary>
        </member>
        <member name="F:Geocortex.Core.IO.Zip64Option.Never">
            <summary>
            Do not use ZIP64 extensions when writing zip archives.
            </summary>
        </member>
        <member name="F:Geocortex.Core.IO.Zip64Option.AsNecessary">
            <summary>
            Use ZIP64 extensions when writing zip archives, as necessary.
            </summary>
        </member>
        <member name="F:Geocortex.Core.IO.Zip64Option.Always">
            <summary>
            Always use ZIP64 extensions when writing zip archives, even when unnecessary.
            </summary>
        </member>
        <member name="T:Geocortex.Core.IO.ArchiveEntry">
            <summary>
            The ArchiveEntry class represents the path and data of a file in an <see cref="T:Geocortex.Core.IO.Archive"/>. 
            </summary>
        </member>
        <member name="M:Geocortex.Core.IO.ArchiveEntry.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Geocortex.Core.IO.ArchiveEntry"/> class from being created.
            </summary>
        </member>
        <member name="M:Geocortex.Core.IO.ArchiveEntry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.IO.ArchiveEntry"/> class.
            </summary>
            <param name="path">The relative path of the entry in the archive.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Geocortex.Core.IO.ArchiveEntry.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.IO.ArchiveEntry"/> class.
            </summary>
            <param name="path">The relative path of the entry in the archive.</param>
            <param name="data">The data.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Geocortex.Core.IO.ArchiveEntry.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.IO.ArchiveEntry"/> class.
            The entry's data will be retrieved from the specified file path.
            </summary>
            <param name="path">The relative path of the entry in the archive.</param>
            <param name="filePath">The file path.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="path"/> or <paramref name="filePath"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            filePath is a zero-length string, contains only white space, or contains one
            or more invalid characters as defined by System.IO.Path.InvalidPathChars.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified filePath, file name, or both exceed the system-defined maximum
            length. For example, on Windows-based platforms, paths must be less than
            248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified filePath is invalid (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            This operation is not supported on the current platform.  -or- filePath specified
            a directory.  -or- The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The file specified in filePath was not found.
            </exception>
            <exception cref="T:System.NotSupportedException">
            filePath is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Geocortex.Core.IO.ArchiveEntry.GetData">
            <summary>
            Gets the data.
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="M:Geocortex.Core.IO.ArchiveEntry.Clone">
            <summary>
            Creates a new object that is a deep copy of the current instance.
            Deep cloning implies that all object references (and any objects
            they may reference, and so on) will also be deep cloned.
            </summary>
            <returns>
            A new object that is a deep copy of this instance.
            </returns>
        </member>
        <member name="P:Geocortex.Core.IO.ArchiveEntry.Path">
            <summary>
            Gets the relative path of the entry in the archive.
            </summary>
            <value>The path.</value>
        </member>
        <member name="T:Geocortex.Core.IO.ArchiveEntryCollection">
            <summary>
            A collection of <see cref="T:Geocortex.Core.IO.ArchiveEntry"/>s.
            </summary>
        </member>
        <member name="M:Geocortex.Core.IO.ArchiveEntryCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.IO.ArchiveEntryCollection"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.IO.ArchiveEntryCollection.#ctor(System.Collections.Generic.IEnumerable{Geocortex.Core.IO.ArchiveEntry})">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.IO.ArchiveEntryCollection"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="collection"/> is null.
            </exception>
        </member>
        <member name="M:Geocortex.Core.IO.ArchiveEntryCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.IO.ArchiveEntryCollection"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="capacity"/> is less than zero.
            </exception>
        </member>
        <member name="T:Geocortex.Core.Parsing.BinaryExpression`1">
            <summary>
            Represents a binary expression.
            </summary>
            <typeparam name="T">The type of the token.</typeparam>
        </member>
        <member name="T:Geocortex.Core.Parsing.Expression`1">
            <summary>
            Basic expression.
            </summary>
            <typeparam name="T">The token type.</typeparam>
        </member>
        <member name="T:Geocortex.Core.Parsing.IExpression">
            <summary>
            Contains functionality common to all expressions.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.IExpression.Tokens">
            <summary>
            Gets the tokens reachable from this expression.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Parsing.Expression`1.#cctor">
            <summary>
            Initializes the <see cref="T:Geocortex.Core.Parsing.Expression`1"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Parsing.Expression`1.Visit``1(Geocortex.Core.Parsing.IExpressionVisitor{`0,``0},``0)">
            <summary>
            Visits the specified visitor.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <param name="visitor">The visitor.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.Expression`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Parsing.Expression`1.op_Explicit(System.String)~Geocortex.Core.Parsing.Expression{`0}">
            <summary>
            Performs an explicit conversion from <see cref="T:System.String"/> to <see cref="T:Geocortex.Core.Parsing.Expression`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Geocortex.Core.Parsing.Expression`1.op_Explicit(Geocortex.Core.Parsing.Expression{`0})~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Geocortex.Core.Parsing.Expression`1"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:Geocortex.Core.Parsing.Expression`1.Tokens">
            <summary>
            Gets the tokens.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Parsing.BinaryExpression`1.#ctor(Geocortex.Core.Parsing.Expression{`0},`0,Geocortex.Core.Parsing.Expression{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.BinaryExpression`1"/> class.
            </summary>
            <param name="left">The left.</param>
            <param name="middle">The middle.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.BinaryExpression`1.Visit``1(Geocortex.Core.Parsing.IExpressionVisitor{`0,``0},``0)">
            <summary>
            Visits the specified visitor.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <param name="visitor">The visitor.</param>
            <param name="state">The state.</param>
        </member>
        <member name="P:Geocortex.Core.Parsing.BinaryExpression`1.Left">
            <summary>
            Gets the left expression.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.BinaryExpression`1.Middle">
            <summary>
            Gets the middle expression.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.BinaryExpression`1.Right">
            <summary>
            Gets the right expression.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Parsing.CompositeExpression`1">
            <summary>
            Represents a composite expression tree.
            </summary>
            <typeparam name="T">The type of the token.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Parsing.CompositeExpression`1.#ctor(Geocortex.Core.Parsing.Expression{`0},Geocortex.Core.Parsing.Expression{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.CompositeExpression`1"/> class.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.CompositeExpression`1.Visit``1(Geocortex.Core.Parsing.IExpressionVisitor{`0,``0},``0)">
            <summary>
            Visits the specified visitor.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <param name="visitor">The visitor.</param>
            <param name="state">The state.</param>
        </member>
        <member name="P:Geocortex.Core.Parsing.CompositeExpression`1.Left">
            <summary>
            Gets the left expression.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.CompositeExpression`1.Right">
            <summary>
            Gets the right expression.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Parsing.ContextStack`2">
            <summary>
            Implements a collection backed by a stack which also has a context stack.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
            <typeparam name="TState">The type of the state.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Parsing.ContextStack`2.Peek">
            <summary>
            Peeks into the stack returning the top item.
            </summary>
            <returns>Returns the top item.</returns>
        </member>
        <member name="M:Geocortex.Core.Parsing.ContextStack`2.PeekState">
            <summary>
            Peeks into the stack returning the top item's state.
            </summary>
            <returns>Returns the top item's state.</returns>
        </member>
        <member name="M:Geocortex.Core.Parsing.ContextStack`2.Pop">
            <summary>
            Pops the top item.
            </summary>
            <returns>Returns the item that was formerly the top item.</returns>
        </member>
        <member name="M:Geocortex.Core.Parsing.ContextStack`2.Push(`0,`1)">
            <summary>
            Pushes the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.ContextStack`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Parsing.ContextStack`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Geocortex.Core.Parsing.EmptyExpression`1">
            <summary>
            Represents an empty expression.
            </summary>
            <typeparam name="T">The token type.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Parsing.EmptyExpression`1.Visit``1(Geocortex.Core.Parsing.IExpressionVisitor{`0,``0},``0)">
            <summary>
            Visits the specified visitor.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <param name="visitor">The visitor.</param>
            <param name="state">The state.</param>
        </member>
        <member name="T:Geocortex.Core.Parsing.ExpressionHandler`2">
            <summary>
            Handler family for walking expressions.
            </summary>
            <typeparam name="T">The type of the token.</typeparam>
            <typeparam name="TState">The type of the state.</typeparam>
        </member>
        <member name="T:Geocortex.Core.Parsing.IExpressionVisitor`2">
            <summary>
            Implemented when wanting to visit the nodes of an expression tree.
            </summary>
            <typeparam name="T">The token type.</typeparam>
            <typeparam name="TState">The type of the state.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Parsing.IExpressionVisitor`2.Visit(Geocortex.Core.Parsing.BinaryExpression{`0},`1)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expr">The expression.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.IExpressionVisitor`2.Visit(Geocortex.Core.Parsing.CompositeExpression{`0},`1)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expr">The expression.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.IExpressionVisitor`2.Visit(Geocortex.Core.Parsing.EmptyExpression{`0},`1)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expr">The expression.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.IExpressionVisitor`2.Visit(Geocortex.Core.Parsing.GroupExpression{`0},`1)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expr">The expression.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.IExpressionVisitor`2.Visit(Geocortex.Core.Parsing.UnaryExpression{`0},`1)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expr">The expression.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.IExpressionVisitor`2.Visit(`0,`1)">
            <summary>
            Visits the specified token.
            </summary>
            <param name="token">The token.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.ExpressionHandler`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.ExpressionHandler`2"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Parsing.ExpressionHandler`2.#ctor(System.Action{Geocortex.Core.Parsing.Expression{`0},`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.ExpressionHandler`2"/> class.
            </summary>
            <param name="defaultAction">The default action to perform when visiting nodes.</param>
        </member>
        <member name="P:Geocortex.Core.Parsing.ExpressionHandler`2.BinaryVisitor">
            <summary>
            Gets or sets the binary visitor.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.ExpressionHandler`2.CompositeVisitor">
            <summary>
            Gets or sets the composite visitor.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.ExpressionHandler`2.EmptyVisitor">
            <summary>
            Gets or sets the empty visitor.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.ExpressionHandler`2.GroupVisitor">
            <summary>
            Gets or sets the group visitor.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.ExpressionHandler`2.UnaryVisitor">
            <summary>
            Gets or sets the unary visitor.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.ExpressionHandler`2.TokenVisitor">
            <summary>
            Gets or sets the token visitor.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Parsing.ExpressionWalker`2">
            <summary>
            Walks the expression tree.
            </summary>
            <typeparam name="T">The type of the token.</typeparam>
            <typeparam name="TState">The type of the state.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Parsing.ExpressionWalker`2.Push(System.Action)">
            <summary>
            Pushes the specified action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.ExpressionWalker`2.Push(Geocortex.Core.Parsing.Expression{`0},`1)">
            <summary>
            Pushes the specified expression.
            </summary>
            <param name="expr">The expression to push.</param>
            <param name="state">The state to push.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.ExpressionWalker`2.Push(Geocortex.Core.Parsing.Expression{`0},Geocortex.Core.Parsing.IExpressionVisitor{`0,`1},`1)">
            <summary>
            Pushes the specified expression.
            </summary>
            <param name="expr">The expression.</param>
            <param name="visitor">The visitor.</param>
            <param name="state">The state to push.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.ExpressionWalker`2.Walk">
            <summary>
            Walks this instance.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Parsing.ExpressionWalker`2.Break">
            <summary>
            Breaks the current walk.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Parsing.ExpressionWalker`2.Visit(Geocortex.Core.Parsing.BinaryExpression{`0},`1)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expr">The expression.</param>
            <param name="state">The state of the walk.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.ExpressionWalker`2.Visit(Geocortex.Core.Parsing.CompositeExpression{`0},`1)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expr">The expression.</param>
            <param name="state">The state of the walk.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.ExpressionWalker`2.Visit(Geocortex.Core.Parsing.EmptyExpression{`0},`1)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expr">The expression.</param>
            <param name="state">The state of the walk.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.ExpressionWalker`2.Visit(Geocortex.Core.Parsing.GroupExpression{`0},`1)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expr">The expression.</param>
            <param name="state">The state of the walk.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.ExpressionWalker`2.Visit(Geocortex.Core.Parsing.UnaryExpression{`0},`1)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="expr">The expression.</param>
            <param name="state">The state of the walk.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.ExpressionWalker`2.Visit(`0,`1)">
            <summary>
            Visits the specified TState.
            </summary>
            <param name="token">The token.</param>
            <param name="state">The state of the walk.</param>
        </member>
        <member name="T:Geocortex.Core.Parsing.GroupExpression`1">
            <summary>
            Represents a grouped expression.
            </summary>
            <typeparam name="T">The type of the token.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Parsing.GroupExpression`1.#ctor(`0,Geocortex.Core.Parsing.Expression{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.GroupExpression`1"/> class.
            </summary>
            <param name="left">The left.</param>
            <param name="middle">The middle.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.GroupExpression`1.Visit``1(Geocortex.Core.Parsing.IExpressionVisitor{`0,``0},``0)">
            <summary>
            Visits the specified visitor.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <param name="visitor">The visitor.</param>
            <param name="state">The state.</param>
        </member>
        <member name="P:Geocortex.Core.Parsing.GroupExpression`1.Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.GroupExpression`1.Middle">
            <summary>
            Gets the middle.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.GroupExpression`1.Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Parsing.ParsingException">
            <summary>
            Exception type that is thrown when parsing or validation problems occur.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Parsing.ParsingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.ParsingException"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Parsing.ParsingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.ParsingException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.ParsingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.ParsingException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.ParsingException.#ctor(Geocortex.Core.Parsing.IExpression,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.ParsingException"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.ParsingException.#ctor(Geocortex.Core.Parsing.IExpression,System.Object,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.ParsingException"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="reason">The reason.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.ParsingException.#ctor(System.Collections.Generic.IEnumerable{Geocortex.Core.Parsing.ParsingFailure})">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.ParsingException"/> class.
            </summary>
            <param name="failures">The failures.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.ParsingException.#ctor(System.Collections.Generic.IEnumerable{Geocortex.Core.Parsing.ParsingFailure},System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.ParsingException"/> class.
            </summary>
            <param name="failures">The failures.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.ParsingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.ParsingException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.ParsingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="P:Geocortex.Core.Parsing.ParsingException.LineNumber">
            <summary>
            Gets the line number of the first expression.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.ParsingException.LineOffset">
            <summary>
            Gets the line offset of the first expression.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.ParsingException.LineSegment">
            <summary>
            Gets the line segment of the first expression.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.ParsingException.LineString">
            <summary>
            Gets the line of the current expression.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.ParsingException.Failures">
            <summary>
            Gets the collection of tokens that were "offensive".
            </summary>
        </member>
        <member name="T:Geocortex.Core.Parsing.IToken">
            <summary>
            Represents information about a token.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.IToken.LineNumber">
            <summary>
            Gets the line number of the current token.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.IToken.LineOffset">
            <summary>
            Gets the line offset of the current token.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.IToken.LineSegment">
            <summary>
            Gets the line segment of the current token.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.IToken.LineString">
            <summary>
            Gets the line of the current token.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Parsing.ParsingFailure">
            <summary>
            Contains information about a parsing error.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Parsing.ParsingFailure.#ctor(Geocortex.Core.Parsing.IExpression,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.ParsingFailure"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="P:Geocortex.Core.Parsing.ParsingFailure.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.ParsingFailure.Reason">
            <summary>
            Gets the reason.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Parsing.Sql.SqlParser">
            <summary>
            Facility for parsing well-formed but not necessarily valid SQL syntax.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Parsing.Sql.SqlParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.Sql.SqlParser"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Parsing.Sql.SqlParser.PerformParse(Geocortex.Core.Parsing.TokenReader)">
            <summary>
            Parses the specified reader.
            </summary>
            <param name="reader">The reader to parse from.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.Sql.SqlParser.Finish">
            <summary>
            Finishes the parsing producing an expression tree.
            </summary>
            <returns>Returns the expression tree.</returns>
        </member>
        <member name="M:Geocortex.Core.Parsing.Sql.SqlParser.Parse(System.String)">
            <summary>
            Parses the specified SQL.
            </summary>
            <param name="sql">The SQL.</param>
            <returns>Returns the expression tree.</returns>
        </member>
        <member name="M:Geocortex.Core.Parsing.Sql.SqlParser.Parse(System.IO.TextReader)">
            <summary>
            Parses the specified SQL.
            </summary>
            <param name="sql">The SQL.</param>
            <returns>Returns the expression tree.</returns>
        </member>
        <member name="M:Geocortex.Core.Parsing.Sql.SqlParser.Parse(Geocortex.Core.Parsing.TokenReader)">
            <summary>
            Parses the specified SQL.
            </summary>
            <param name="sql">The SQL.</param>
            <returns>Returns the expression.</returns>
        </member>
        <member name="T:Geocortex.Core.Parsing.Sql.SqlToken">
            <summary>
            Token containing information about a SQL atom.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Parsing.Token`1">
            <summary>
            Represents an atom that which parsing is performed on.
            </summary>
            <typeparam name="T">The type of the token.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Parsing.Token`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.Token`1"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Parsing.Token`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.Token`1"/> class.
            </summary>
            <param name="lineSegment">The line segment.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.Token`1.#ctor(Geocortex.Core.Parsing.IToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.Token`1"/> class.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="P:Geocortex.Core.Parsing.Token`1.LineNumber">
            <summary>
            Gets the line number of the current token.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.Token`1.LineOffset">
            <summary>
            Gets the line offset of the current token.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.Token`1.LineSegment">
            <summary>
            Gets the line segment of the current token.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.Token`1.LineString">
            <summary>
            Gets the line of the current token.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Parsing.Sql.SqlToken.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Parsing.Sql.SqlToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.Sql.SqlToken"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Parsing.Sql.SqlToken.#ctor(Geocortex.Core.Parsing.TokenReader,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.Sql.SqlToken"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="asUnary">if set to <c>true</c> [as unary].</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.Sql.SqlToken.Visit``1(Geocortex.Core.Parsing.IExpressionVisitor{Geocortex.Core.Parsing.Sql.SqlToken,``0},``0)">
            <summary>
            Visits the specified visitor.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <param name="visitor">The visitor.</param>
            <param name="state">The state.</param>
        </member>
        <member name="P:Geocortex.Core.Parsing.Sql.SqlToken.Precedence">
            <summary>
            Gets the default precedence of the token if the token is an operator.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.Sql.SqlToken.Syntax">
            <summary>
            Gets the syntax (string value).
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.Sql.SqlToken.TokenType">
            <summary>
            Gets the type of the token.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.Sql.SqlToken.Value">
            <summary>
            Gets the value of the token if the token is a literal.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Parsing.Sql.SqlTokenReader">
            <summary>
            Implementation of a TokenReader that yields a sequence of SQL tokens.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Parsing.TokenReader">
            <summary>
            Yields a sequence of tokens with line and column information.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Parsing.TokenReader.MoveNext">
            <summary>
            Moves to the next token.
            </summary>
            <returns>Returns true only if the reader was able to advance to the next token.</returns>
        </member>
        <member name="P:Geocortex.Core.Parsing.TokenReader.LineNumber">
            <summary>
            Gets the line number of the current token.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.TokenReader.LineOffset">
            <summary>
            Gets the line offset of the current token.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.TokenReader.LineSegment">
            <summary>
            Gets the line segment of the current token.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.TokenReader.LineString">
            <summary>
            Gets the line of the current token.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.TokenReader.Tokens">
            <summary>
            Gets the tokens.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Parsing.Sql.SqlTokenReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.Sql.SqlTokenReader"/> class.
            </summary>
            <param name="textReader">The text reader.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.Sql.SqlTokenReader.MoveNext">
            <summary>
            Moves to the next token.
            </summary>
            <returns>
            Returns true only if the reader was able to advance to the next token.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Parsing.Sql.SqlTokenReader.LineString">
            <summary>
            Gets the line of the current token.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.Sql.SqlTokenReader.LineNumber">
            <summary>
            Gets the line number of the current token.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.Sql.SqlTokenReader.LineOffset">
            <summary>
            Gets the line offset of the current token.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.Sql.SqlTokenReader.LineSegment">
            <summary>
            Gets the line segment of the current token.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Parsing.Sql.SqlTokenType">
            <summary>
            Depicts the kind of SQL token.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Parsing.Sql.SqlTokenType.None">
            <summary>
            No type.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Parsing.Sql.SqlTokenType.SentinelToken">
            <summary>
            The token is a sentinel.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Parsing.Sql.SqlTokenType.BinaryOperator">
            <summary>
            The token is a binary operator.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Parsing.Sql.SqlTokenType.UnaryOperator">
            <summary>
            The token is a unary operator
            </summary>
        </member>
        <member name="F:Geocortex.Core.Parsing.Sql.SqlTokenType.BooleanRef">
            <summary>
            The token is a boolean reference (true or false).
            </summary>
        </member>
        <member name="F:Geocortex.Core.Parsing.Sql.SqlTokenType.FieldRef">
            <summary>
            The token is a field reference ([name]).
            </summary>
        </member>
        <member name="F:Geocortex.Core.Parsing.Sql.SqlTokenType.NameRef">
            <summary>
            The token is a name reference.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Parsing.Sql.SqlTokenType.NullRef">
            <summary>
            The token is a null reference.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Parsing.Sql.SqlTokenType.NumberRef">
            <summary>
            The token is a number literal reference.
            </summary>
        </member>
        <member name="F:Geocortex.Core.Parsing.Sql.SqlTokenType.StringRef">
            <summary>
            The token is a string literal reference.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Parsing.Sql.SqlTypeConverter">
            <summary>
            Facility for converting strings into expressions.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Parsing.Sql.SqlTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Parsing.Sql.SqlTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Geocortex.Core.Parsing.Sql.SqlTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Parsing.Sql.SqlTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:Geocortex.Core.Parsing.TokenFinder`1">
            <summary>
            Captures tokens.
            </summary>
            <typeparam name="T">The type of the token.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Parsing.TokenFinder`1.Push(Geocortex.Core.Parsing.Expression{`0})">
            <summary>
            Pushes the specified expression.
            </summary>
            <param name="expr">The expression.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.TokenFinder`1.Pop">
            <summary>
            Pops this instance.
            </summary>
            <returns>Returns the left most token if there is one.</returns>
        </member>
        <member name="P:Geocortex.Core.Parsing.TokenFinder`1.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Geocortex.Core.Parsing.UnaryExpression`1">
            <summary>
            Represents an unary expression.
            </summary>
            <typeparam name="T">The token type.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Parsing.UnaryExpression`1.#ctor(`0,Geocortex.Core.Parsing.Expression{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Parsing.UnaryExpression`1"/> class.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:Geocortex.Core.Parsing.UnaryExpression`1.Visit``1(Geocortex.Core.Parsing.IExpressionVisitor{`0,``0},``0)">
            <summary>
            Visits the specified visitor.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <param name="visitor">The visitor.</param>
            <param name="state">The state.</param>
        </member>
        <member name="P:Geocortex.Core.Parsing.UnaryExpression`1.Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Parsing.UnaryExpression`1.Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="T:Geocortex.Core.IRequestHeaderAppender">
            <summary>
            Defines methods for appending custom headers to outgoing web requests.
            </summary>
            <remarks>
            It allows the integration of Geocortex technologies with third party security frameworks.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.IRequestHeaderAppender.OnAppendRequestHeaders(System.Uri,System.Net.WebHeaderCollection)">
            <summary>
            Called when appending headers to an outgoing web request is required.
            </summary>
            <param name="requestUri">A <see cref="T:System.Uri"/> containing the URI of the requested resource.</param>
            <param name="requestHeaders">Contains protocol headers associated with the web request.</param>
        </member>
        <member name="T:Geocortex.Core.Pipelining.CommonExtensions">
            <summary>
            Extensions for helping with pipelining behavior.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.AsLazy``1(``0)">
            <summary>
            Creates a lazy wrapper for the given value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <returns>Returns the lazy value.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.AsSingle``1(``0)">
            <summary>
            Yields the specified value as a singleton.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value">The value.</param>
            <returns>
            Returns the single value as item in the collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.GetRelations(System.Collections.Generic.IEnumerable{Geocortex.Core.Pipelining.IPipelineFilter})">
            <summary>
            Produces the relation between handler and other filters.
            </summary>
            <param name="sequence">The sequence.</param>
            <returns>
            The relation.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.AsPartiallyOrderedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Tuple{``0,``0}})">
            <summary>
            Realizes a sequence from a partially ordered set using a discrete relation.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="nodes">The nodes.</param>
            <param name="relation">The relation.</param>
            <returns>
            Returns the sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.InferOrdering(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{Geocortex.Core.Pipelining.IPipelineFilter}})">
            <summary>
            Infers the ordering for the handlers given in the sequence.
            </summary>
            <param name="sequences">The sequences.</param>
            <returns>
            Returns the sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.GetPart``1(Geocortex.Core.Pipelining.IStateProvider{``0},Geocortex.Core.Pipelining.Message)">
            <summary>
            Gets the part.
            </summary>
            <typeparam name="TPart">The type of the part.</typeparam>
            <param name="provider">The provider.</param>
            <param name="message">The message.</param>
            <returns>
            Returns the part.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.TryGetPart``1(Geocortex.Core.Pipelining.Message,System.Object,``0@)">
            <summary>
            Tries to get the part.
            </summary>
            <typeparam name="TPart">The type of the part.</typeparam>
            <param name="message">The message.</param>
            <param name="key">The key.</param>
            <param name="part">The part.</param>
            <returns>
            Returns true if successful.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.GetState``1(Geocortex.Core.Pipelining.IStateProvider{``0},Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Gets the state.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <param name="provider">The provider.</param>
            <param name="context">The context.</param>
            <returns>Returns the state.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.TryGetState``1(Geocortex.Core.Pipelining.IPipelineContext,System.Object,``0@)">
            <summary>
            Tries to get the state.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
            <param name="context">The context.</param>
            <param name="key">The key.</param>
            <param name="state">The resulting state.</param>
            <returns>Returns true if successful.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.Peek``1(System.IObservable{System.Object})">
            <summary>
            Inspects the sequence and returns the sequence until the conditions are not satisfied.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <returns>
            Returns the new sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.Peek``1(System.IObservable{``0})">
            <summary>
            Inspects the sequence and returns the sequence until the conditions are not satisfied.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <returns>
            Returns the new sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.Peek``1(System.IObservable{System.Object},System.Func{``0,System.Boolean})">
            <summary>
            Inspects the sequence and returns the sequence until the conditions are not satisfied.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="selector">The selector.</param>
            <returns>
            Returns the new sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.Peek``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Inspects the sequence and returns the sequence until the conditions are not satisfied.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="selector">The selector.</param>
            <returns>
            Returns an enumerable capable of iterating over the sequence.
            </returns>
            <remarks>
            This is usually used to determine if a sequence has any results of interest.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.Filter``2(System.IObservable{``0},System.Func{System.Reactive.Notification{``0},System.Collections.Generic.IEnumerable{System.Reactive.Notification{``1}}})">
            <summary>
            Yields a sequence which retains messages that do not match the filter but filters any messages which do match.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="predicate">The filter.</param>
            <returns>
            Returns the new sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.Filter``2(System.IObservable{``0},System.Func{System.Reactive.Notification{``0},System.IObservable{System.Reactive.Notification{``1}}})">
            <summary>
            Yields a sequence which retains messages that do not match the filter but filters any messages which do match.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="predicate">The predicate.</param>
            <returns>
            Returns the new sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.Filter``3(System.IObservable{``0},``1,System.Func{``1,System.Reactive.Notification{``0},``1},System.Func{``1,System.Collections.Generic.IEnumerable{System.Reactive.Notification{``2}}})">
            <summary>
            Yields a sequence which retains messages that do not match the filter but filters any messages which do match.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TBucket">The type of the bucket.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="seed">The seed.</param>
            <param name="predicate">The predicate.</param>
            <param name="selector">The selector.</param>
            <returns>
            Returns the new sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.Filter``3(System.IObservable{``0},``1,System.Func{``1,System.Reactive.Notification{``0},``1},System.Func{``1,System.IObservable{System.Reactive.Notification{``2}}})">
            <summary>
            Yields a sequence which retains messages that do not match the filter but filters any messages which do match.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TBucket">The type of the bucket.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="seed">The seed.</param>
            <param name="predicate">The predicate.</param>
            <param name="selector">The selector.</param>
            <returns>
            Returns the new sequence.
            </returns>
            <remarks>
            This particular mechanism is used to transform a sequence picking out results with
            an ideal characteristic and possibly transforming said results. The sequence will
            still retain results not satisfying the characteristic.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.Consume``1(System.IObserver{``0},System.Reactive.Notification{``0})">
            <summary>
            Forwards the specified notification to the observer.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="observer">The observer.</param>
            <param name="notif">The notification to forward.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.TryFilter``2(System.Reactive.Notification{``0},``1@)">
            <summary>
            Attempts to cast the notification to a particular value.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="notification">The notification to inspect.</param>
            <param name="result">The result.</param>
            <returns>
            Returns true if the result is valid.
            </returns>
            <exception cref="T:System.ArgumentNullException">If notification is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.Replay``1(Geocortex.Core.Pipelining.IPipelineContext,System.IObservable{``0})">
            <summary>
            Replays the specified sequence served from a task-based worker.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="context">The context.</param>
            <param name="source">The source.</param>
            <returns>
            Returns the new sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.Replay``1(Geocortex.Core.Pipelining.IPipelineContext,System.Action{System.IObserver{``0}})">
            <summary>
            Replays the sequence produced by an asynchronous task.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="context">The context.</param>
            <param name="action">The action.</param>
            <returns>
            Returns the new sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.Dispose(System.IDisposable)">
            <summary>
            Disposes the specified disposable.
            </summary>
            <param name="disposable">The disposable.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.TryWait(System.Threading.Tasks.Task)">
            <summary>
            Tries to wait for the task to complete.
            </summary>
            <param name="task">The task.</param>
            <returns>
            Returns true if the task concluded without being cancelled.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.IsSingle``1(System.IObservable{System.Object})">
            <summary>
            Determines whether the sequence yields a single result.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <returns>Returns true if the sequence is a single result.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.IsSingle``1(System.IObservable{``0})">
            <summary>
            Determines whether the sequence yields a single result.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <returns>Returns true if the sequence is a single result.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.IsSingleError``1(System.IObservable{``0})">
            <summary>
            Determines whether the sequence yields a single error.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <returns>Returns true if the sequence is a empty with an error.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.RegisterForDisposal(Geocortex.Core.Pipelining.IPipelineContext,System.IDisposable[])">
            <summary>
            Registers for disposal.
            </summary>
            <param name="context">The context.</param>
            <param name="assets">The assets.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.RegisterForDisposal(Geocortex.Core.Pipelining.IPipelineContext,System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Registers for disposal.
            </summary>
            <param name="context">The context.</param>
            <param name="assets">The assets.</param>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.MakeReplay``1(Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Creates the replay subject.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="context">The context.</param>
            <returns>
            Returns the new replay subject.
            </returns>
            <exception cref="T:System.ArgumentNullException">If context is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.Append(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            Appends the value to the specified builder many times.
            </summary>
            <param name="builder">The builder.</param>
            <param name="value">The value.</param>
            <param name="repeatCount">The repeat count.</param>
            <exception cref="T:System.ArgumentNullException">If builder is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.GetCSharpName(System.Type)">
            <summary>
            Gets the name of the type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            Returns the type name.
            </returns>
            <exception cref="T:System.ArgumentNullException">If type is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.CommonExtensions.TryAttach(System.Object,Geocortex.Core.Pipelining.IPipelineTracer,System.Object)">
            <summary>
            Tries to attach the tracer to the entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="tracer">The tracer.</param>
            <param name="id">The id.</param>
            <returns>Returns the ID upon successfully attaching.</returns>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Common.StrandBasedTransform`1">
            <summary>
            Implements a filter that transforms a message strand into a new message strand.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <remarks>
            This pipeline filter is usually used fro aggregation or state based transformation. The transform
            is given a sub-sequence of messages (message strand) and will output a new message strand.
            <para>
            NOTE: During evaluation, the TryApplyTo method MUST NOT inspect the given strand, but it may,
            however, apply operators.
            </para>
            </remarks>
        </member>
        <member name="T:Geocortex.Core.Pipelining.IPipelineFilter">
            <summary>
            Implemented by components to interact with a message pipeline.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.IPipelineFilter.ProcessMessages(System.IObservable{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext,System.Collections.Generic.Stack{Geocortex.Core.Pipelining.IPipelineFilter})">
            <summary>
            Processes the messages.
            </summary>
            <param name="messages">The messages.</param>
            <param name="context">The context.</param>
            <param name="stack">The stack.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.IPipelineFilter.ProcessMessages(System.IObservable{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Processes the messages.
            </summary>
            <param name="messages">The messages.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.StrandBasedTransform`1.CanApplyTo(`0,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether the given message is applicable.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns true if processing should apply to the given message.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.StrandBasedTransform`1.TryApplyTo(`0,Geocortex.Core.Pipelining.IPipelineContext,System.IObservable{`0})">
            <summary>
            Tries to apply the filter to the given message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <param name="messages">The message strand.</param>
            <returns>
            Returns the new sequence of messages.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.StrandBasedTransform`1.ProcessMessages(System.IObservable{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext,System.Collections.Generic.Stack{Geocortex.Core.Pipelining.IPipelineFilter})">
            <summary>
            Processes the messages.
            </summary>
            <param name="messages">The messages.</param>
            <param name="context">The context.</param>
            <param name="stack">The stack.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.StrandBasedTransform`1.ProcessMessages(System.IObservable{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Processes the messages.
            </summary>
            <param name="messages">The messages.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.StrandBasedTransform`1.Bucket.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Common.StrandBasedTransform`1.Bucket"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.StrandBasedTransform`1.Bucket.#ctor(Geocortex.Core.Pipelining.Common.StrandBasedTransform{`0},`0,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Common.StrandBasedTransform`1.Bucket"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.StrandBasedTransform`1.Bucket.#ctor(Geocortex.Core.Pipelining.Common.StrandBasedTransform{`0}.Bucket,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Common.StrandBasedTransform`1.Bucket"/> class.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.StrandBasedTransform`1.Bucket.#ctor(System.Reactive.Notification{Geocortex.Core.Pipelining.Message})">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Common.StrandBasedTransform`1.Bucket"/> class.
            </summary>
            <param name="notif">The notification.</param>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Common.StrandBasedTransform`1.Bucket.Replay">
            <summary>
            Gets the replay.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Common.StrandBasedTransform`1.Bucket.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Common.CancellationHelper">
            <summary>
            Managed implementation of a cancellation queue.
            </summary>
            <remarks>
            This implementation does not require any disposing.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.CancellationHelper.Cancel">
            <summary>
            Performs cancellation of the actions.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.CancellationHelper.Register(System.Action)">
            <summary>
            Registers the specified action for cancellation.
            </summary>
            <param name="action">The action.</param>
            <returns>
            Returns an entity capable of removing the action when disposed.
            </returns>
            <remarks>
            NOTE: Disposing the returned entity is not required.
            </remarks>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Common.TraceHelper">
            <summary>
            Facility for helping with tracing.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.TraceHelper.Attach(Geocortex.Core.Pipelining.Common.TraceHelper@,Geocortex.Core.Pipelining.IPipelineTracer,System.Object)">
            <summary>
            Attaches the specified helper.
            </summary>
            <param name="helper">The helper.</param>
            <param name="tracer">The tracer.</param>
            <param name="id">The id.</param>
            <returns>Returns the ID of the attached tracer.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.TraceHelper.Inspect``1(Geocortex.Core.Pipelining.Common.TraceHelper,System.String,``0)">
            <summary>
            Outputs the specified message.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="helper">The helper.</param>
            <param name="message">The message.</param>
            <param name="entity">The entity.</param>
            <returns>Returns the new entity.</returns>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1">
            <summary>
            Traps messages and/or notifications and offers a chance to reshape the sequence.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.CanApplyTo(`0,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether this instance [can apply to] the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> if this instance [can apply to] the specified message; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.CanApplyTo(System.Reactive.Notification{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether this instance [can apply to] the specified notification.
            </summary>
            <param name="notif">The notification.</param>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> if this instance [can apply to] the specified notification; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.TryApplyTo(`0,Geocortex.Core.Pipelining.IPipelineContext,System.IObservable{`0})">
            <summary>
            Tries the apply to.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <param name="messages">The messages.</param>
            <returns>Returns the new message sequence.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.TryApplyTo(System.Reactive.Notification{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext,System.IObservable{System.Reactive.Notification{Geocortex.Core.Pipelining.Message}})">
            <summary>
            Tries the apply to.
            </summary>
            <param name="notif">The notification.</param>
            <param name="context">The context.</param>
            <param name="messages">The messages.</param>
            <returns>Returns the new notification sequence.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.ProcessMessages(System.IObservable{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext,System.Collections.Generic.Stack{Geocortex.Core.Pipelining.IPipelineFilter})">
            <summary>
            Processes the messages.
            </summary>
            <param name="messages">The messages.</param>
            <param name="context">The context.</param>
            <param name="stack">The stack.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.ProcessMessages(System.IObservable{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Processes the messages.
            </summary>
            <param name="messages">The messages.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.Bucket.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.Bucket"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.Bucket.#ctor(Geocortex.Core.Pipelining.Common.TrapBasedTransform{`0},`0,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.Bucket"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.Bucket.#ctor(Geocortex.Core.Pipelining.Common.TrapBasedTransform{`0},System.Reactive.Notification{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.Bucket"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="notif">The notification.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.Bucket.#ctor(Geocortex.Core.Pipelining.Common.TrapBasedTransform{`0}.Bucket,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.Bucket"/> class.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.Bucket.#ctor(Geocortex.Core.Pipelining.Common.TrapBasedTransform{`0}.Bucket,System.Reactive.Notification{Geocortex.Core.Pipelining.Message})">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.Bucket"/> class.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="notif">The notification.</param>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.Bucket.Replay">
            <summary>
            Gets the replay.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.Bucket.ReplayNotifs">
            <summary>
            Gets the notifications.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Common.TrapBasedTransform`1.Bucket.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Common.WorkerBasedTransform`1">
            <summary>
            Implements asynchronous processing of messages in a pipeline.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.WorkerBasedTransform`1.CanApplyTo(`0,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether the given message is applicable.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns true if processing should occur on the given message.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.WorkerBasedTransform`1.TryApplyTo(`0,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Tries to apply the filter to the given message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the new sequence of messages.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.WorkerBasedTransform`1.ProcessMessages(System.IObservable{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext,System.Collections.Generic.Stack{Geocortex.Core.Pipelining.IPipelineFilter})">
            <summary>
            Processes the messages.
            </summary>
            <param name="messages">The messages.</param>
            <param name="context">The context.</param>
            <param name="stack">The stack.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.WorkerBasedTransform`1.ProcessMessages(System.IObservable{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Processes the messages.
            </summary>
            <param name="messages">The messages.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Common.CancellationBasedPipelineContext">
            <summary>
            Performs cancellation upon disposing of the pipeline context.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.IPipelineContext">
            <summary>
            Context for pipeline based processing.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.IPipelineContext.RegisterForCancellation(System.Threading.CancellationTokenSource)">
            <summary>
            Registers the entity for cancellation.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            Returns an entity that may be disposed to avoid cancellation.
            </returns>
            <remarks>
            NOTE: Implementations should not require callers to dispose the returned entity.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.Pipelining.IPipelineContext.RegisterForWait(System.Threading.Tasks.Task)">
            <summary>
            Registers a task to wait on before disposal.
            </summary>
            <param name="task">The task.</param>
            <returns>Returns an entity that may be disposed to avoid waiting.</returns>
            <remarks>
            NOTE: Implementations should not require callers to dispose the returned entity.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.Pipelining.IPipelineContext.RegisterForDisposal(System.IDisposable)">
            <summary>
            Registers the entity for disposal.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            Returns an entity that may be used to avoid disposing.
            </returns>
            <remarks>
            NOTE: Implementations should not require callers to dispose the returned entity.
            </remarks>
        </member>
        <member name="P:Geocortex.Core.Pipelining.IPipelineContext.States">
            <summary>
            Gets the states.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.CancellationBasedPipelineContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Common.CancellationBasedPipelineContext"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.CancellationBasedPipelineContext.RegisterForCancellation(System.Threading.CancellationTokenSource)">
            <summary>
            Registers the entity for cancellation.
            </summary>
            <param name="entity">The entity to cancel.</param>
            <returns>
            Returns an entity that may be disposed to avoid cancellation.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.CancellationBasedPipelineContext.RegisterForWait(System.Threading.Tasks.Task)">
            <summary>
            Registers a task to wait on
            </summary>
            <param name="task">The task.</param>
            <returns>
            Returns an entity that may be disposed to avoid waiting.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.CancellationBasedPipelineContext.RegisterForDisposal(System.IDisposable)">
            <summary>
            Registers the entity for disposal.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            Returns an entity that may be used to avoid disposing.
            </returns>
            <remarks>
            NOTE: Implementations should not require callers to dispose the returned entity.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.CancellationBasedPipelineContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Common.CancellationBasedPipelineContext.States">
            <summary>
            Gets the states.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Conversion.StandardDateTimeConverter">
            <summary>
            Implements a type converter for converting date/times using methods aligning with ISO standards for the web.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Conversion.StandardDateTimeConverter.#ctor(Geocortex.Core.Conversion.ITypeConverterProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Conversion.StandardDateTimeConverter"/> class.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Geocortex.Core.Conversion.StandardDateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.StandardDateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If value is not within the supported range.</exception>
        </member>
        <member name="M:Geocortex.Core.Conversion.StandardDateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.StandardDateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If destinationType is not a within the range of supported types.</exception>
        </member>
        <member name="P:Geocortex.Core.Conversion.StandardDateTimeConverter.Epoch">
            <summary>
            Gets the epoch.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Conversion.StandardDateTimeConverter.TimeZone">
            <summary>
            Gets the time zone.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Conversion.StandardStringConverter">
            <summary>
            Implements a type converter that deals with strings.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Conversion.StandardStringConverter.#ctor(Geocortex.Core.Conversion.ITypeConverterProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Conversion.StandardStringConverter"/> class.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Geocortex.Core.Conversion.StandardStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.StandardStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.StandardStringConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Conversion.StandardStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If destinationType is not a within the range of supported types.</exception>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.DateTimeFeatureAdapter">
            <summary>
            Adapts the date/time values to the services' time zone setting.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Common.ExpandBasedTransform`1">
            <summary>
            Implementation of a pipeline filter which transforms messages.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.ExpandBasedTransform`1.CanApplyTo(`0,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether the message is applicable.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns true if applicable.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.ExpandBasedTransform`1.TryApplyTo(`0,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Applies the transform to the message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.ExpandBasedTransform`1.ProcessMessages(System.IObservable{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext,System.Collections.Generic.Stack{Geocortex.Core.Pipelining.IPipelineFilter})">
            <summary>
            Processes the messages.
            </summary>
            <param name="messages">The messages.</param>
            <param name="context">The context.</param>
            <param name="stack">The stack.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.ExpandBasedTransform`1.ProcessMessages(System.IObservable{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Processes the messages.
            </summary>
            <param name="messages">The messages.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.IRequestProcessor">
            <summary>
            Implemented by pipeline filters which deal with processing requests.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.DateTimeFeatureAdapter.CanApplyTo(Geocortex.Core.Pipelining.Web.FormRequest,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether this instance [can apply to] the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> if this instance [can apply to] the specified message; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.DateTimeFeatureAdapter.TryApplyTo(Geocortex.Core.Pipelining.Web.FormRequest,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Tries the apply to.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>Returns the message as a sequence.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.DateTimeFeatureAdapter.Shaper">
            <summary>
            Gets the shaper.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.DateTimeFeatureTweaker">
            <summary>
            Translates date/times into UTC values.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.IResponseProcessor">
            <summary>
            Implemented by pipeline filters which deal with processing responses.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.DateTimeFeatureTweaker.CanApplyTo(Geocortex.Core.Pipelining.Web.JsonArtifactCollection,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether this filter can apply to the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns true if this message should be handled by this filter.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.DateTimeFeatureTweaker.TryApplyTo(Geocortex.Core.Pipelining.Web.JsonArtifactCollection,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Tries the apply to.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>Returns the message as a transformed sequence.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.DateTimeFeatureTweaker.Shaper">
            <summary>
            Gets the shaper.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.CodeNameMapping">
            <summary>
            Helper to resolve codes and names.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.CodeNameMapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.CodeNameMapping"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.CodeNameMapping.Add(Newtonsoft.Json.Linq.JValue,Newtonsoft.Json.Linq.JValue)">
            <summary>
            Adds the specified code and name.
            </summary>
            <param name="code">The code.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.CodeNameMapping.CodeOf(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Gets the code for the name.
            </summary>
            <param name="name">The name.</param>
            <returns>Returns the code.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.CodeNameMapping.NameOf(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Gets the name for the code.
            </summary>
            <param name="code">The code.</param>
            <returns>Returns the name.</returns>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.CommonExtensions">
            <summary>
            Common extensions for dealing with GeoRest manipulation.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.CommonExtensions.Scrub(Geocortex.Core.Pipelining.Web.FormRequest)">
            <summary>
            Scrubs the specified message cleaning out all "known" fields.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.CommonExtensions.GetLiteralJson(Geocortex.Core.Pipelining.WebProxy.WebBasedRequestForwarder,Geocortex.Core.Pipelining.IPipelineContext,Geocortex.Core.Pipelining.Web.WebBasedRequest,Geocortex.Core.Pipelining.Web.WebBasedResponse@)">
            <summary>
            Gets the literal JSON.
            </summary>
            <param name="forwarder">The forwarder.</param>
            <param name="context">The context.</param>
            <param name="message">The message.</param>
            <param name="response">The response.</param>
            <returns>Returns the JSON if any.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.CommonExtensions.GetAdjustableTimeFields(Geocortex.Core.Pipelining.GeoRestShaper.ShaperProvider,Geocortex.Core.Pipelining.Message)">
            <summary>
            Gets the adjustable time fields.
            </summary>
            <param name="provider">The provider.</param>
            <param name="message">The message.</param>
            <returns>Returns the collection of adjustable time fields.</returns>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureSetFormatter">
            <summary>
            Helper class for formatting a feature set.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureSetFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureSetFormatter"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureSetFormatter.GetFormatter(Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior)">
            <summary>
            Gets the formatter.
            </summary>
            <param name="behavior">The behavior.</param>
            <returns>Returns the formatter for the given behavior.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureSetFormatter.Formatters">
            <summary>
            Gets the formatters.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FieldDomainMapping">
            <summary>
            Helper class for dealing with domains and fields.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FieldDomainMapping.Add(Newtonsoft.Json.Linq.JValue,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="domain">The domain.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FieldDomainMapping.TryGetDomain``1(Newtonsoft.Json.Linq.JValue,Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FieldDomainMapping,``0@)">
            <summary>
            Tries to get the domain.
            </summary>
            <typeparam name="TDomain">The type of the domain.</typeparam>
            <param name="key">The key.</param>
            <param name="defaults">The defaults.</param>
            <param name="domain">The domain.</param>
            <returns>Returns the domain for the field.</returns>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureFormatter">
            <summary>
            Helper class for formatting features.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureFormatter.#ctor(Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior,Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureFormatter"/> class.
            </summary>
            <param name="behavior">The behavior.</param>
            <param name="other">The other.</param>
            <exception cref="T:System.ArgumentNullException">If behavior is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureFormatter.Format(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Formats the specified feature.
            </summary>
            <param name="feature">The feature.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureFormatter.FormatAll(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Formats all.
            </summary>
            <param name="artifact">The artifact.</param>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureFormatter.FieldTypes">
            <summary>
            Gets the field types.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureFormatter.Visits">
            <summary>
            Gets the visits.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureFormatter.DisplayFieldName">
            <summary>
            Gets the display name of the field.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureFormatter.GeometryType">
            <summary>
            Gets the type of the geometry.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureFormatter.Headers">
            <summary>
            Gets the headers.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureFormatter.ObjectIdFieldName">
            <summary>
            Gets the name of the "OBJECTID" field.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureFormatter.TypeIdFieldName">
            <summary>
            Gets the name of the "TYPEID" field.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.FeatureFormatter.SpatialReference">
            <summary>
            Gets the spatial reference.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.TypeDomainMapping">
            <summary>
            Helper class for dealing with sub-types and domains.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.TypeDomainMapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.TypeDomainMapping"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.TypeDomainMapping.ConsumeSchema(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Consumes the schema.
            </summary>
            <param name="schema">The schema.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.TypeDomainMapping.CanResolveValues(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Determines whether the field (key) coincides with coded values.
            </summary>
            <param name="fieldKey">The key.</param>
            <returns>
              <c>true</c> if [has coded values] [the specified key]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.TypeDomainMapping.DomainsOf(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Obtains the domains of the specified type.
            </summary>
            <param name="typeId">The type id.</param>
            <returns>Returns the domain.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.TypeDomainMapping.CodeOf(Newtonsoft.Json.Linq.JValue,Newtonsoft.Json.Linq.JValue,Newtonsoft.Json.Linq.JValue)">
            <summary>
            Finds the code for the given type and field.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="fieldKey">The field key.</param>
            <param name="name">The name.</param>
            <returns>Returns the code.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.TypeDomainMapping.CodeOf(Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JValue,Newtonsoft.Json.Linq.JValue)">
            <summary>
            Find the code for the given type and field.
            </summary>
            <param name="featureAttributes">The feature attributes.</param>
            <param name="fieldKey">The field key.</param>
            <param name="name">The name.</param>
            <returns>Returns the code.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.TypeDomainMapping.IsTypeIdField(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Determines whether [is type id field] [the specified field key].
            </summary>
            <param name="fieldKey">The field key.</param>
            <returns>
              <c>true</c> if [is type id field] [the specified field key]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.TypeDomainMapping.NameOf(Newtonsoft.Json.Linq.JValue,Newtonsoft.Json.Linq.JValue,Newtonsoft.Json.Linq.JValue)">
            <summary>
            Find the name for the given type and field.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="fieldKey">The field key.</param>
            <param name="code">The code.</param>
            <returns>
            Returns the name.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.TypeDomainMapping.NameOf(Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JValue,Newtonsoft.Json.Linq.JValue)">
            <summary>
            Find the name for the given type and field.
            </summary>
            <param name="featureAttributes">The feature attributes.</param>
            <param name="fieldKey">The field key.</param>
            <param name="code">The code.</param>
            <returns>
            Returns the name.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.TypeDomainMapping.TypeOf(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Find the type.
            </summary>
            <param name="featureAttributes">The feature attributes.</param>
            <returns>Returns the type.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.TypeDomainMapping.Defaults">
            <summary>
            Gets the defaults.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.Helpers.TypeDomainMapping.Overrides">
            <summary>
            Gets the overrides.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.IGeometryFacility">
            <summary>
            Implemented by components to assist the GeoRestShaper in geometry operations.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.IGeometryFacility.BufferGeometry(Newtonsoft.Json.Linq.JObject,System.Double)">
            <summary>
            Buffers the geometry.
            </summary>
            <param name="geometry">The geometry.</param>
            <param name="unitTolerance">The unit tolerance.</param>
            <returns>
            Returns the new geometry buffered.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.IGeometryFacility.ComputeScale(System.Double,System.Double,Newtonsoft.Json.Linq.JToken,System.Double)">
            <summary>
            Gets the units per meter for a specific spatial reference.
            </summary>
            <param name="realDistance">The real distance.</param>
            <param name="visibleDistance">The visible distance.</param>
            <param name="sr">The spatial reference.</param>
            <param name="center">The center.</param>
            <returns>
            Returns the scale.
            </returns>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedRequestExpander">
            <summary>
            Expands a query-based request (find or identify) into a query per layer.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedRequestExpander.CanApplyTo(Geocortex.Core.Pipelining.Web.FormRequest,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether this instance [can apply to] the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> if this instance [can apply to] the specified message; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedRequestExpander.TryApplyTo(Geocortex.Core.Pipelining.Web.FormRequest,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Tries the apply to.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>Returns the new message sequence.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedRequestExpander.Forwarder">
            <summary>
            Gets the forwarder.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedRequestExpander.Proxy">
            <summary>
            Gets the proxy.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedRequestExpander.Shaper">
            <summary>
            Gets the Shaper.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.QueryResponseAggregator">
            <summary>
            Aggregates query responses into a single response.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.QueryResponseAggregator.CanApplyTo(Geocortex.Core.Pipelining.Web.JsonArtifactCollection,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether the given message is applicable.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns true if processing should apply to the given message.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.QueryResponseAggregator.TryApplyTo(Geocortex.Core.Pipelining.Web.JsonArtifactCollection,Geocortex.Core.Pipelining.IPipelineContext,System.IObservable{Geocortex.Core.Pipelining.Web.JsonArtifactCollection})">
            <summary>
            Applies the transform to the message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <param name="messages">The messages.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.QueryResponseAggregator.Shaper">
            <summary>
            Gets the pipeline.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.QueryResponsePruner">
            <summary>
            Prunes unwanted aspects of query responses.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.QueryResponsePruner.CanApplyTo(Geocortex.Core.Pipelining.Web.JsonArtifactCollection,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether this instance [can apply to] the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> if this instance [can apply to] the specified message; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.QueryResponsePruner.TryApplyTo(Geocortex.Core.Pipelining.Web.JsonArtifactCollection,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Tries the apply to.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>Returns the resulting message sequence.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.QueryResponsePruner.Shaper">
            <summary>
            Gets the shaper.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.RequestInterpreter">
            <summary>
            General GeoRest request interpreter.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.IRequestInterpreter">
            <summary>
            Implemented by pipeline filters which deal with interpreting requests.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.RequestInterpreter.CanApplyTo(Geocortex.Core.Pipelining.Web.FormRequest,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether this instance [can apply to] the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> if this instance [can apply to] the specified message; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.RequestInterpreter.TryApplyTo(Geocortex.Core.Pipelining.Web.FormRequest,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Tries the apply to.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>Returns the new message sequence.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.RequestInterpreter.Proxy">
            <summary>
            Gets the proxy.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.RequestInterpreter.Shaper">
            <summary>
            Gets the shaper.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.ResponseFormatter">
            <summary>
            Helps format responses.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.IResponseFormatter">
            <summary>
            Implemented by pipeline filters which deal with formatting responses.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.ResponseFormatter.CanApplyTo(Geocortex.Core.Pipelining.Web.JsonBasedResult,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether this instance [can apply to] the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> if this instance [can apply to] the specified message; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.ResponseFormatter.TryApplyTo(Geocortex.Core.Pipelining.Web.JsonBasedResult,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Tries the apply to.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>Returns the resulting sequence.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ResponseFormatter.Shaper">
            <summary>
            Gets the shaper.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.ResponseInspector">
            <summary>
            Inspects responses and possibly reshapes the sequence of messages for JSON output.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.IResponseInspector">
            <summary>
            Implemented by pipeline filters which deal with inspecting responses.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.ResponseInspector.CanApplyTo(Geocortex.Core.Pipelining.Web.JsonBasedResult,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether this instance [can apply to] the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> if this instance [can apply to] the specified message; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.ResponseInspector.CanApplyTo(System.Reactive.Notification{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether this instance [can apply to] the specified notification.
            </summary>
            <param name="notif">The notification.</param>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> if this instance [can apply to] the specified notification; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.ResponseInspector.TryApplyTo(Geocortex.Core.Pipelining.Web.JsonBasedResult,Geocortex.Core.Pipelining.IPipelineContext,System.IObservable{Geocortex.Core.Pipelining.Web.JsonBasedResult})">
            <summary>
            Tries the apply to.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <param name="messages">The messages.</param>
            <returns>Returns the new sequence of messages.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.ResponseInspector.TryApplyTo(System.Reactive.Notification{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext,System.IObservable{System.Reactive.Notification{Geocortex.Core.Pipelining.Message}})">
            <summary>
            Tries the apply to.
            </summary>
            <param name="notif">The notification.</param>
            <param name="context">The context.</param>
            <param name="messages">The messages.</param>
            <returns>Returns the new sequence of messages.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ResponseInspector.Shaper">
            <summary>
            Gets the shaper.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProfile">
            <summary>
            Holds basic configuration for forwarding/shaping requests.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProfile.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProfile"/> class.
            </summary>
            <param name="config">The config.</param>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProfile.CachePolicy">
            <summary>
            Gets the cache policy.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProfile.Conversion">
            <summary>
            Gets the conversion.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProfile.InterpretRequests">
            <summary>
            Gets a value indicating whether requests are interpreted.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProfile.ResolveCodesToNames">
            <summary>
            Gets a value indicating whether codes should be resolved into names.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProfile.Credentials">
            <summary>
            Gets the credentials.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProfile.BaseAddress">
            <summary>
            Gets the base address.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProfile.ContextAddress">
            <summary>
            Gets the context address.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProfile.LocalAddress">
            <summary>
            Gets the local address.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProfile.RemoteAddress">
            <summary>
            Gets the remote address.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProfile.ResultLimit">
            <summary>
            Gets the result limit.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.HttpRouter.HttpApplicationRouter">
            <summary>
            Wrapper for HTTP-application based HTTP-router.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter">
            <summary>
            Gets the default http provider.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.ApplyResponseTransforms">
            <summary>
            Applies the response transforms.
            </summary>
            <returns>Returns the compression stream if any.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.ProcessRequestCore">
            <summary>
            Processes the request core.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.ProcessRequestCore(Geocortex.Core.Pipelining.Message,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Processes the request.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.IsMatchFor(System.UriTemplate)">
            <summary>
            Determines whether the specified template is match.
            </summary>
            <param name="template">The template.</param>
            <returns>
              <c>true</c> if the specified template is match; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">If template is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.IsMatchFor(System.UriTemplate,System.Uri)">
            <summary>
            Determines whether the specified template is match.
            </summary>
            <param name="template">The template.</param>
            <param name="candidate">The candidate.</param>
            <returns>
              <c>true</c> if the specified template is match; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.GetMatchFor(System.UriTemplate)">
            <summary>
            Determines whether the specified template is a match and returns it.
            </summary>
            <param name="template">The template.</param>
            <returns>
            Returns the match.
            </returns>
            <exception cref="T:System.ArgumentNullException">If template is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.GetMatchFor(System.UriTemplate,System.Uri)">
            <summary>
            Determines whether the specified template is a match and returns it.
            </summary>
            <param name="template">The template.</param>
            <param name="candidate">The candidate.</param>
            <returns>
            Returns the match.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.MapRequest">
            <summary>
            Maps the request.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.ProcessRequest">
            <summary>
            Processes the request.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.
            </summary>
            <returns>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.Pipeline">
            <summary>
            Gets the pipeline.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.ApplicationPath">
            <summary>
            Gets the application path.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.RequestPath">
            <summary>
            Gets the request path.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.ResponseEncodings">
            <summary>
            Gets the response encodings.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.ResponseFormat">
            <summary>
            Gets or sets the response format.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.ResponseTransforms">
            <summary>
            Gets the response transforms.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.Request">
            <summary>
            Gets the request.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpBasedRouter.Response">
            <summary>
            Gets the response.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpApplicationRouter.Application">
            <summary>
            Gets the application.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpApplicationRouter.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.HttpRouter.HttpChunkedStream">
            <summary>
            Implementation of a stream that can chunk data.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpChunkedStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpChunkedStream.Decode(System.IO.Stream,System.Boolean)">
            <summary>
            Decodes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="leaveOpen">if set to <c>true</c> [leave open].</param>
            <returns>Returns the stream.</returns>
            <exception cref="T:System.ArgumentNullException">If stream is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpChunkedStream.Encode(System.IO.Stream,System.Boolean)">
            <summary>
            Encodes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="leaveOpen">if set to <c>true</c> [leave open].</param>
            <returns>Returns the stream.</returns>
            <exception cref="T:System.ArgumentNullException">If stream is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpChunkedStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the stream has already been disposed.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpChunkedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.NotSupportedException">If the stream does not support reading.</exception>
            <exception cref="T:System.ArgumentNullException">If buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less that zero or greater than the length of the buffer.</exception>
            <exception cref="T:System.ObjectDisposedException">If the stream has already been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">If the instance is in a faulted state.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpChunkedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpChunkedStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpChunkedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.NotSupportedException">If the stream does not support reading.</exception>
            <exception cref="T:System.ArgumentNullException">If buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If offset is less than zero or greater than the length of the buffer.</exception>
            <exception cref="T:System.ObjectDisposedException">If the stream has already been disposed.</exception>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpChunkedStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpChunkedStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpChunkedStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpChunkedStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpChunkedStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.NotSupportedException">The setter always throws.</exception>
        </member>
        <member name="T:Geocortex.Core.Pipelining.HttpRouter.HttpMessage">
            <summary>
            Placeholder for a routed HTTP-based message.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Common.EmptyMessage">
            <summary>
            An implementation of message that carries no content.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Message">
            <summary>
            Represents a message that contains content for processing.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.IPipelineTraceable">
            <summary>
            Implemented by components wishing to participate in tracing.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.IPipelineTraceable.Attach(Geocortex.Core.Pipelining.IPipelineTracer,System.Object)">
            <summary>
            Attaches the specified tracer.
            </summary>
            <param name="tracer">The tracer.</param>
            <param name="id">The id.</param>
            <returns>Returns true if the tracer was attached.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Message.Attach(Geocortex.Core.Pipelining.IPipelineTracer,System.Object)">
            <summary>
            Attaches the specified tracer.
            </summary>
            <param name="tracer">The tracer.</param>
            <param name="id">The id.</param>
            <returns>
            Returns true if the tracer was attached.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Message.Output(System.String,System.Object)">
            <summary>
            Outputs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Message.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Message"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Message.#ctor(Geocortex.Core.Pipelining.Message)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Message"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Message.CreateCopy">
            <summary>
            Creates the copy of this .message.
            </summary>
            <returns>Returns the copy.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Message.IsReaderSupported``1(Geocortex.Core.Pipelining.MessageFormat)">
            <summary>
            Determines whether the reader type is supported.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <param name="format">The format.</param>
            <returns>
              <c>true</c> if the reader is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Message.IsWriterSupported``1(Geocortex.Core.Pipelining.MessageFormat)">
            <summary>
            Determines whether the writer type is supported.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <param name="format">The format.</param>
            <returns>
              <c>true</c> if [is writer supported] [the specified format]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Message.OpenContent``1(Geocortex.Core.Pipelining.MessageFormat,System.Text.Encoding)">
            <summary>
            Opens the content.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <param name="format">The format.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the reader of interest.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Message.CopyContent``1(``0,Geocortex.Core.Pipelining.MessageFormat,System.Text.Encoding)">
            <summary>
            Copies the content.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <param name="writer">The writer.</param>
            <param name="format">The format.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Message.Parts">
            <summary>
            Gets the parts.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Message.Assets">
            <summary>
            Gets the assets.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Message.Format">
            <summary>
            Gets the format.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Message.IsBufferBased">
            <summary>
            Gets a value indicating whether this message is buffer based.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Message.IsStreamBased">
            <summary>
            Gets a value indicating whether this message is stream based.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Message.CanCopy">
            <summary>
            Gets a value indicating whether this message can be copied.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Message.CanRead">
            <summary>
            Gets a value indicating whether this message can be read from.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Message.CanWrite">
            <summary>
            Gets a value indicating whether this message can be written out.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.EmptyMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Common.EmptyMessage"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.EmptyMessage.#ctor(Geocortex.Core.Pipelining.Message)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Common.EmptyMessage"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.EmptyMessage.CreateCopy">
            <summary>
            Creates the copy of this .message.
            </summary>
            <returns>
            Returns the copy.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.EmptyMessage.IsReaderSupported``1(Geocortex.Core.Pipelining.MessageFormat)">
            <summary>
            Determines whether the reader type is supported.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <param name="format">The format.</param>
            <returns>
              <c>true</c> if the reader is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.EmptyMessage.IsWriterSupported``1(Geocortex.Core.Pipelining.MessageFormat)">
            <summary>
            Determines whether the writer type is supported.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <param name="format">The format.</param>
            <returns>
              <c>true</c> if [is writer supported] [the specified format]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.EmptyMessage.OpenContent``1(Geocortex.Core.Pipelining.MessageFormat,System.Text.Encoding)">
            <summary>
            Opens the content.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <param name="format">The format.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the reader of interest.
            </returns>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.EmptyMessage.CopyContent``1(``0,Geocortex.Core.Pipelining.MessageFormat,System.Text.Encoding)">
            <summary>
            Copies the content.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <param name="writer">The writer.</param>
            <param name="format">The format.</param>
            <param name="encoding">The encoding.</param>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Common.EmptyMessage.Assets">
            <summary>
            Gets the assets.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Common.EmptyMessage.Format">
            <summary>
            Gets the format.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Common.EmptyMessage.IsBufferBased">
            <summary>
            Gets a value indicating whether this message is buffer based.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Common.EmptyMessage.IsStreamBased">
            <summary>
            Gets a value indicating whether this message is stream based.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Common.EmptyMessage.CanCopy">
            <summary>
            Gets a value indicating whether this message can be copied.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Common.EmptyMessage.CanRead">
            <summary>
            Gets a value indicating whether this message can be read from.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Common.EmptyMessage.CanWrite">
            <summary>
            Gets a value indicating whether this message can be written out.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.HttpRouter.HttpRequestMultipartFormContent">
            <summary>
            Wrapper that offers the HTTP-request multipart form content.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Web.IMultipartFormContent">
            <summary>
            Implemented by components that wish to offer multipart form content.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.IMultipartFormContent.WriteTo(System.IO.StreamWriter,System.String)">
            <summary>
            Writes out the content to the stream.
            </summary>
            <param name="writer">The writer.</param>
            <param name="boundary">The boundary.</param>
            <returns>Returns the number of items written.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpRequestMultipartFormContent.#ctor(System.Web.HttpRequestBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.HttpRouter.HttpRequestMultipartFormContent"/> class.
            </summary>
            <param name="request">The request.</param>
            <exception cref="T:System.ArgumentNullException">If request is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpRequestMultipartFormContent.WriteTo(System.IO.StreamWriter,System.String)">
            <summary>
            Writes out the content to the stream.
            </summary>
            <param name="writer">The writer.</param>
            <param name="boundary">The boundary.</param>
            <returns>
            Returns the number of items written.
            </returns>
            <exception cref="T:System.ArgumentNullException">If writer is null.</exception>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Web.MultipartBoundaryGeneratorStream">
            <summary>
            Generates a multipart boundary.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.MultipartBoundaryGeneratorStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.MultipartBoundaryGeneratorStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.MultipartBoundaryGeneratorStream"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.MultipartBoundaryGeneratorStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the stream has already been disposed.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.MultipartBoundaryGeneratorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.MultipartBoundaryGeneratorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.MultipartBoundaryGeneratorStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.MultipartBoundaryGeneratorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentNullException">If buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.MultipartBoundaryGeneratorStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">The byte to write to the stream.</param>
            <exception cref="T:System.ObjectDisposedException">If the stream has already been disposed.</exception>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.MultipartBoundaryGeneratorStream.Boundary">
            <summary>
            Gets the boundary.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.MultipartBoundaryGeneratorStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.MultipartBoundaryGeneratorStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.MultipartBoundaryGeneratorStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.MultipartBoundaryGeneratorStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.MultipartBoundaryGeneratorStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.NotSupportedException">The setter always throws.</exception>
        </member>
        <member name="T:Geocortex.Core.Pipelining.IPipelineTracer">
            <summary>
            Interface for introducing pipeline tracing.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.IPipelineTracer.Inspect``1(System.Object,System.String,``0)">
            <summary>
            Writes the message.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="id">The ID of the entity..</param>
            <param name="message">The message.</param>
            <param name="entity">The entity.</param>
            <returns>Returns the new entity.</returns>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Tracing.WebTracer">
            <summary>
            Logs the activity of a pipeline.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.IRequestSequencer">
            <summary>
            Implemented by filters to participate in request sequencing.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.IResponseSanitizer">
            <summary>
            Implemented by pipeline filters which deal with inspecting responses.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.IRequestFormatter">
            <summary>
            Formats requests for pipeline processing.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.IResponseSequencer">
            <summary>
            Implemented by filters to participate in request sequencing.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.RequestSequencer">
            <summary>
            Sequences requests.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.WebProxy.RequestSequencer.CanApplyTo(Geocortex.Core.Pipelining.Web.WebBasedRequest,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether this instance can apply to the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> if this instance [can apply to] the specified message; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.WebProxy.RequestSequencer.TryApplyTo(Geocortex.Core.Pipelining.Web.WebBasedRequest,Geocortex.Core.Pipelining.IPipelineContext,System.IObservable{Geocortex.Core.Pipelining.Web.WebBasedRequest})">
            <summary>
            Attempts to apply the filter to the sequence.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <param name="messages">The messages.</param>
            <returns>Returns the new sequence.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.RequestSequencer.Proxy">
            <summary>
            Gets the proxy.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.ResponseSequencer">
            <summary>
            Sequences responses.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.WebProxy.ResponseSequencer.CanApplyTo(Geocortex.Core.Pipelining.Web.WebBasedResponse,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether this instance can apply to the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> if this instance [can apply to] the specified message; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.WebProxy.ResponseSequencer.TryApplyTo(Geocortex.Core.Pipelining.Web.WebBasedResponse,Geocortex.Core.Pipelining.IPipelineContext,System.IObservable{Geocortex.Core.Pipelining.Web.WebBasedResponse})">
            <summary>
            Attempts to apply the filter to the sequence.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <param name="messages">The messages.</param>
            <returns>Returns the new sequence.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.ResponseSequencer.Proxy">
            <summary>
            Gets the proxy.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Web.JsonArtifactCollection">
            <summary>
            Implements a message that can stream JSON artifacts.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Web.JsonBasedResult">
            <summary>
            Message implementation which is backed by JSON content.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Web.WebBasedResponse">
            <summary>
            Message implementation that models a web response.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.WebBasedResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.WebBasedResponse"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.WebBasedResponse.#ctor(Geocortex.Core.Pipelining.Message)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.WebBasedResponse"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.WebBasedResponse.#ctor(Geocortex.Core.Pipelining.Web.WebBasedResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.WebBasedResponse"/> class.
            </summary>
            <param name="other">The other message to copy characteristics from.</param>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.WebBasedResponse.Error">
            <summary>
            Gets or sets the error.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.WebBasedResponse.ErrorStatus">
            <summary>
            Gets or sets the error status.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.WebBasedResponse.Status">
            <summary>
            Gets or sets the status.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.WebBasedResponse.StatusDescription">
            <summary>
            Gets or sets the status description.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.WebBasedResponse.StatusFlavor">
            <summary>
            Gets or sets the status flavor.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.WebBasedResponse.StatusFlavorDescription">
            <summary>
            Gets or sets the status flavor description.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.WebBasedResponse.IsFromCache">
            <summary>
            Gets or sets a value indicating whether this instance is from cache.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.WebBasedResponse.Headers">
            <summary>
            Gets the headers.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonBasedResult.CopyContent(Newtonsoft.Json.JsonWriter)">
            <summary>
            Copies the content.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonBasedResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.JsonBasedResult"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonBasedResult.#ctor(Geocortex.Core.Pipelining.Message)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.JsonBasedResult"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonBasedResult.#ctor(Geocortex.Core.Pipelining.Web.WebBasedResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.JsonBasedResult"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonBasedResult.IsWriterSupported``1(Geocortex.Core.Pipelining.MessageFormat)">
            <summary>
            Determines whether the writer type is supported.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <param name="format">The format.</param>
            <returns>
              <c>true</c> if [is writer supported] [the specified format]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonBasedResult.CopyContent``1(``0,Geocortex.Core.Pipelining.MessageFormat,System.Text.Encoding)">
            <summary>
            Copies the content.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <param name="writer">The writer.</param>
            <param name="format">The format.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.JsonBasedResult.Format">
            <summary>
            Gets the format.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.JsonBasedResult.CanWrite">
            <summary>
            Gets a value indicating whether this message can be written out.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.JsonBasedResult.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.CopyContent(Newtonsoft.Json.JsonWriter)">
            <summary>
            Copies the content.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.CreateFrom(Geocortex.Core.Pipelining.Message)">
            <summary>
            Creates a JSON artifact stream from the given message using its content.
            </summary>
            <param name="message">The message.</param>
            <returns>Returns the new message.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.CreateFrom(Geocortex.Core.Pipelining.Web.WebBasedResponse)">
            <summary>
            Creates a JSON artifact stream from the given message using its content.
            </summary>
            <param name="message">The message.</param>
            <returns>Returns the new message.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.#ctor(System.Collections.Generic.IEnumerator{Newtonsoft.Json.Linq.JObject},System.IDisposable[])">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.JsonArtifactCollection"/> class.
            </summary>
            <param name="iterator">The iterator.</param>
            <param name="disposables">The disposables.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.#ctor(Geocortex.Core.Pipelining.Message,System.Collections.Generic.IEnumerator{Newtonsoft.Json.Linq.JObject},System.IDisposable[])">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.JsonArtifactCollection"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="iterator">The iterator.</param>
            <param name="disposables">The disposables.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.#ctor(Geocortex.Core.Pipelining.Message,System.Collections.Generic.IEnumerator{Newtonsoft.Json.Linq.JObject},System.Collections.Generic.IEnumerable{System.IDisposable},System.IDisposable[])">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.JsonArtifactCollection"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="iterator">The iterator.</param>
            <param name="assets">The assets.</param>
            <param name="disposables">The disposables.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.#ctor(Geocortex.Core.Pipelining.Web.WebBasedResponse,System.Collections.Generic.IEnumerator{Newtonsoft.Json.Linq.JObject},System.IDisposable[])">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.JsonArtifactCollection"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="iterator">The iterator.</param>
            <param name="disposables">The disposables.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.#ctor(Geocortex.Core.Pipelining.Web.WebBasedResponse,System.Collections.Generic.IEnumerator{Newtonsoft.Json.Linq.JObject},System.Collections.Generic.IEnumerable{System.IDisposable},System.IDisposable[])">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.JsonArtifactCollection"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="iterator">The iterator.</param>
            <param name="assets">The assets.</param>
            <param name="disposables">The disposables.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>Returns the enumerator.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.Peek">
            <summary>
            Peeks this instance.
            </summary>
            <returns>Returns the sequence at the current head.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.CreateCopy">
            <summary>
            Creates the copy of this .message.
            </summary>
            <returns>
            Returns the copy.
            </returns>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.IsReaderSupported``1(Geocortex.Core.Pipelining.MessageFormat)">
            <summary>
            Determines whether the reader type is supported.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <param name="format">The format.</param>
            <returns>
              <c>true</c> if the reader is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.OpenContent``1(Geocortex.Core.Pipelining.MessageFormat,System.Text.Encoding)">
            <summary>
            Opens the content.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <param name="format">The format.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the reader of interest.
            </returns>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.Assets">
            <summary>
            Gets the assets.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.IsBufferBased">
            <summary>
            Gets a value indicating whether this message is buffer based.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.IsStreamBased">
            <summary>
            Gets a value indicating whether this message is stream based.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.CanCopy">
            <summary>
            Gets a value indicating whether this message can be copied.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.JsonArtifactCollection.CanRead">
            <summary>
            Gets a value indicating whether this message can be read from.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.ResponseInterpreter">
            <summary>
            Marshals raw binary responses into a proper format.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.IResponseInterpreter">
            <summary>
            Implemented by pipeline filters which deal with interpreting responses.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.ResponseInterpreter.CanApplyTo(Geocortex.Core.Pipelining.Web.WebBasedResponse,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Applies the transform to the message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.ResponseInterpreter.TryApplyTo(Geocortex.Core.Pipelining.Web.WebBasedResponse,Geocortex.Core.Pipelining.IPipelineContext,System.IObservable{Geocortex.Core.Pipelining.Web.WebBasedResponse})">
            <summary>
            Tries to apply the filter to the given message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <param name="messages">The message strand.</param>
            <returns>
            Returns the new sequence of messages.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ResponseInterpreter.Shaper">
            <summary>
            Gets the shaper.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Web.CommonTools">
            <summary>
            Common tools for dealing with web content.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.CommonTools.SplitQualityString(System.String)">
            <summary>
            Splits the quality string.
            </summary>
            <param name="qualityString">The quality string.</param>
            <returns>Returns a sequence ordered by quality.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.CommonTools.GetEncodingsByQuality(System.String)">
            <summary>
            Gets the encodings by quality.
            </summary>
            <param name="qualityString">The quality string.</param>
            <returns>Returns the sequence of encodings by quality.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.CommonTools.TryGetEncodings(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Tries to get the encodings from the names.
            </summary>
            <param name="encodingNames">The encoding names.</param>
            <returns>Returns any possible encodings.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.CommonTools.TryGetEncoding(System.String)">
            <summary>
            Tries to find the encoding by name.
            </summary>
            <param name="name">The name.</param>
            <returns>Returns the encoding or null.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.CommonTools.TryGetResponseStream(System.Net.WebResponse)">
            <summary>
            Tries the get response stream.
            </summary>
            <param name="response">The response.</param>
            <returns>Returns the stream or null.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.CommonTools.Format(System.Net.HttpStatusCode,System.Object)">
            <summary>
            Formats the specified HTTP status code.
            </summary>
            <param name="code">The code.</param>
            <param name="message">The message.</param>
            <returns>Returns the format.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.CommonTools.ParseSuffix(System.String)">
            <summary>
            Parses the suffix (that which comes after the ?).
            </summary>
            <param name="uriString">The URI string.</param>
            <returns>Returns the parsed suffix.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.CommonTools.ParseUri(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Parses the URI and holds onto the query portion.
            </summary>
            <param name="uriString">The URI string.</param>
            <param name="query">The query.</param>
            <returns>Returns the URI.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.CommonTools.ReadJsonObject(Geocortex.Core.Pipelining.Message)">
            <summary>
            Reads the JSON object.
            </summary>
            <param name="message">The message.</param>
            <returns>Returns the JSON.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.CommonTools.ReadArtifact(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads the artifact.
            </summary>
            <param name="reader">The reader.</param>
            <param name="name">The name.</param>
            <returns>Returns the specified artifact.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.CommonTools.ToEnumerator(Newtonsoft.Json.JsonReader)">
            <summary>
            Converts the JSON reader into an artifact reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns>Returns the iterator.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.CommonTools.Mangle(Geocortex.Core.Pipelining.Web.JsonArtifactCollection,System.Func{Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject})">
            <summary>
            Mangles the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="selector">The selector.</param>
            <returns>Returns the mangled results.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.CommonTools.SelectTokens``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.String)">
            <summary>
            Selects the tokens.
            </summary>
            <typeparam name="T">The type of the token.</typeparam>
            <param name="tokens">The tokens.</param>
            <param name="path">The path.</param>
            <returns>Returns the JSON tokens.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.CommonTools.SelectTokens``1(Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>
            Selects the tokens.
            </summary>
            <typeparam name="T">The type of the token.</typeparam>
            <param name="token">The token.</param>
            <param name="path">The path.</param>
            <returns>
            Returns the JSON tokens.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.CommonTools.MoveValue(System.Collections.Specialized.NameValueCollection,System.String,System.String[])">
            <summary>
            Moves the value.
            </summary>
            <param name="values">The values.</param>
            <param name="name">The name.</param>
            <param name="newNames">The new names.</param>
            <exception cref="T:System.ArgumentNullException">If values is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.CommonTools.TryParseJson``1(System.String,``0@)">
            <summary>
            Tries to parse the string into JSON.
            </summary>
            <typeparam name="TToken">The type of the token.</typeparam>
            <param name="json">The json.</param>
            <param name="token">The token.</param>
            <returns>Returns true if the JSON was properly parsed.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.CommonTools.ParseEnvelope(System.String)">
            <summary>
            Parses the envelope.
            </summary>
            <param name="numbers">The numbers.</param>
            <returns>Returns the envelope.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.CommonTools.ParseNumbers(System.String)">
            <summary>
            Parses the numbers.
            </summary>
            <param name="numbers">The numbers.</param>
            <returns>Returns the sequence of numbers.</returns>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Common.FilterCollection`1">
            <summary>
            Defines a group of pipeline filters (and implements a pipeline filter).
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.FilterCollection`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.FilterCollection`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.FilterCollection`1.ProcessMessages(System.IObservable{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext,System.Collections.Generic.Stack{Geocortex.Core.Pipelining.IPipelineFilter})">
            <summary>
            Processes the messages.
            </summary>
            <param name="messages">The messages.</param>
            <param name="context">The context.</param>
            <param name="stack">The stack.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.FilterCollection`1.ProcessMessages(System.IObservable{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Processes the messages.
            </summary>
            <param name="messages">The messages.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.CodedValueSchemaTweaker">
            <summary>
            Fixes the schema when converting codes to names.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.CodedValueSchemaTweaker.CanApplyTo(Geocortex.Core.Pipelining.Web.JsonArtifactCollection,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether the message is applicable.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns true if applicable.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.CodedValueSchemaTweaker.TryApplyTo(Geocortex.Core.Pipelining.Web.JsonArtifactCollection,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Applies the transform to the message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.CodedValueSchemaTweaker.Shaper">
            <summary>
            Gets the shaper.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.ShaperSettings">
            <summary>
            Holds the shaper settings.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.ShaperSettings.OnImportsSatisfied(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Called when a part's imports have been satisfied and it is safe to use.
            </summary>
            <param name="configs">The configs.</param>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperSettings.Profiles">
            <summary>
            Gets the profiles.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.IRequestInspector">
            <summary>
            Implemented by pipeline filters which deal with inspecting requests.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProvider">
            <summary>
            Provides the GeoRest shaping pipeline.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.IStateProvider`1">
            <summary>
            Provides access to pipeline state.
            </summary>
            <typeparam name="TState">The type of the state.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Pipelining.IStateProvider`1.CreateState">
            <summary>
            Creates a new state.
            </summary>
            <returns>Returns the newly created state.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.IStateProvider`1.StateKey">
            <summary>
            Gets the key for locating the state.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProvider.CreateState">
            <summary>
            Creates the part.
            </summary>
            <returns>Returns the new part.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProvider.StateKey">
            <summary>
            Gets the part key.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProvider.QueryBasedRequestInterpreter">
            <summary>
            Gets the query based request interpreter.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProvider.LayerSchemaResolver">
            <summary>
            Gets the layer schema resolver.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProvider.FindRequestInterpreters">
            <summary>
            Gets the find request interpreters.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProvider.IdentifyRequestInterpreters">
            <summary>
            Gets the identify request interpreters.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProvider.QueryResponsePruner">
            <summary>
            Gets the query response pruner.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProvider.QueryResponseAggregator">
            <summary>
            Gets the query response aggregator.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProvider.Proxy">
            <summary>
            Gets the proxy.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProvider.BeforeRequestProcessors">
            <summary>
            Gets the filters that should occur before processing.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProvider.BeforeRequestSequencers">
            <summary>
            Gets the filters that should occur before the request sequencers.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperProvider.BeforeResponseInspectors">
            <summary>
            Gets the filters that should occur before the response inspectors.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.LayerSchemaResolver">
            <summary>
            Resolves the schema before normal request processing occurs.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.LayerSchemaResolver.CanApplyTo(Geocortex.Core.Pipelining.Web.FormRequest,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether the given message is applicable.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns true if processing should occur on the given message.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.LayerSchemaResolver.TryApplyTo(Geocortex.Core.Pipelining.Web.FormRequest,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Tries to apply the filter to the given message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the new sequence of messages.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.LayerSchemaResolver.Forwarder">
            <summary>
            Gets the forwarder.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.LayerSchemaResolver.Shaper">
            <summary>
            Gets the shaper.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior">
            <summary>
            Defines processing behavior for the message.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.#ctor(Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.Conversion">
            <summary>
            Gets or sets the conversion.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.LayerSchema">
            <summary>
            Gets or sets the layer schema.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.ResultHeaders">
            <summary>
            Gets or sets the layer artifacts.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.ResolveCodesToNames">
            <summary>
            Gets or sets a value indicating whether the pipeline should resolve codes to names.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.VisibleLayersOnly">
            <summary>
            Gets or sets a value indicating whether the pipeline should process layers which are visible only.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.RequestCacheDirectives">
            <summary>
            Gets the request cache directives.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.InterpretRequests">
            <summary>
            Gets or sets a value indicating whether the shaper should interpret requests.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.InterpretApplyEditsRequests">
            <summary>
            Gets or sets a value indicating whether the pipeline should interpret edit requests.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.InterpretFindRequests">
            <summary>
            Gets or sets a value indicating whether the pipeline should interpret find requests.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.InterpretIdentifyRequests">
            <summary>
            Gets or sets a value indicating whether the pipeline should interpret identify requests.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.ResolveLayerSchema">
            <summary>
            Gets or sets a value indicating whether [resolve layer schema].
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.AggregateQueryResponses">
            <summary>
            Gets or sets a value indicating whether to aggregate query responses.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.FormatResponses">
            <summary>
            Gets or sets a value indicating whether or not to format responses.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.InspectResponses">
            <summary>
            Gets or sets a value indicating whether the pipeline should interpret messages as a query responses.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.InterpretResponses">
            <summary>
            Gets or sets a value indicating whether the pipeline should interpret messages as a query responses.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.InterpretQueryResponses">
            <summary>
            Gets or sets a value indicating whether [interpret query responses].
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.InterpretSchemaResponses">
            <summary>
            Gets or sets a value indicating whether filters should interpret schema responses.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.LayerResultLimit">
            <summary>
            Gets or sets the result family limit.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.QueryResultFields">
            <summary>
            Gets or sets the query result fields.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.ShaperBehavior.QueryResultLimit">
            <summary>
            Gets or sets the result limit.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.CodedValueSearcher">
            <summary>
            Searches for coded values when handling find requests.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedFindRequestInterpreter">
            <summary>
            Implements basic functionality for dealing with find requests in terms of a query.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedFindRequestInterpreter.GetWhereClause(System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.Boolean)">
            <summary>
            Gets the where clause.
            </summary>
            <param name="value">The value.</param>
            <param name="schema">The schema.</param>
            <param name="field">The field.</param>
            <param name="contains">if set to <c>true</c> [contains].</param>
            <returns>Returns the where clause or a null value.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedFindRequestInterpreter.GetNames(System.String)">
            <summary>
            Gets the names.
            </summary>
            <param name="names">The names.</param>
            <returns>Returns the names given in a string.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedFindRequestInterpreter.GetSearchFields(Geocortex.Core.Pipelining.Web.FormRequest)">
            <summary>
            Gets the search fields.
            </summary>
            <param name="message">The message.</param>
            <returns>Returns the search fields</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedFindRequestInterpreter.GetSearchValues(Geocortex.Core.Pipelining.Web.FormRequest)">
            <summary>
            Gets the search values.
            </summary>
            <param name="message">The message.</param>
            <returns>Returns the search values.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedFindRequestInterpreter.Generate(Geocortex.Core.Pipelining.Web.FormRequest,Geocortex.Core.Pipelining.IPipelineContext,Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Generates the specified request for forwarding on.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <param name="field">The field.</param>
            <param name="whereClause">The where clause.</param>
            <returns>
            Returns the new message.
            </returns>
            <exception cref="T:System.ArgumentNullException">If field is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedFindRequestInterpreter.CanApplyTo(Geocortex.Core.Pipelining.Web.FormRequest,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether the message is applicable.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns true if applicable.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedFindRequestInterpreter.TryApplyTo(Geocortex.Core.Pipelining.Web.FormRequest,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Applies the transform to the message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedFindRequestInterpreter.Shaper">
            <summary>
            Gets the shaper.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.CodedValueSearcher.CanApplyTo(Geocortex.Core.Pipelining.Web.FormRequest,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether the message is applicable.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns true if applicable.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.CodedValueSearcher.GetWhereClause(System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.Boolean)">
            <summary>
            Gets the where clause.
            </summary>
            <param name="value">The value.</param>
            <param name="schema">The schema.</param>
            <param name="field">The field.</param>
            <param name="contains">if set to <c>true</c> [contains].</param>
            <returns>
            Returns the where clause or a null value.
            </returns>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.CodedValueFeatureTweaker">
            <summary>
            Filter responsible for injecting a field with the resolved name for each field with codes.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.CodedValueFeatureTweaker.CanApplyTo(Geocortex.Core.Pipelining.Web.JsonArtifactCollection,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether the message is applicable.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns true if applicable.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.CodedValueFeatureTweaker.TryApplyTo(Geocortex.Core.Pipelining.Web.JsonArtifactCollection,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Applies the transform to the message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.CodedValueFeatureTweaker.Shaper">
            <summary>
            Gets the shaper.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedIdentifyRequestInterpreter">
            <summary>
            Implements basic functionality for dealing with identify requests in terms of a query.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedIdentifyRequestInterpreter.InferGeometryType(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Infers the type of the geometry.
            </summary>
            <param name="geometry">The geometry.</param>
            <returns>Returns the geometry type.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedIdentifyRequestInterpreter.ParseGeometry(Geocortex.Core.Pipelining.Web.FormRequest,System.Double)">
            <summary>
            Parses the geometry.
            </summary>
            <param name="message">The message.</param>
            <param name="unitTolerance">The unit tolerance.</param>
            <returns>Returns the parsed geometry.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedIdentifyRequestInterpreter.Generate(Geocortex.Core.Pipelining.Web.FormRequest,Geocortex.Core.Pipelining.IPipelineContext,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Generates the specified request for forwarding on.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <param name="geometry">The geometry.</param>
            <returns>
            Returns the new message.
            </returns>
            <exception cref="T:System.ArgumentNullException">If field is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedIdentifyRequestInterpreter.CanApplyTo(Geocortex.Core.Pipelining.Web.FormRequest,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether the message is applicable.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns true if applicable.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedIdentifyRequestInterpreter.TryApplyTo(Geocortex.Core.Pipelining.Web.FormRequest,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Applies the transform to the message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedIdentifyRequestInterpreter.Facility">
            <summary>
            Gets the facility for geometry.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.QueryBasedIdentifyRequestInterpreter.Shaper">
            <summary>
            Gets the shaper.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.RequestFormatter">
            <summary>
            Interprets HTTP-based proxy requests into GeoRest oriented requests.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.RequestFormatter.CanApplyTo(Geocortex.Core.Pipelining.HttpRouter.HttpMessage,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether the message is applicable.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns true if applicable.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.RequestFormatter.TryApplyTo(Geocortex.Core.Pipelining.HttpRouter.HttpMessage,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Applies the transform to the message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.RequestFormatter.ApplyTo(System.Web.HttpApplication)">
            <summary>
            Applies to.
            </summary>
            <param name="entity">The entity.</param>
            <exception cref="T:System.ArgumentNullException">If entity is null.</exception>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.RequestFormatter.Proxy">
            <summary>
            Gets the proxy.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.RequestFormatter.Router">
            <summary>
            Gets the application.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.RequestFormatter.Shaper">
            <summary>
            Gets the shaper.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.GeoRestShaper.RequestFormatter.Settings">
            <summary>
            Gets the settings.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.SpatialSearcher">
            <summary>
            Implements identify using query.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.SpatialSearcher.ParseGeometry(Geocortex.Core.Pipelining.Web.FormRequest,System.Double)">
            <summary>
            Parses the geometry.
            </summary>
            <param name="message">The message.</param>
            <param name="unitTolerance">The unit tolerance.</param>
            <returns>
            Returns the parsed geometry.
            </returns>
        </member>
        <member name="T:Geocortex.Core.Pipelining.GeoRestShaper.TextSearcher">
            <summary>
            Implements a text-based search for find requests.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.GeoRestShaper.TextSearcher.GetWhereClause(System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.Boolean)">
            <summary>
            Gets the where clause.
            </summary>
            <param name="value">The value.</param>
            <param name="schema">The schema.</param>
            <param name="field">The field.</param>
            <param name="contains">if set to <c>true</c> [contains].</param>
            <returns>
            Returns the where clause or a null value.
            </returns>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.WebBasedResponseFormatter">
            <summary>
            Formats web responses prior to conclusion.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.WebProxy.WebBasedResponseFormatter.CanApplyTo(Geocortex.Core.Pipelining.Web.WebBasedResponse,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether the message is applicable.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns true if applicable.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.WebProxy.WebBasedResponseFormatter.TryApplyTo(Geocortex.Core.Pipelining.Web.WebBasedResponse,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Applies the transform to the message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns true if successful.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebBasedResponseFormatter.Router">
            <summary>
            Gets the proxy provider.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebBasedResponseFormatter.Proxy">
            <summary>
            Gets the proxy provider.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.WebProxySettings">
            <summary>
            Holds web proxy settings.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.WebProxy.WebProxySettings.OnImportsSatisfied(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Called when a part's imports have been satisfied and it is safe to use.
            </summary>
            <param name="configs">The configs.</param>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxySettings.AcceptLocations">
            <summary>
            Gets the accept locations.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxySettings.RefuseLocations">
            <summary>
            Gets the refuse locations.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.WhiteListEnforcer">
            <summary>
            Enforces the white list.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.WebProxy.WhiteListEnforcer.CanApplyTo(Geocortex.Core.Pipelining.Web.WebBasedRequest,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether the message is applicable.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns true if applicable.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.WebProxy.WhiteListEnforcer.TryApplyTo(Geocortex.Core.Pipelining.Web.WebBasedRequest,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Applies the transform to the message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WhiteListEnforcer.Proxy">
            <summary>
            Gets the proxy.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WhiteListEnforcer.Settings">
            <summary>
            Gets the settings.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.HttpRouter.HttpRouterModule">
            <summary>
            Http module for pipelining HTTP-requests.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.HttpRouter.HttpRouterModule.System#Web#IHttpModule#Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication" /> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpRouterModule.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.HttpRouter.HttpRouterModule.ConfigManager">
            <summary>
            Gets the config manager.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.IPipeline">
            <summary>
            Interface that allows for messages to become handled in a pipeline.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.IPipeline.Compose(System.Collections.Generic.IEnumerable{Geocortex.Core.Pipelining.IPipelineFilter})">
            <summary>
            Composes the specified sequence.
            </summary>
            <param name="sequence">The sequence.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.IPipeline.ProcessMessages(System.IObservable{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Processes the messages in a sequence.
            </summary>
            <param name="messages">The messages.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the final message sequence.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.IPipeline.Filters">
            <summary>
            Gets the filters.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.IPipelineFilterSequence">
            <summary>
            Implemented by components to interact with a message pipeline.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.IPipelineFilterSequence.Filters">
            <summary>
            Gets the filters.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.MessageFormat">
            <summary>
            Represents a particular message structure when formatted.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.MessageFormat.GetContentType(System.Text.Encoding)">
            <summary>
            Gets the MIME-type for the content.
            </summary>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the content type associated with the given encoding.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.MessageFormat.NegotiateEncoding(System.Collections.Generic.IEnumerable{System.Text.Encoding})">
            <summary>
            Gets the encoding.
            </summary>
            <param name="desirableEncodings">The desirable encodings.</param>
            <returns>
            Returns the encoding which is appropriate.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.MessageFormat.IsReaderSupported``2">
            <summary>
            Determines if the reader is supported.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <returns>
            Returns true if supported.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.MessageFormat.IsWriterSupported``2">
            <summary>
            Determines if the writer is supported.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <returns>
            Returns true if supported.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.MessageFormat.GetReader``2(``1,System.Text.Encoding)">
            <summary>
            Gets the reader.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <param name="provider">The provider.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the reader.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.MessageFormat.GetWriter``2(``1,System.Text.Encoding)">
            <summary>
            Gets the writer.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <param name="provider">The provider.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the writer.
            </returns>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Common.CompositionBasedPipeline">
            <summary>
            Basis for components wishing to implement a pipeline.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.CompositionBasedPipeline.Compose(System.Collections.Generic.IEnumerable{Geocortex.Core.Pipelining.IPipelineFilter})">
            <summary>
            Composes the specified sequence.
            </summary>
            <param name="sequence">The sequence.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.CompositionBasedPipeline.ProcessMessages(System.IObservable{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Processes the messages.
            </summary>
            <param name="messages">The messages.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the final message sequence.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Common.CompositionBasedPipeline.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Common.CompositionBasedPipeline.ExplicitSequences">
            <summary>
            Gets the explicit filters.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Common.CompositionBasedPipeline.ImplicitSequences">
            <summary>
            Gets the implicit filters.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Common.CompositionBasedPipeline.Filters">
            <summary>
            Gets the filters.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Common.MulticastFilterCollection`1">
            <summary>
            Scatter gather pipeline filter.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.MulticastFilterCollection`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.MulticastFilterCollection`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.MulticastFilterCollection`1.ProcessMessages(System.IObservable{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext,System.Collections.Generic.Stack{Geocortex.Core.Pipelining.IPipelineFilter})">
            <summary>
            Processes the messages.
            </summary>
            <param name="messages">The messages.</param>
            <param name="context">The context.</param>
            <param name="stack">The stack.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.MulticastFilterCollection`1.ProcessMessages(System.IObservable{Geocortex.Core.Pipelining.Message},Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Processes the messages.
            </summary>
            <param name="messages">The messages.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the new message sequence.
            </returns>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.WebProxyProvider">
            <summary>
            Provides the web proxy pipeline functionality.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.WebProxy.WebProxyProvider.CreateState">
            <summary>
            Creates the behavior.
            </summary>
            <returns>Returns the new behavior.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyProvider.StateKey">
            <summary>
            Gets the behavior key.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyProvider.RequestFormatters">
            <summary>
            Gets the request formatter.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyProvider.RequestInterpreters">
            <summary>
            Gets the request interpreters.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyProvider.RequestInspectors">
            <summary>
            Gets the request inspectors.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyProvider.RequestProcessors">
            <summary>
            Gets the request processors.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyProvider.RequestSequencers">
            <summary>
            Gets the request sequencers.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyProvider.RequestForwarders">
            <summary>
            Gets the request forwarders.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyProvider.ResponseSanitizers">
            <summary>
            Gets the response inspectors.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyProvider.ResponseInterpreters">
            <summary>
            Gets the response interpreters.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyProvider.ResponseSequencers">
            <summary>
            Gets the response sequencers.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyProvider.ResponseProcessors">
            <summary>
            Gets the response processors.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyProvider.ResponseInspectors">
            <summary>
            Gets the response inspectors.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyProvider.ResponseFormatters">
            <summary>
            Gets the response formatters.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyProvider.Filters">
            <summary>
            Gets the filters.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Web.EmptyResponse">
            <summary>
            Basic empty web response (no content).
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.EmptyResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.EmptyResponse"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.EmptyResponse.#ctor(Geocortex.Core.Pipelining.Message)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.EmptyResponse"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.EmptyResponse.#ctor(Geocortex.Core.Pipelining.Web.WebBasedResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.EmptyResponse"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.EmptyResponse.CreateCopy">
            <summary>
            Creates the copy of this .message.
            </summary>
            <returns>
            Returns the copy.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.EmptyResponse.IsReaderSupported``1(Geocortex.Core.Pipelining.MessageFormat)">
            <summary>
            Determines whether the reader type is supported.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <param name="format">The format.</param>
            <returns>
              <c>true</c> if the reader is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.EmptyResponse.IsWriterSupported``1(Geocortex.Core.Pipelining.MessageFormat)">
            <summary>
            Determines whether the writer type is supported.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <param name="format">The format.</param>
            <returns>
              <c>true</c> if [is writer supported] [the specified format]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.EmptyResponse.OpenContent``1(Geocortex.Core.Pipelining.MessageFormat,System.Text.Encoding)">
            <summary>
            Opens the content.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <param name="format">The format.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the reader of interest.
            </returns>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.EmptyResponse.CopyContent``1(``0,Geocortex.Core.Pipelining.MessageFormat,System.Text.Encoding)">
            <summary>
            Copies the content.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <param name="writer">The writer.</param>
            <param name="format">The format.</param>
            <param name="encoding">The encoding.</param>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.EmptyResponse.Assets">
            <summary>
            Gets the assets.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.EmptyResponse.Format">
            <summary>
            Gets the format.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.EmptyResponse.IsBufferBased">
            <summary>
            Gets a value indicating whether this message is buffer based.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.EmptyResponse.IsStreamBased">
            <summary>
            Gets a value indicating whether this message is stream based.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.EmptyResponse.CanCopy">
            <summary>
            Gets a value indicating whether this message can be copied.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.EmptyResponse.CanRead">
            <summary>
            Gets a value indicating whether this message can be read from.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.EmptyResponse.CanWrite">
            <summary>
            Gets a value indicating whether this message can be written out.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Web.FormRequest">
            <summary>
            Defines a message that characterizes form based requests.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Web.WebBasedRequest">
            <summary>
            Base implementation for a web request phrased as a message.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.WebBasedRequest.CreateRequest(System.IO.Stream)">
            <summary>
            Creates the request.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>Returns the request.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.WebBasedRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.WebBasedRequest"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.WebBasedRequest.#ctor(Geocortex.Core.Pipelining.Message)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.WebBasedRequest"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.WebBasedRequest.#ctor(Geocortex.Core.Pipelining.Web.WebBasedRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.WebBasedRequest"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.WebBasedRequest.GetAddress">
            <summary>
            Tries to get the address.
            </summary>
            <returns>Returns the address.</returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.WebBasedRequest.BaseAddress">
            <summary>
            Gets or sets the base address.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.WebBasedRequest.RemoteAddress">
            <summary>
            Gets or sets the endpoint address.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.WebBasedRequest.CachePolicy">
            <summary>
            Gets or sets the cache policy.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.WebBasedRequest.Credentials">
            <summary>
            Gets or sets the credentials.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.WebBasedRequest.Headers">
            <summary>
            Gets the headers.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.WebBasedRequest.Method">
            <summary>
            Gets or sets the method.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.FormRequest.CreateRequest(System.IO.Stream)">
            <summary>
            Creates the request.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>Returns the web request.</returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.FormRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.FormRequest"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.FormRequest.#ctor(Geocortex.Core.Pipelining.Message)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.FormRequest"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.FormRequest.#ctor(Geocortex.Core.Pipelining.Web.FormRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.FormRequest"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.FormRequest.CreateCopy">
            <summary>
            Creates the copy of this .message.
            </summary>
            <returns>
            Returns the copy.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.FormRequest.IsReaderSupported``1(Geocortex.Core.Pipelining.MessageFormat)">
            <summary>
            Determines whether the reader type is supported.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <param name="format">The format.</param>
            <returns>
              <c>true</c> if the reader is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.FormRequest.IsWriterSupported``1(Geocortex.Core.Pipelining.MessageFormat)">
            <summary>
            Determines whether the writer type is supported.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <param name="format">The format.</param>
            <returns>
              <c>true</c> if [is writer supported] [the specified format]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.FormRequest.OpenContent``1(Geocortex.Core.Pipelining.MessageFormat,System.Text.Encoding)">
            <summary>
            Opens the content.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <param name="format">The format.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the reader of interest.
            </returns>
            <exception cref="T:System.NotImplementedException">Always throws.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.FormRequest.CopyContent``1(``0,Geocortex.Core.Pipelining.MessageFormat,System.Text.Encoding)">
            <summary>
            Copies the content.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <param name="writer">The writer.</param>
            <param name="format">The format.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.FormRequest.Assets">
            <summary>
            Gets the assets.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.FormRequest.QueryString">
            <summary>
            Gets the query string.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.FormRequest.Format">
            <summary>
            Gets the format.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.FormRequest.IsBufferBased">
            <summary>
            Gets a value indicating whether this message is buffer based.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.FormRequest.IsStreamBased">
            <summary>
            Gets a value indicating whether this message is stream based.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.FormRequest.CanCopy">
            <summary>
            Gets a value indicating whether this message can be copied.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.FormRequest.CanRead">
            <summary>
            Gets a value indicating whether this message can be read from.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.FormRequest.CanWrite">
            <summary>
            Gets a value indicating whether this message can be written out.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.FormRequest.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Web.FormFormat">
            <summary>
            Form message format.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.FormFormat.GetContentType(System.Text.Encoding)">
            <summary>
            Gets the MIME-type for the content.
            </summary>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the content type associated with the given encoding.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.FormFormat.IsContentTypeApplicable(System.String)">
            <summary>
            Determines whether if the content type is applicable.
            </summary>
            <param name="contentType">Type of the content.</param>
            <returns>
            Return true if the content type aligns with the format.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.FormFormat.NegotiateEncoding(System.Collections.Generic.IEnumerable{System.Text.Encoding})">
            <summary>
            Gets the encoding.
            </summary>
            <param name="desirableEncodings">The desirable encodings.</param>
            <returns>
            Returns the encoding which is appropriate.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.FormFormat.IsReaderSupported``2">
            <summary>
            Determines if the reader is supported.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <returns>
            Returns true if supported.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.FormFormat.IsWriterSupported``2">
            <summary>
            Determines if the writer is supported.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <returns>
            Returns true if supported.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.FormFormat.GetReader``2(``1,System.Text.Encoding)">
            <summary>
            Gets the reader.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <param name="provider">The provider.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the reader.
            </returns>
            <exception cref="T:System.NotSupportedException">If the reader is not a TextReader.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.FormFormat.GetWriter``2(``1,System.Text.Encoding)">
            <summary>
            Gets the writer.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <param name="provider">The provider.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the writer.
            </returns>
            <exception cref="T:System.NotSupportedException">If TProvider is not a TWriter, or if TWriter is not a StreamWriter.</exception>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.FormFormat.Multipart">
            <summary>
            Gets the multipart.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.FormFormat.Url">
            <summary>
            Gets the default.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.IRequestForwarder">
            <summary>
            Implemented by pipeline filters which deal with forwarding requests.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.WebBasedRequestForwarder">
            <summary>
            Provides pipeline handling for forwarding web requests.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.WebProxy.WebBasedRequestForwarder.GetResponse(Geocortex.Core.Pipelining.Web.WebBasedRequest,System.Threading.CancellationToken)">
            <summary>
            Gets the response.
            </summary>
            <param name="message">The message.</param>
            <param name="token">The token.</param>
            <returns>
            Returns the web based response.
            </returns>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.WebProxy.WebBasedRequestForwarder.CanApplyTo(Geocortex.Core.Pipelining.Web.WebBasedRequest,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Determines whether the given message is applicable.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns true if processing should occur on the given message.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.WebProxy.WebBasedRequestForwarder.TryApplyTo(Geocortex.Core.Pipelining.Web.WebBasedRequest,Geocortex.Core.Pipelining.IPipelineContext)">
            <summary>
            Tries to apply the filter to the given message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">The context.</param>
            <returns>
            Returns the new sequence of messages.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebBasedRequestForwarder.Proxy">
            <summary>
            Gets the provider.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Web.JsonFormat">
            <summary>
            The JSON message format.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonFormat.GetContentType(System.Text.Encoding)">
            <summary>
            Gets the MIME-type for the content.
            </summary>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the content type associated with the given encoding.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonFormat.NegotiateEncoding(System.Collections.Generic.IEnumerable{System.Text.Encoding})">
            <summary>
            Gets the encoding.
            </summary>
            <param name="desirableEncodings">The desirable encodings.</param>
            <returns>
            Returns the encoding which is appropriate.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonFormat.IsReaderSupported``2">
            <summary>
            Determines if the reader is supported.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <returns>
            Returns true if supported.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonFormat.IsWriterSupported``2">
            <summary>
            Determines if the writer is supported.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <returns>
            Returns true if supported.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonFormat.GetReader``2(``1,System.Text.Encoding)">
            <summary>
            Gets the reader.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <param name="provider">The provider.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the reader.
            </returns>
            <exception cref="T:System.NotSupportedException">If TProvider is not a TReader, or if TReader is not a JsonReader.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.JsonFormat.GetWriter``2(``1,System.Text.Encoding)">
            <summary>
            Gets the writer.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <param name="provider">The provider.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the writer.
            </returns>
            <exception cref="T:System.NotSupportedException">If TProvider is not a TWriter or JsonWriter.</exception>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.JsonFormat.Compact">
            <summary>
            Gets the compact format.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.JsonFormat.Pretty">
            <summary>
            Gets the pretty format.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.JsonFormat.IsCompact">
            <summary>
            Gets a value indicating whether this instance is compact.
            </summary>
            <value>
            <c>true</c> if this instance is compact; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.JsonFormat.IsPretty">
            <summary>
            Gets a value indicating whether this instance is pretty.
            </summary>
            <value>
              <c>true</c> if this instance is pretty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Common.PassThroughFormat">
            <summary>
            Generic message format for passing content through as is.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.PassThroughFormat.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Common.PassThroughFormat"/> class.
            </summary>
            <param name="contentType">Type of the content.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.PassThroughFormat.GetContentType(System.Text.Encoding)">
            <summary>
            Gets the MIME-type for the content.
            </summary>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the content type associated with the given encoding.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.PassThroughFormat.NegotiateEncoding(System.Collections.Generic.IEnumerable{System.Text.Encoding})">
            <summary>
            Gets the encoding.
            </summary>
            <param name="desirableEncodings">The desirable encodings.</param>
            <returns>
            Returns the encoding which is appropriate.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.PassThroughFormat.IsReaderSupported``2">
            <summary>
            Determines if the reader is supported.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <returns>
            Returns true if supported.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.PassThroughFormat.IsWriterSupported``2">
            <summary>
            Determines if the writer is supported.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <returns>
            Returns true if supported.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.PassThroughFormat.GetReader``2(``1,System.Text.Encoding)">
            <summary>
            Gets the reader.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <param name="provider">The provider.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the reader.
            </returns>
            <exception cref="T:System.NotSupportedException">If TProvider is not a TReader.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Common.PassThroughFormat.GetWriter``2(``1,System.Text.Encoding)">
            <summary>
            Gets the writer.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <param name="provider">The provider.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the writer.
            </returns>
            <exception cref="T:System.NotSupportedException">If TProvider is not a TWriter.</exception>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Web.LiteralJsonResponse">
            <summary>
            Holds a literal JSON response.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.CopyContent(Newtonsoft.Json.JsonWriter)">
            <summary>
            Copies the content.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.LiteralJsonResponse"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.LiteralJsonResponse"/> class.
            </summary>
            <param name="content">The content.</param>
            <exception cref="T:System.ArgumentNullException">If content is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.#ctor(Geocortex.Core.Pipelining.Message)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.LiteralJsonResponse"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.#ctor(Geocortex.Core.Pipelining.Message,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.LiteralJsonResponse"/> class.
            </summary>
            <param name="other">The other.</param>
            <param name="content">The content.</param>
            <exception cref="T:System.ArgumentNullException">If content is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.#ctor(Geocortex.Core.Pipelining.Web.WebBasedResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.LiteralJsonResponse"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.#ctor(Geocortex.Core.Pipelining.Web.WebBasedResponse,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.LiteralJsonResponse"/> class.
            </summary>
            <param name="other">The other.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.#ctor(Geocortex.Core.Pipelining.Web.LiteralJsonResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.LiteralJsonResponse"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.CreateCopy">
            <summary>
            Creates the copy of this .message.
            </summary>
            <returns>
            Returns the copy.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.IsReaderSupported``1(Geocortex.Core.Pipelining.MessageFormat)">
            <summary>
            Determines whether the reader type is supported.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <param name="format">The format.</param>
            <returns>
              <c>true</c> if the reader is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.OpenContent``1(Geocortex.Core.Pipelining.MessageFormat,System.Text.Encoding)">
            <summary>
            Opens the content.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <param name="format">The format.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the reader of interest.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.Assets">
            <summary>
            Gets the assets.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.Content">
            <summary>
            Gets the content.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.Format">
            <summary>
            Gets the format.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.IsBufferBased">
            <summary>
            Gets a value indicating whether this message is buffer based.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.IsStreamBased">
            <summary>
            Gets a value indicating whether this message is stream based.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.CanCopy">
            <summary>
            Gets a value indicating whether this message can be copied.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.CanRead">
            <summary>
            Gets a value indicating whether this message can be read from.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.LiteralJsonResponse.CanWrite">
            <summary>
            Gets a value indicating whether this message can be written out.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Web.LiteralTextResponse">
            <summary>
            Holds a literal text response.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralTextResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.LiteralTextResponse"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralTextResponse.#ctor(Geocortex.Core.Pipelining.Message)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.LiteralTextResponse"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralTextResponse.#ctor(Geocortex.Core.Pipelining.Web.LiteralTextResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.LiteralTextResponse"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralTextResponse.CreateCopy">
            <summary>
            Creates the copy of this .message.
            </summary>
            <returns>
            Returns the copy.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralTextResponse.IsReaderSupported``1(Geocortex.Core.Pipelining.MessageFormat)">
            <summary>
            Determines whether the reader type is supported.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <param name="format">The format.</param>
            <returns>
              <c>true</c> if the reader is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralTextResponse.IsWriterSupported``1(Geocortex.Core.Pipelining.MessageFormat)">
            <summary>
            Determines whether the writer type is supported.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <param name="format">The format.</param>
            <returns>
              <c>true</c> if [is writer supported] [the specified format]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralTextResponse.OpenContent``1(Geocortex.Core.Pipelining.MessageFormat,System.Text.Encoding)">
            <summary>
            Opens the content.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <param name="format">The format.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the reader of interest.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.LiteralTextResponse.CopyContent``1(``0,Geocortex.Core.Pipelining.MessageFormat,System.Text.Encoding)">
            <summary>
            Copies the content.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <param name="writer">The writer.</param>
            <param name="format">The format.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.LiteralTextResponse.Assets">
            <summary>
            Gets the assets.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.LiteralTextResponse.Text">
            <summary>
            Gets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.LiteralTextResponse.Format">
            <summary>
            Gets the format.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.LiteralTextResponse.IsBufferBased">
            <summary>
            Gets a value indicating whether this message is buffer based.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.LiteralTextResponse.IsStreamBased">
            <summary>
            Gets a value indicating whether this message is stream based.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.LiteralTextResponse.CanCopy">
            <summary>
            Gets a value indicating whether this message can be copied.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.LiteralTextResponse.CanRead">
            <summary>
            Gets a value indicating whether this message can be read from.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.LiteralTextResponse.CanWrite">
            <summary>
            Gets a value indicating whether this message can be written out.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Web.StreamBasedResponse">
            <summary>
            Wraps binary data as a message.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.StreamBasedResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.StreamBasedResponse"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.StreamBasedResponse.#ctor(Geocortex.Core.Pipelining.Message)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.StreamBasedResponse"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.StreamBasedResponse.#ctor(Geocortex.Core.Pipelining.Web.WebBasedResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.StreamBasedResponse"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.StreamBasedResponse.CreateCopy">
            <summary>
            Creates the copy of this .message.
            </summary>
            <returns>
            Returns the copy.
            </returns>
            <exception cref="T:System.NotSupportedException">Always throws.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.StreamBasedResponse.IsReaderSupported``1(Geocortex.Core.Pipelining.MessageFormat)">
            <summary>
            Determines whether the reader type is supported.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <param name="format">The format.</param>
            <returns>
              <c>true</c> if the reader is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.StreamBasedResponse.IsWriterSupported``1(Geocortex.Core.Pipelining.MessageFormat)">
            <summary>
            Determines whether the writer type is supported.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <param name="format">The format.</param>
            <returns>
              <c>true</c> if [is writer supported] [the specified format]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.StreamBasedResponse.OpenContent``1(Geocortex.Core.Pipelining.MessageFormat,System.Text.Encoding)">
            <summary>
            Opens the content.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <param name="format">The format.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the reader of interest.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.StreamBasedResponse.CopyContent``1(``0,Geocortex.Core.Pipelining.MessageFormat,System.Text.Encoding)">
            <summary>
            Copies the content.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <param name="writer">The writer.</param>
            <param name="format">The format.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.StreamBasedResponse.Content">
            <summary>
            Gets the content.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.StreamBasedResponse.ContentEncoding">
            <summary>
            Gets the content encoding.
            </summary>
            <value>
            The content encoding.
            </value>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.StreamBasedResponse.IsBufferBased">
            <summary>
            Gets a value indicating whether this message is buffer based.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.StreamBasedResponse.IsStreamBased">
            <summary>
            Gets a value indicating whether this message is stream based.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.StreamBasedResponse.CanCopy">
            <summary>
            Gets a value indicating whether this message can be copied.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.StreamBasedResponse.CanRead">
            <summary>
            Gets a value indicating whether this message can be read from.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.StreamBasedResponse.CanWrite">
            <summary>
            Gets a value indicating whether this message can be written out.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Web.TextFormat">
            <summary>
            Implements text content formatting.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.TextFormat.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.TextFormat"/> class.
            </summary>
            <param name="contentType">Type of the content.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.TextFormat.GetContentType(System.Text.Encoding)">
            <summary>
            Gets the MIME-type for the content.
            </summary>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the content type associated with the given encoding.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.TextFormat.NegotiateEncoding(System.Collections.Generic.IEnumerable{System.Text.Encoding})">
            <summary>
            Gets the encoding.
            </summary>
            <param name="desirableEncodings">The desirable encodings.</param>
            <returns>
            Returns the encoding which is appropriate.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.TextFormat.IsReaderSupported``2">
            <summary>
            Determines if the reader is supported.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <returns>
            Returns true if supported.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.TextFormat.IsWriterSupported``2">
            <summary>
            Determines if the writer is supported.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <returns>
            Returns true if supported.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.TextFormat.GetReader``2(``1,System.Text.Encoding)">
            <summary>
            Gets the reader.
            </summary>
            <typeparam name="TReader">The type of the reader.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <param name="provider">The provider.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the reader.
            </returns>
            <exception cref="T:System.NotSupportedException">If TProvider is not a TReader, or if TReader is not a TextReader.</exception>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.TextFormat.GetWriter``2(``1,System.Text.Encoding)">
            <summary>
            Gets the writer.
            </summary>
            <typeparam name="TWriter">The type of the writer.</typeparam>
            <typeparam name="TProvider">The type of the provider.</typeparam>
            <param name="provider">The provider.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            Returns the writer.
            </returns>
            <exception cref="T:System.NotSupportedException">If TProvider is not a TWriter, or if TWriter is not a TextReader.</exception>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.TextFormat.Plain">
            <summary>
            Gets the plain format.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.WebProxy.WebProxyBehavior">
            <summary>
            Processing behavior for web proxy operation.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.WebProxy.WebProxyBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.WebProxy.WebProxyBehavior"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.WebProxy.WebProxyBehavior.#ctor(Geocortex.Core.Pipelining.WebProxy.WebProxyBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.WebProxy.WebProxyBehavior"/> class.
            </summary>
            <param name="behavior">The behavior.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.WebProxy.WebProxyBehavior.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyBehavior.CheckWhiteList">
            <summary>
            Gets or sets a value indicating whether to check the white list.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyBehavior.ForwardRequests">
            <summary>
            Gets or sets a value indicating whether to forward requests.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyBehavior.FormatResponses">
            <summary>
            Gets or sets a value indicating whether [format responses].
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyBehavior.RequestPrecedence">
            <summary>
            Gets or sets the request precedence.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.WebProxy.WebProxyBehavior.ResponsePrecedence">
            <summary>
            Gets or sets the response precedence.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Pipelining.Web.WebResponseWrapper">
            <summary>
            Wraps a web response with content.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.WebResponseWrapper.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.WebResponseWrapper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.WebResponseWrapper.#ctor(System.Net.WebResponse,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.WebResponseWrapper"/> class.
            </summary>
            <param name="response">The response.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.WebResponseWrapper.#ctor(Geocortex.Core.Pipelining.Message,System.Net.WebResponse,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.WebResponseWrapper"/> class.
            </summary>
            <param name="other">The other.</param>
            <param name="response">The response.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Geocortex.Core.Pipelining.Web.WebResponseWrapper.#ctor(Geocortex.Core.Pipelining.Web.WebBasedResponse,System.Net.WebResponse,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Pipelining.Web.WebResponseWrapper"/> class.
            </summary>
            <param name="other">The other.</param>
            <param name="response">The response.</param>
            <param name="content">The content.</param>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.WebResponseWrapper.Assets">
            <summary>
            Gets the assets.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.WebResponseWrapper.Content">
            <summary>
            Gets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.WebResponseWrapper.ContentEncoding">
            <summary>
            Gets the content encoding.
            </summary>
            <value>
            The content encoding.
            </value>
        </member>
        <member name="P:Geocortex.Core.Pipelining.Web.WebResponseWrapper.Format">
            <summary>
            Gets the format.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Properties.Errors">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Errors.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Errors.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Errors.ColorStringConverter_ConvertToColor_InvalidColorName">
            <summary>
              Looks up a localized string similar to The value &quot;{0}&quot; does not represent a valid color name..
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Errors.ColorStringConverter_ConvertToColor_InvalidHexValue">
            <summary>
              Looks up a localized string similar to The value &quot;{0}&quot; is not a valid hex value for a color..
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Errors.DeepCloneHelper_Clone_SerializationError">
            <summary>
              Looks up a localized string similar to The source object or one of the objects in its object graph is not serializable. To make the type serializable, mark it with the System.SerializableAttribute, explicilty implement the System.Runtime.Serialization.ISerializable interface, or create an System.Runtime.Serialization.ISerializationSurrogate that will serialize the type on its behalf..
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Errors.ImageDescriptor_Dpi_Invalid">
            <summary>
              Looks up a localized string similar to Image DPI must be a positive integer..
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Errors.ImageDescriptor_Height_Invalid">
            <summary>
              Looks up a localized string similar to Image height must be a positive integer..
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Errors.ImageDescriptor_HeightInches_Invalid">
            <summary>
              Looks up a localized string similar to Image height in inches must be a positive number..
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Errors.ImageDescriptor_Width_Invalid">
            <summary>
              Looks up a localized string similar to Image width must be a positive integer..
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Errors.ImageDescriptor_WidthInches_Invalid">
            <summary>
              Looks up a localized string similar to Image width in inches must be a positive number..
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Errors.ParseError_Message">
            <summary>
              Looks up a localized string similar to An error occurred during parsing an expression..
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Errors.RequestHeaderAppenderBase_Error">
            <summary>
              Looks up a localized string similar to Failed to append header &apos;{0}&apos; with value &apos;{1}&apos; to the web request. The following error occurred: {2}.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Errors.SmtpMailer_Send_Error">
            <summary>
              Looks up a localized string similar to Error sending email to recipient(s) &apos;{0}&apos;. {1}.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Errors.WindowsSecurity_AppendRequestHeaders_Error">
            <summary>
              Looks up a localized string similar to Failed to append headers to a web request. The following error occurred: {0}.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Errors.WindowsSecurity_CreateRequestHeaderAppender_TypeLoadFailed">
            <summary>
              Looks up a localized string similar to Failed to load the specified request header appender&apos;s type &apos;{0}&apos;. The following error occurred: {1}.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Errors.WindowsSecurity_CreateRequestHeaderAppender_UnsupportedType">
            <summary>
              Looks up a localized string similar to The specified type &apos;{0}&apos; is not a valid request header appender. Only types that explicitly implement the Geocortex.Core.IRequestHeaderAppender interface are supported..
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Errors.WSFederationValidator_Validate_RemoteCertificateNameMismatch">
            <summary>
              Looks up a localized string similar to SSL certificate error: Certificate name mismatch..
            </summary>
        </member>
        <member name="P:Geocortex.Core.Properties.Errors.WSFederationValidator_Validate_X509ChainError">
            <summary>
              Looks up a localized string similar to SSL certificate chain error: {0}.
            </summary>
        </member>
        <member name="T:Geocortex.Core.ILogicalEqualityComparable">
            <summary>
            Allows an object to define how to determine whether it is logically
            equal to other objects of the same type.
            </summary>
            <remarks>
            It can be preferable to implement this interface rather than overriding
            <see cref="M:System.Object.Equals(System.Object)">Object.Equals</see> since
            <see cref="M:System.Object.Equals(System.Object)">Object.Equals</see> carries with it
            a number of requirements and assumptions that must be met in order to
            ensure proper operation of objects of a given type within a
            <see cref="T:System.Collections.Hashtable"/>. Generally speaking, the
            advantage of implementing this interface is that it allows one to
            determine the logical (in)equality of two objects without requiring that
            those objects are immutable.
            </remarks>
        </member>
        <member name="M:Geocortex.Core.ILogicalEqualityComparable.LogicalEquals(System.Object)">
            <summary>
            Determines whether the given object is logically equal to the
            current object. Two objects are logically equal if they refer to the
            same object instance or they are otherwise equivalent to each other.
            </summary>
            <param name="other">
            The object to compare with the current object.
            </param>
            <returns>
            <c>true</c> if the specified object is logically equal to the
            current object; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Geocortex.Core.RequestHeaderAppenderBase">
            <summary>
            Serves as the base implementation for classes interested in appending custom headers to outgoing web requests.
            </summary>
        </member>
        <member name="M:Geocortex.Core.RequestHeaderAppenderBase.GetHeaders(System.Uri)">
            <summary>
            Gets the headers to append to the request.
            </summary>
            <param name="requestUri">A <see cref="T:System.Uri"/> containing the URI of the requested resource.</param>
            <returns>
            A collection of header name/value pairs to be appended to the web request or <c>null</c> if no extra headers should be appended.
            </returns>
        </member>
        <member name="M:Geocortex.Core.RequestHeaderAppenderBase.OnAppendRequestHeaders(System.Uri,System.Net.WebHeaderCollection)">
            <summary>
            Called when appending headers to an outgoing web request is required.
            </summary>
            <param name="requestUri">A <see cref="T:System.Uri"/> containing the URI of the requested resource.</param>
            <param name="requestHeaders">Contains protocol headers associated with the web request.</param>
            <remarks>
            This method is an implementation of <see cref="M:Geocortex.Core.IRequestHeaderAppender.OnAppendRequestHeaders(System.Uri,System.Net.WebHeaderCollection)"/>.
            You typically do not have to override this method. Override <see cref="M:Geocortex.Core.RequestHeaderAppenderBase.GetHeaders(System.Uri)"/> instead.
            </remarks>
        </member>
        <member name="T:Geocortex.Core.Serialization.BitmapSourceSerializationSurrogate">
            <summary>
            Acts as a surrogate for a WPF Imaging <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> during
            (de)serialization.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.BitmapSourceSerializationSurrogate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Serialization.BitmapSourceSerializationSurrogate"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.BitmapSourceSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Geocortex.Core.Serialization.BitmapSourceSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns>The populated deserialized object.</returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:Geocortex.Core.Serialization.ColorSerializationSurrogate">
            <summary>
            Acts as a surrogate for the WPF <see cref="T:System.Windows.Media.Color"/>
            struct during (de)serialization.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.ColorSerializationSurrogate.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Geocortex.Core.Serialization.ColorSerializationSurrogate"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.ColorSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            to populate with data.
            </param>
            <param name="context">
            The destination (see
            <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for
            this serialization.
            </param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Serialization.ColorSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">
            The source from which the object is deserialized.
            </param>
            <param name="selector">
            The surrogate selector where the search for a compatible surrogate
            begins.
            </param>
            <returns>The populated deserialized object.</returns>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="T:Geocortex.Core.Serialization.UriSerializationSurrogate">
            <summary>
            It turns out that .NET trashes the original string in a URI when serializing it.  It looks like it serializes the 
            results of the ToString() method, and so the scheme becomes lower case.  This surrogate preserves the original
            string.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.UriSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Geocortex.Core.Serialization.UriSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns>The populated deserialized object.</returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:Geocortex.Core.Serialization.XAttributeSerializationSurrogate">
            <summary>
            Provides a means of serializing an XAttribute.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.XAttributeSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Geocortex.Core.Serialization.XAttributeSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns>The populated deserialized object.</returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:Geocortex.Core.Serialization.XElementSerializationSurrogate">
            <summary>
            Provides a means of serializing an XElement.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.XElementSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Geocortex.Core.Serialization.XElementSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns>The populated deserialized object.</returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:Geocortex.Core.Serialization.CustomValidationAttributeSerializationSurrogate">
            <summary>
            Acts as a surrogate for the <see cref="T:System.ComponentModel.DataAnnotations.CustomValidationAttribute"/> during
            (de)serialization.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Serialization.ValidationAttributeSerializationSurrogate">
            <summary>
            Acts as the base class for a <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> during
            (de)serialization.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.ValidationAttributeSerializationSurrogate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Serialization.ValidationAttributeSerializationSurrogate"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.ValidationAttributeSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Geocortex.Core.Serialization.ValidationAttributeSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns>The populated deserialized object.</returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Geocortex.Core.Serialization.CustomValidationAttributeSerializationSurrogate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Serialization.CustomValidationAttributeSerializationSurrogate"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.CustomValidationAttributeSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Geocortex.Core.Serialization.CustomValidationAttributeSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns>The populated deserialized object.</returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:Geocortex.Core.Serialization.DataSetSerializationSurrogate">
            <summary>
            Acts as a surrogate for the <see cref="T:System.Data.DataSet"/> class
            during (de)serialization. Exists because a
            <see cref="T:System.Data.DataSet"/> may be (de)serialized in either XML
            or binary format; however, the <see cref="T:Geocortex.DeepCloneHelper"/>
            requires that objects are serialized to binary format.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.DataSetSerializationSurrogate.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Geocortex.Core.Serialization.DataSetSerializationSurrogate"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.DataSetSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            to populate with data.
            </param>
            <param name="context">
            The destination (see
            <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for
            this serialization.
            </param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Serialization.DataSetSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">
            The source from which the object is deserialized.
            </param>
            <param name="selector">
            The surrogate selector where the search for a compatible surrogate
            begins.
            </param>
            <returns>The populated deserialized object.</returns>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="T:Geocortex.Core.Serialization.DataTableSerializationSurrogate">
            <summary>
            Acts as a surrogate for the <see cref="T:System.Data.DataTable"/> class
            during (de)serialization. Exists because a
            <see cref="T:System.Data.DataTable"/> may be (de)serialized in either
            XML or binary format; however, the
            <see cref="T:Geocortex.DeepCloneHelper"/> requires that objects are
            serialized to binary format.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.DataTableSerializationSurrogate.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Geocortex.Core.Serialization.DataTableSerializationSurrogate"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.DataTableSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with
            the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            to populate with data.
            </param>
            <param name="context">
            The destination (see
            <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for
            this serialization.
            </param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Geocortex.Core.Serialization.DataTableSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the
            <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">
            The source from which the object is deserialized.
            </param>
            <param name="selector">
            The surrogate selector where the search for a compatible surrogate
            begins.
            </param>
            <returns>The populated deserialized object.</returns>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="T:Geocortex.Core.Serialization.DataTypeAttributeSerializationSurrogate">
            <summary>
            Acts as a surrogate for the <see cref="T:System.ComponentModel.DataAnnotations.DataTypeAttribute"/> during
            (de)serialization.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.DataTypeAttributeSerializationSurrogate.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Geocortex.Core.Serialization.DataTypeAttributeSerializationSurrogate"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.DataTypeAttributeSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Geocortex.Core.Serialization.DataTypeAttributeSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns>The populated deserialized object.</returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:Geocortex.Core.Serialization.EnumDataTypeAttributeSerializationSurrogate">
            <summary>
            Acts as a surrogate for the <see cref="T:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute"/> during
            (de)serialization.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.EnumDataTypeAttributeSerializationSurrogate.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Geocortex.Core.Serialization.EnumDataTypeAttributeSerializationSurrogate"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.EnumDataTypeAttributeSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Geocortex.Core.Serialization.EnumDataTypeAttributeSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns>The populated deserialized object.</returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:Geocortex.Core.Serialization.RangeAttributeSerializationSurrogate">
            <summary>
            Acts as a surrogate for the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute"/> during
            (de)serialization.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.RangeAttributeSerializationSurrogate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Serialization.RangeAttributeSerializationSurrogate"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.RangeAttributeSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Geocortex.Core.Serialization.RangeAttributeSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns>The populated deserialized object.</returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:Geocortex.Core.Serialization.RegularExpressionAttributeSerializationSurrogate">
            <summary>
            Acts as a surrogate for the <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute"/>
            during (de)serialization.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.RegularExpressionAttributeSerializationSurrogate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Serialization.RegularExpressionAttributeSerializationSurrogate"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.RegularExpressionAttributeSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Geocortex.Core.Serialization.RegularExpressionAttributeSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns>The populated deserialized object.</returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:Geocortex.Core.Serialization.RequiredAttributeSerializationSurrogate">
            <summary>
            Acts as a surrogate for the <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/>
            during (de)serialization.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.RequiredAttributeSerializationSurrogate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Serialization.RequiredAttributeSerializationSurrogate"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.RequiredAttributeSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Geocortex.Core.Serialization.RequiredAttributeSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns>The populated deserialized object.</returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:Geocortex.Core.Serialization.StringLengthAttributeSerializationSurrogate">
            <summary>
            Acts as a surrogate for the <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute"/> during
            (de)serialization.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.StringLengthAttributeSerializationSurrogate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Serialization.StringLengthAttributeSerializationSurrogate"/> class.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.StringLengthAttributeSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Geocortex.Core.Serialization.StringLengthAttributeSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns>The populated deserialized object.</returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:Geocortex.Core.Serialization.XmlSchemaSerializationSurrogate">
            <summary>
            Provides a means of serialization an XmlSchema.  Event handlers will be lost.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Serialization.XmlSchemaSerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Geocortex.Core.Serialization.XmlSchemaSerializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns>The populated deserialized object.</returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:Geocortex.Core.Utilities.BlackList">
            <summary>
            A container for singleton BlackLists.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Utilities.BlackList.Https">
            <summary>
            Gets the HTTPS black list singleton - these are URLs that have failed to be supported over SSL.
            This allows us to avoid trying to make requests to these URLs when we're pretty sure it's going to fail.
            This saves time because the SSL handshake can be very slow if servers don't support it.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Utilities.BlackList`1">
            <summary>
            A list of items that have failed some sort of criteria and therefore are not to be trusted
            for a certain period of time.
            </summary>
            <typeparam name="T">The type</typeparam>    
        </member>
        <member name="M:Geocortex.Core.Utilities.BlackList`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Geocortex.Core.Utilities.BlackList"/> with maximum expiration time.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Utilities.BlackList`1.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of <see cref="T:Geocortex.Core.Utilities.BlackList"/>.
            </summary>
            <param name="expiration">Expiration time duration.</param>
        </member>
        <member name="M:Geocortex.Core.Utilities.BlackList`1.Add(`0)">
            <summary>
            Add the <paramref name="key"/> to the black list.
            </summary>
            <param name="key">A key that need to be blocked.</param>
        </member>
        <member name="M:Geocortex.Core.Utilities.BlackList`1.Remove(`0)">
            <summary>
            Removes <paramref name="key"/> from the black list.
            </summary>
            <param name="key">A key that need to be removed from the black list.</param>
        </member>
        <member name="M:Geocortex.Core.Utilities.BlackList`1.IsBlackListed(`0)">
            <summary>
            Determines if <paramref name="key"/> is black listed.
            </summary>
            <param name="key">A key</param>
            <returns>True if black listed, otherwise false.</returns>
        </member>
        <member name="P:Geocortex.Core.Utilities.BlackList`1.Expiration">
            <summary>
            Gets the expiration time.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Utilities.BlackList`1.Entries">
            <summary>
            Gets the entries.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Utilities.BlackListEntry`1">
            <summary>
            An entry in a BlackList. An item should be added to the BlackList if it has failed 
            some criteria and it is not to be trusted for a certain period of time.
            </summary>
            <typeparam name="T">The type</typeparam>
        </member>
        <member name="M:Geocortex.Core.Utilities.BlackListEntry`1.#ctor(`0,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Utilities.BlackListEntry`1"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="expiration">The expiration.</param>
        </member>
        <member name="P:Geocortex.Core.Utilities.BlackListEntry`1.Key">
            <summary>
            Gets or sets the key that uniquely identifies the item in the BlackList.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Utilities.BlackListEntry`1.BlackListedOn">
            <summary>
            Gets or sets the date on which the item was black listed.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Utilities.BlackListEntry`1.Expiration">
            <summary>
            Gets the amount of time until the item is removed from the BlackList.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Utilities.BlackListEntry`1.IsExpired">
            <summary>
            Gets a value indicating whether this entry is expired, and therefore should be removed
            from the BlackList.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Utilities.DecomposedUri">
            <summary>
            Represents a URI that has been decomposed for manipulation so that it can 
            be reformulated.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Utilities.DecomposedUri.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Utilities.DecomposedUri"/> class.
            </summary>
            <param name="uri">The URI.</param>
            <exception cref="T:System.ArgumentNullException">If uri is null.</exception>
        </member>
        <member name="M:Geocortex.Core.Utilities.DecomposedUri.Clone">
            <summary>
            Clones a new instance of <see cref="T:Geocortex.Core.Utilities.DecomposedUri"/> class.
            </summary>
            <returns>Cloned instance of <see cref="T:Geocortex.Core.Utilities.DecomposedUri"/>.</returns>
        </member>
        <member name="M:Geocortex.Core.Utilities.DecomposedUri.Recompose(System.Boolean)">
            <summary>
            Recomposes back into a URI.
            </summary>
            <param name="includeQueryString">if set to <c>true</c> include query strings in the re-composition.</param>
            <returns>A URI.</returns>
        </member>
        <member name="M:Geocortex.Core.Utilities.DecomposedUri.GetServerAndPath">
            <summary>
            Assembles the server and path components of the URI, basically omitting the query string and scheme.
            e.g. <code>myserver:8080/something/useful</code>
            </summary>
            <returns>
            An url.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Utilities.DecomposedUri.op_Implicit(Geocortex.Core.Utilities.DecomposedUri)~System.Uri">
            <summary>
            Converts a DecomposedUri into a string by performing a Recompose() operation.
            </summary>
            <param name="decomposed">The DecomposedUri to convert to a string.</param>
            <returns>The string representation - the absolute URI.</returns>
        </member>
        <member name="M:Geocortex.Core.Utilities.DecomposedUri.op_Implicit(Geocortex.Core.Utilities.DecomposedUri)~System.String">
            <summary>
            Converts a DecomposedUri into a string by performing a Recompose() operation.
            </summary>
            <param name="decomposed">The DecomposedUri to convert to a string.</param>
            <returns>The string representation - the absolute URI.</returns>
        </member>
        <member name="M:Geocortex.Core.Utilities.DecomposedUri.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Utilities.DecomposedUri.OriginalUri">
            <summary>
            Gets the original URI.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Utilities.DecomposedUri.OringalUri">
            <summary>
            Gets the original URI.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Utilities.DecomposedUri.Query">
            <summary>
            Gets the query string component of the URI as a KeyValueCollection.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Utilities.DecomposedUri.Fragment">
            <summary>
            Gets the fragment (hash) component of the URI as a KeyValueCollection.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Utilities.DecomposedUri.PathParts">
            <summary>
            Gets the the parts of the path (separated by a slash).
            </summary>
        </member>
        <member name="P:Geocortex.Core.Utilities.DecomposedUri.Scheme">
            <summary>
            Gets or sets the scheme of the URI.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Utilities.DecomposedUri.Port">
            <summary>
            Gets or sets the port of the URI.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Utilities.DecomposedUri.Path">
            <summary>
            Gets or sets the path. The getter of this property is composed from the PathParts.
            The PathParts will also be set when the setter is called.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Utilities.DnsUtilities">
            <summary>
            Helper utility methods for DNS operations.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Utilities.DnsUtilities.GetDnsSuffix">
            <summary>
            Gets the default DNS suffix in the domain. e.g. "latitudegeo.com".
            </summary>
            <returns>The default DNS suffix.</returns>
        </member>
        <member name="M:Geocortex.Core.Utilities.DnsUtilities.AppendDnsSuffix(System.String,System.String)">
            <summary>
            Appends the DNS suffix to a host name. Ports will be preserved.
            </summary>
            <param name="host">The host name - e.g. "server".</param>
            <param name="suffix">The suffix. e.g. "latitudegeo.com".</param>
            <returns>The host with the DNS suffix appended. e.g. "server.latitudegeo.com".</returns>
        </member>
        <member name="M:Geocortex.Core.Utilities.DnsUtilities.TryGetHostAddresses(System.String,System.Net.IPAddress[]@)">
            <summary>
            Tries to get the get host addresses for a particular host without throwing an exception.
            </summary>
            <param name="host">The host name.</param>
            <param name="result">The IP addresses for the host name.</param>
            <returns><c>true</c> if successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Geocortex.Core.Utilities.ReflectionUtilities">
            <summary>
            Utility methods for reflection.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Utilities.ReflectionUtilities.ShallowClone``2(``0)">
            <summary>
            Performs a shallow clone operation of one object into a different object type.
            </summary>
            <typeparam name="TSource">The type of the source (the object to copy from).</typeparam>
            <typeparam name="TTarget">The type of the target (the object to create).</typeparam>
            <param name="obj1">The object to clone.</param>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:Geocortex.Core.Utilities.StopwatchProfiler">
            <summary>
            Measures the time for an operation and logs it to debug.
            Log messages are output on dispose, so the StopwatchProfiler
            can be conveniently used in a using statement.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Utilities.StopwatchProfiler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Utilities.StopwatchProfiler"/> class.
            </summary>
            <param name="name">The name of the operation, which will be logged.</param>
        </member>
        <member name="M:Geocortex.Core.Utilities.StopwatchProfiler.Dispose">
            <summary>
            Stops the timer and emits the log message.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Web.IUriContext">
            <summary>
            Contains information about a URI context.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.IUriContext.InternalUris">
            <summary>
            Gets the internal uris.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.IUriContext.ExternalUris">
            <summary>
            Gets the external uris.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Web.UriExtensions">
            <summary>
            Some extension methods regarding URIs.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Web.UriExtensions.Select(Geocortex.Core.Web.IUriContext,System.Uri,System.Boolean)">
            <summary>
            Selects an appropriate URI from the specified URI set.
            </summary>
            <param name="context">The context.</param>
            <param name="uri">The URI.</param>
            <param name="upgrade">if set to <c>true</c> [upgrade].</param>
            <returns>Returns the best candidate URI.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.UriExtensions.Sanitize(System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            Sanitizes the specified uris.
            </summary>
            <param name="uris">The uris.</param>
            <returns>Returns only HTTP and HTTPS based URIs.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.UriExtensions.AsScope(System.Uri)">
            <summary>
            Converts the URI to a UriScope.
            </summary>
            <param name="uri">The URI.</param>
            <returns>Returns the UriScope.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.UriExtensions.IsScopeOf(System.Uri,System.Uri)">
            <summary>
            Determines whether the current URI is the scope of the provided URI.
            </summary>
            <param name="uriScope">The URI scope.</param>
            <param name="uri">The URI.</param>
            <returns>Return true if the URI is in scope.</returns>
        </member>
        <member name="T:Geocortex.Core.Web.UriScope">
            <summary>
            Class representing a URI scope.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Web.UriScope.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Web.UriScope"/> class.
            </summary>
            <param name="serializationInfo">An instance of the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> class containing the information required to serialize the new <see cref="T:System.Uri"/> instance.</param>
            <param name="streamingContext">An instance of the <see cref="T:System.Runtime.Serialization.StreamingContext"/> class containing the source of the serialized stream associated with the new <see cref="T:System.Uri"/> instance.</param>
        </member>
        <member name="M:Geocortex.Core.Web.UriScope.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Web.UriScope"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Geocortex.Core.Web.UriScope.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.Core.Web.UriScope"/> class.
            </summary>
            <param name="uriString">A URI.</param>
        </member>
        <member name="M:Geocortex.Core.Web.UriScope.Create(System.String,System.String[])">
            <summary>
            Creates a UriScope from a specified partial URI.
            </summary>
            <param name="partialUri">The partial URI.</param>
            <param name="schemes">The schemes.</param>
            <returns>
            Returns the new URI scope.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Web.UriScope.IsSchemeInScope(System.String,System.Int32)">
            <summary>
            Determines whether [is scheme in scope] [the specified scheme].
            </summary>
            <param name="scheme">The scheme.</param>
            <param name="port">The port.</param>
            <returns>Returns true if the scheme is in the scope.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.UriScope.IsHostInScope(System.String)">
            <summary>
            Determines whether the given host is in scope.
            </summary>
            <param name="host">The host.</param>
            <returns>Returns true if the host is in scope.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.UriScope.IsPathInScope(System.String)">
            <summary>
            Determines whether the given path is in scope.
            </summary>
            <param name="path">The path.</param>
            <returns>Returns true if the given path is in scope.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.UriScope.IsScopeOf(System.Uri)">
            <summary>
            Determines whether the given URI is in this scope.
            </summary>
            <param name="uri">The URI.</param>
            <returns>Return true if in scope.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.UriScope.IsScopeOf(System.Uri,System.Boolean)">
            <summary>
            Determines whether the given URI is in scope or can be upgrade to this scope.
            </summary>
            <param name="uri">The URI.</param>
            <param name="upgrade">if set to <c>true</c> [upgrade].</param>
            <returns>Return true if in scope.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.UriScope.ChangeBase(System.Uri,Geocortex.Core.Web.UriScope)">
            <summary>
            Changes the base.
            </summary>
            <param name="uri">The URI.</param>
            <param name="uriScope">The URI scope.</param>
            <returns>Return the newly based URI.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.UriScope.CanUpgrade(System.Uri)">
            <summary>
            Determines whether this scope can upgrade the specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>Return true if the URI can be upgraded.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.UriScope.Combine(System.String[])">
            <summary>
            Combines the specified components.
            </summary>
            <param name="components">The components.</param>
            <returns>Return the new URI.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.UriScope.IsSameAs(System.Uri)">
            <summary>
            Determines whether this scope is the same as the other scope.
            </summary>
            <param name="uriScope">The URI scope.</param>
            <returns>Return true if the two scopes are the same.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.UriScope.ChangeBase(System.Uri,Geocortex.Core.Web.IUriContext)">
            <summary>
            Changes the base.
            </summary>
            <param name="uri">The URI.</param>
            <param name="context">The context.</param>
            <returns>Return the newly based URI.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.UriScope.RetainPathCase(System.Uri)">
            <summary>
            Retains the scope.
            </summary>
            <param name="uri">The URI.</param>
            <returns>Returns the URI with the path preserved.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.UriScope.IsSameScope(System.String,System.String)">
            <summary>
            Determines whether the two given values are the same scope.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>Returns true if the given values are the same scope..</returns>
        </member>
        <member name="P:Geocortex.Core.Web.UriScope.Domains">
            <summary>
            Gets the domains.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.UriScope.Schemes">
            <summary>
            Gets the schemes.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.UriScope.Root">
            <summary>
            Gets the root.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Web.WebTopology">
            <summary>   
            Represents information regarding web topology.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Web.WebTopology.Resolve(System.String)">
            <summary>
            Resolves the specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>
            Returns the results from resolving the URI.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Web.WebTopology.Resolve(System.Uri)">
            <summary>
            Resolves the specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>
            Returns the result of resolving the URI.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Web.WebTopology.GetSite(System.String)">
            <summary>
            Gets the site.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Returns the site.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.WebTopology.Adopt(Geocortex.Core.Web.WebTopology)">
            <summary>
            Adopts the specified other.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Geocortex.Core.Web.WebTopology.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Web.WebTopology.Commit">
            <summary>
            Commits this instance.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Web.WebTopology.GetDefaultRoutes(System.Collections.Generic.IEnumerable{Geocortex.Core.Web.WebTopologyBinding})">
            <summary>
            Gets the default routes.
            </summary>
            <param name="bindings">The bindings.</param>
            <returns>
            Returns the list of default routes.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Web.WebTopology.LoadFromIIS">
            <summary>
            Loads from IIS.
            </summary>
            <returns>Returns the topology from IIS.</returns>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopology.System">
            <summary>
            Gets the system web topology.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopology.Sites">
            <summary>
            Gets the scopes.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopology.DefaultExplicitRoutes">
            <summary>
            Gets the default explicit routes.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopology.DefaultImplicitRoutes">
            <summary>
            Gets the default implicit routes.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Web.WebTopologyRoute">
            <summary>
            Information about a route.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Web.WebTopologyRoute.CanApplyTo(System.Uri)">
            <summary>
            Determines whether this instance [can apply to] the specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>
            Returns true if the route can be applied.
            </returns>
        </member>
        <member name="M:Geocortex.Core.Web.WebTopologyRoute.ApplyTo(System.Uri)">
            <summary>
            Applies to.
            </summary>
            <param name="uri">The URI.</param>
            <returns>Returns the new URI.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.WebTopologyRoute.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Geocortex.Core.Web.WebTopologyRoute.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologyRoute.Source">
            <summary>
            Gets or sets the target.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologyRoute.SourceUri">
            <summary>
            Gets or sets the source URI.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologyRoute.Target">
            <summary>
            Gets or sets the target.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologyRoute.TargetUri">
            <summary>
            Gets or sets the target URI.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Web.WebTopologyBinding">
            <summary>
            Information about a binding.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Web.WebTopologyBinding.CanApplyTo(System.Uri)">
            <summary>
            Determines whether this instance [can apply to] the specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>Returns true if the binding can be applied.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.WebTopologyBinding.ApplyTo(System.Uri)">
            <summary>
            Applies to.
            </summary>
            <param name="uri">The URI.</param>
            <returns>Returns true new URI.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.WebTopologyBinding.IsWithin(Geocortex.Core.Web.WebTopologyBinding)">
            <summary>
            Determines whether the current binding is within the given binding.
            </summary>
            <param name="binding">The binding.</param>
            <returns>Return true fi the binding is within the given binding.</returns>
        </member>
        <member name="M:Geocortex.Core.Web.WebTopologyBinding.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Geocortex.Core.Web.WebTopologyBinding.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologyBinding.EndPoint">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologyBinding.EndPointUri">
            <summary>
            Gets or sets the scope URI.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologyBinding.Source">
            <summary>
            Gets or sets the scope.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologyBinding.SourceUri">
            <summary>
            Gets or sets the scope URI.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologyBinding.Target">
            <summary>
            Gets or sets the target.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologyBinding.TargetUri">
            <summary>
            Gets or sets the target URI.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologyBinding.DefaultExplicitRoutes">
            <summary>
            Gets the default explicit routes.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologyBinding.DefaultImplicitRoutes">
            <summary>
            Gets the default implicit routes.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologyBinding.IsExplicit">
            <summary>
            Gets a value indicating whether [is explicit].
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologyBinding.IsDefaultPort">
            <summary>
            Gets a value indicating whether [is default port].
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologyBinding.IsSecure">
            <summary>
            Gets a value indicating whether [is secure].
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologyBinding.Quality">
            <summary>
            Gets the quality.
            </summary>
        </member>
        <member name="T:Geocortex.Core.Web.WebTopologySite">
            <summary>
            Information regarding a site.
            </summary>
        </member>
        <member name="M:Geocortex.Core.Web.WebTopologySite.Adopt(Geocortex.Core.Web.WebTopology,Geocortex.Core.Web.WebTopologySite)">
            <summary>
            Adopts the specified origin.
            </summary>
            <param name="origin">The origin.</param>
            <param name="other">The other.</param>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologySite.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologySite.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologySite.Bindings">
            <summary>
            Gets the bindings.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologySite.Routes">
            <summary>
            Gets the routes.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologySite.DefaultExplicitRoutes">
            <summary>
            Gets the default explicit routes.
            </summary>
        </member>
        <member name="P:Geocortex.Core.Web.WebTopologySite.DefaultImplicitRoutes">
            <summary>
            Gets the default implicit routes.
            </summary>
        </member>
        <member name="T:Geocortex.Core.WindowsSecurity">
            <summary>
            Windows security utilities.
            </summary>
        </member>
        <member name="M:Geocortex.Core.WindowsSecurity.AppendRequestHeaders(System.Uri,System.Net.WebHeaderCollection)">
            <summary>
            Called when appending headers to an outgoing web request is required.
            </summary>
            <param name="requestUri">A <see cref="T:System.Uri"/> containing the URI of the requested resource.</param>
            <param name="requestHeaders">Contain protocol headers associated with a web request.</param>
        </member>
        <member name="M:Geocortex.Core.WindowsSecurity.GetSafeCredentials">
            <summary>
            Sets network credentials for the current user if the current user is proper normal user.
            </summary>
            <returns>
            Returns credentials which are safe.
            </returns>
        </member>
        <member name="T:Geocortex.Core.ArgumentValidationHelper">
            <summary>
            Provides static methods that help validate input parameters by throwing exceptions when such parameters are invalid.
            </summary>
            <remarks>
            This class was created in an attempt to reduce redundant code when checking for nulls (and other conditions)
            at the beginning of methods, typically:
            <code>if (bar == null) throw new ArgumentNullException("bar");</code>
            <code>if (zzz == null) throw new ArgumentNullException("zzz");</code>
            </remarks>
        </member>
        <member name="M:Geocortex.Core.ArgumentValidationHelper.ThrowOnArgumentNull(System.Object,System.String)">
            <summary>
            Throws an ArgumentNullException if the argument is null.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Geocortex.Core.ArgumentValidationHelper.ThrowOnArgumentNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an ArgumentException if the string argument is null or empty.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Geocortex.Core.ArgumentValidationHelper.ThrowOnArgumentNullOrEmptyOrWhitespace(System.String,System.String)">
            <summary>
            Throws an ArgumentException if the string argument is null or empty or consists only of white-space characters.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Geocortex.Core.ArgumentValidationHelper.ThrowOnArgumentTypeNotAnEnum(System.Type,System.String)">
            <summary>
            Throws an ArgumentException if the argument type does not represent an enumeration.
            </summary>
            <param name="enumType">Type of the enumeration.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Geocortex.Core.ArgumentValidationHelper.ThrowOnArgumentNullOrEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Throws an ArgumentException if the collection argument is null or empty.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
            <param name="collection">The collection.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Geocortex.Core.ArgumentValidationHelper.ThrowOnArgumentNullOrEmpty``1(System.Collections.Generic.ICollection{``0},System.String,System.String)">
            <summary>
            Throws an ArgumentException if the collection argument is null or empty.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
            <param name="collection">The collection.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Geocortex.Core.ArgumentValidationHelper.ThrowOnArgumentNullOrEmpty(System.Collections.ICollection,System.String)">
            <summary>
            Throws an ArgumentException if the collection argument is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Geocortex.Core.ArgumentValidationHelper.ThrowOnArgumentNullOrEmpty(System.Collections.ICollection,System.String,System.String)">
            <summary>
            Throws an ArgumentException if the collection argument is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Geocortex.Core.ArgumentValidationHelper.ThrowOnArgumentNegative(System.Int32,System.String)">
            <summary>
            Throws an ArgumentException if the integer argument is negative.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Geocortex.Core.ArgumentValidationHelper.ThrowOnArgumentNegative(System.Int32,System.String,System.String)">
            <summary>
            Throws an ArgumentException if the integer argument is negative.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Geocortex.Core.ArgumentValidationHelper.ThrowOnArgumentZero(System.Int32,System.String)">
            <summary>
            Throws an ArgumentException if the integer argument is zero.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Geocortex.Core.ArgumentValidationHelper.ThrowOnArgumentZero(System.Int32,System.String,System.String)">
            <summary>
            Throws an ArgumentException if the integer argument is zero.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Geocortex.Core.ArgumentValidationHelper.ThrowOnArgumentPositive``1(``0,System.String)">
            <summary>
            Throws an ArgumentException if the argument is positive -- i.e. it is greater than the type's default value.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Geocortex.Core.ArgumentValidationHelper.ThrowOnArgumentPositive(System.Int32,System.String,System.String)">
            <summary>
            Throws an ArgumentException if the integer argument is positive -- i.e. it is greater than zero.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Geocortex.Core.ArgumentValidationHelper.ThrowOnObjectDisposed(System.Boolean,System.Reflection.MemberInfo)">
            <summary>
            Throws an ArgumentException if the argument is disposed.
            </summary>
            <param name="disposed">Whether the object has been disposed already.</param>
            <param name="objectType">Type of the object.</param>
        </member>
        <member name="M:Geocortex.Core.ArgumentValidationHelper.ThrowOnArgumentCondition(System.Boolean,System.String,System.String)">
            <summary>
            Throws an ArgumentException if the supplied condition is met.
            </summary>
            <param name="condition">The condition.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Geocortex.Core.ArgumentValidationHelper.CreateArgumentOutOfRangeException(System.String,System.Object,System.String)">
            <summary>
            Creates an instance of the <see cref="T:System.ArgumentOutOfRangeException"/> class.
            </summary>
            <param name="paramName">Name of the parameter.</param>
            <param name="actualValue">The actual value.</param>
            <param name="message">The message.</param>
            <returns>An instance of the <see cref="T:System.ArgumentOutOfRangeException"/> class.</returns>
        </member>
        <member name="T:Geocortex.Core.ArgumentValidationHelper.ValidatedNotNullAttribute">
            <summary>
            Custom attribute class that signals the Code Analysis engine to ignore
            the rule "CA1062: Validate arguments of public methods" when applied to a method parameter.
            </summary>
        </member>
        <member name="T:Geocortex.LanguagePackAttribute">
            <summary>
            Attribute which is used to infer the set of resources for this assembly.
            </summary>
        </member>
        <member name="M:Geocortex.LanguagePackAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.LanguagePackAttribute"/> class.
            </summary>
            <param name="inferringType">Type of the inferring.</param>
        </member>
        <member name="P:Geocortex.LanguagePackAttribute.InferringType">
            <summary>
            Gets the type of the inferring.
            </summary>
        </member>
        <member name="T:Geocortex.Globalization.LanguagePackCache">
            <summary>
            Static cache for retrieving string tables quickly.
            </summary>
        </member>
        <member name="M:Geocortex.Globalization.LanguagePackCache.GetTable(System.String)">
            <summary>
            Gets the dictionary.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>
            Returns the lookup for the given file.
            </returns>
        </member>
        <member name="T:Geocortex.LanguagePackResourceManager">
            <summary>
            Custom resource manager that consumes a language pack and falls back to the default behavior.
            </summary>
        </member>
        <member name="M:Geocortex.LanguagePackResourceManager.#ctor(System.String,System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Geocortex.LanguagePackResourceManager"/> class.
            </summary>
            <param name="baseName">Name of the base.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Geocortex.LanguagePackResourceManager.GetString(System.String)">
            <summary>
            Returns the value of the specified string resource.
            </summary>
            <param name="name">The name of the resource to retrieve.</param>
            <returns>
            The value of the resource localized for the caller's current UI culture, or null if <paramref name="name" /> cannot be found in a resource set.
            </returns>
        </member>
        <member name="M:Geocortex.LanguagePackResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns the value of the string resource localized for the specified culture.
            </summary>
            <param name="name">The name of the resource to get.</param>
            <param name="culture">An object that represents the culture for which the resource is localized.</param>
            <returns>
            The value of the resource localized for the specified culture, or null if <paramref name="name" /> cannot be found in a resource set.
            </returns>
        </member>
        <member name="M:Geocortex.LanguagePackResourceManager.GetObject(System.String)">
            <summary>
            Returns the value of the specified non-string resource.
            </summary>
            <param name="name">The name of the resource to get.</param>
            <returns>
            The value of the resource localized for the caller's current culture settings. If an appropriate resource set exists but <paramref name="name" /> cannot be found, the method returns null.
            </returns>
        </member>
        <member name="M:Geocortex.LanguagePackResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the value of the specified non-string  resource localized for the specified culture.
            </summary>
            <param name="name">The name of the resource to get.</param>
            <param name="culture">The culture for which the resource is localized. If the resource is not localized for this culture, the resource manager uses fallback rules to locate an appropriate resource.If this value is null, the <see cref="T:System.Globalization.CultureInfo" /> object is obtained using the culture's <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</param>
            <returns>
            The value of the resource, localized for the specified culture. If an appropriate resource set exists but <paramref name="name" /> cannot be found, the method returns null.
            </returns>
        </member>
    </members>
</doc>
